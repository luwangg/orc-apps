/* Copyright (c) 2010-2011, SCI-STI-MM Group
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the �cole Polytechnique F�d�rale de Lausanne (EPFL) nor 
 *     the names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL SCI-STI-MM Group BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package image.features ; /*
 * Authors: Richard Thavot <richard.thavot@epfl.ch>
 *		    Simone Casale Brunet <simone.casalebrunet@epfl.ch>
 * 
 * Create Date:   2011/03/02
 * Design Name:   ScquareROI 
 * Project Name:  ImageProcessing
 * Tool versions: Orcc
 * Description:   
 *   
 * Dependencies:
 * 
 * Revision:
 * 
 * Additional Comments:
 * 
 */
actor SquareROI() 
uint(size=16) SizeOfImage, uint(size=10) Y, uint(size=16) Limits 
==> 
uint(size=16) SizeOfCuttedImage, uint(size=10) YCutted :

	uint(size=16) Hb;

	uint(size=16) Wb;

	uint(size=16) Hc;

	uint(size=16) Wc;

	uint(size=16) i;

	uint(size=16) j;

	uint(size=16) ic;

	uint(size=16) jc;

	uint(size=16) imin;

	uint(size=16) imax;

	uint(size=16) jmin;

	uint(size=16) jmax;

	List(type: List(type: uint(size=8), size=2048), size=2048) image;

	bool state_init := true;

	bool state_cutImage := false;

	bool state_txImage := false;

	bool store := true;

	sizeofImgages: action SizeOfImage:[ soi ] repeat 2, Limits:[ limits ] repeat 4
		==> SizeOfCuttedImage:[ newSoi ] repeat 2
	guard
		state_init
	var
		List(type: uint(size=16), size=2) newSoi
	do
		Wb := soi[0];
		Hb := soi[1];
		imin := limits[0] - limits[2];
		imax := limits[0] + limits[2];
		jmin := limits[1] - limits[3];
		jmax := limits[1] + limits[3];
		Wc := limits[2] * 2 + 1;
		Hc := limits[3] * 2 + 1;
		newSoi[0] := Wc;
		newSoi[1] := Hc;
		i := 0;
		j := 0;
		ic := 0;
		jc := 0;
		store := true;
		state_init := false;
		state_cutImage := true;
	end

	cutImage: action Y:[ y ] ==>
	guard
		state_cutImage
	do
		if store and (i >= imin) and (i <= imax) and (j >= jmin) and (j <= jmax) then
			image[jc][ic] := y;
			ic := ic + 1;
			if ic = Wc then
				ic := 0;
				jc := jc + 1;
				if jc = Hc then
					store := false;
				end
			end
		end
		i := i + 1;
		if i = Wb then
			i := 0;
			j := j + 1;
			if j = Hb then
				i := 0;
				j := 0;
				state_cutImage := false;
				state_txImage := true;
			end
		end
	end

	txImage: action ==> YCutted:[ yc ]
	guard
		state_txImage
	var
		uint(size=8) yc
	do
		yc := image[j][i];
		i := i + 1;
		if i = Wc then
			i := 0;
			j := j + 1;
			if j = Hc then
				j := 0;
				state_txImage := false;
				state_init := true;
			end
		end
	end

end

