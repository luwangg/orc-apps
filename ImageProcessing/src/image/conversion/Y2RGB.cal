/* Copyright (c) 2010-2011, SCI-STI-MM Group
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the �cole Polytechnique F�d�rale de Lausanne (EPFL) nor 
 *     the names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL SCI-STI-MM Group BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package image.conversion;
import std.util.Math.*;
/*
 * Authors: Richard Thavot <richard.thavot@epfl.ch>
 *		    Simone Casale Brunet <simone.casalebrunet@epfl.ch>
 * 
 * Create Date:   2011/03/02
 * Design Name:   Y2RGB 
 * Project Name:  ImageProcessing
 * Tool versions: Orcc
 * Description:   10-bit Y to RGB conversion 
 *   
 * Dependencies:
 *
 * Revision:
 * 
 * Additional Comments:
 *   R = 1.164(Y - Y_min)
 * 	 G = 1.164(Y - Y_min)
 * 	 B = 1.164(Y - Y_min)
 *   where, using the 10-bit Y representation in RGB2Y.cal actor, Y_min = 64 
 */
 
actor Y2RGB()
uint(size=10) Y ==> uint(size=8) R, uint(size=8) G, uint(size=8) B :

	int(size=32) x_max = 232;

	int(size=32) x_min = 16;

	int(size=32) y_min = 64;

	conversion: action Y:[ y ] ==> R:[ red ], G:[ green ], B:[ blue ]
	var
		int(size=32) red , int(size=32) green , int(size=32) blue
	do
		red := clip_i32(1192 * (y - y_min) >> 12, x_min, x_max);
		green := clip_i32(1192 * (y - y_min) >> 12, x_min, x_max);
		blue := clip_i32(1192 * (y - y_min) >> 12, x_min, x_max);
	end

end 
		