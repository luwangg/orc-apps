/*
 * Copyright (c) 2017, Heriot-Watt University, Edinburgh
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Ross Brunton <bruntonross@gmail.com>
 * Date: 01.02.2017
 * See Above.md for documentation.
 */

package image.analysis.connected_components;

import image.constants.constants.*;

actor Above() uint(size=16) Gin ==> uint(size=16) Gout :
    uint(size=32) entries = IM_WIDTH_OUT;
    uint(size=16) above[entries];
    uint(size=16) current[entries];
    int(size=32) col := 0;
    uint(size=32) row := IM_HEIGHT_OUT;
    uint(size=16) ul := 0; // Outputs; upper left, upper middle, upper right
    uint(size=16) um := 0;
    uint(size=16) ur := 0;

    function Get (uint(size=32) index) --> uint(size=16):
        if index < 0 || index >= IM_WIDTH_OUT then
            0
        else
            above[index]
        end
    end

    reset: action ==>
    guard row = IM_HEIGHT_OUT
    do
        current := [0: for uint(size=32) _ in 1 .. (IM_WIDTH_OUT)];
        above := [0: for uint(size=32) _ in 1 .. (IM_WIDTH_OUT)];
        row := 0;
        col := 0;
    end

    write: action ==> Gout:[ul, um, ur]
    do
        ul := Get(col - 1);
        um := Get(col);
        ur := Get(col + 1);
    end

    read: action Gin:[x] ==>
    do
        current[col] := x;
        
        col := col + 1;

        if col = IM_WIDTH_OUT then
            col := 0;
            row := row + 1;
            above := current;
        end
    end

    schedule fsm write:
        write (write) --> read;
        write (reset) --> write;
        read (read) --> write;
    end

    priority
        reset > write;
    end
end
