/*
 * Copyright (c) 2017, Heriot-Watt University, Edinburgh
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Ross Brunton <bruntonross@gmail.com>
 * Date: 01.02.2017
 * See Reduce.md for documentation.
 */

package image.analysis.connected_components;

import image.constants.constants.*;

actor Reduce() uint(size=16) Gin ==> uint(size=8) Gout :
    uint(size=32) entries = 255;
    uint(size=16) slots[entries];
    int(size=8) out := 0;
    int(size=32) p := IM_HEIGHT_OUT * IM_WIDTH_OUT;
    int(size=32) i := 0;

    reset: action ==>
    guard p = IM_HEIGHT_OUT * IM_WIDTH_OUT
    do
        slots := [0: for uint(size=32) _ in 1 .. (entries)];
        p := 0;
    end

    write: action Gin:[x] ==> Gout:[out]
    do
        if x = 0 then
            out := 0;
        else
            out := 0;
            i := 0;
            while i < entries do
                if slots[i] = x || slots[i] = 0 then
                    slots[i] := x;
                    out := 255 - i;
                    i := entries;
                end
                i := i + 1;
            end

            if out = 0 then
                println("Err: Too many classes in Reduce");
            end
        end

        p := p + 1;
    end

    priority
        reset > write;
    end
end
