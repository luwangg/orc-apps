/*
 * Copyright (c) 2017, Heriot-Watt University, Edinburgh
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Author: Ross Brunton <bruntonross@gmail.com>
 * Date: 01.02.2017
 * See Label.md for documentation.
 */

package image.analysis.connected_components;

import image.constants.constants.*;

actor Label() uint(size=8) Gin, uint(size=16) Above ==> uint(size=16) Gout, uint(size=16) Equiv :
    uint(size=32) imagesize = IM_WIDTH_OUT * IM_HEIGHT_OUT;
    uint(size=16) last := 0;
    uint(size=8) equivP := 0;
    uint(size=16) equiv[4];
    uint(size=32) p := 0;
    uint(size=16) label := 0;
    uint(size=16) maxLabel := 1;

    reset: action ==> Equiv:[0, 0]
    guard p = imagesize
    do
        last := 0;
        equivP := 0;
        p := 0;
        label := 0;
        maxLabel := 1;
    end

    feed: action ==> Equiv:[last, equiv[equivP]]
    guard equivP > 0
    do
        equivP := equivP - 1;
    end

    proc: action Gin:[x], Above:[l, m, r] ==> Gout:[last]
    guard equivP = 0
    do
        if x > 0 then
            label := 0;

            if label = 0 then
                label := last;
            end

            if label = 0 then
                label := l;
            end
            if label != l && l > 0 then
                equiv[equivP] := l;
                equivP := equivP + 1;
            end

            if label = 0 then
                label := m;
            end
            if label != m && m > 0 then
                equiv[equivP] := m;
                equivP := equivP + 1;
            end

            if label = 0 then
                label := r;
            end
            if label != r && r > 0 then
                equiv[equivP] := r;
                equivP := equivP + 1;
            end

            if label = 0 then
                label := maxLabel;
                maxLabel := maxLabel + 1;
            end

            last := label;
        else
            last := 0;
        end

        p := p + 1;
    end

    priority
        feed > reset;
        reset > proc;
    end
end
