/* Copyright (c) 2010-2011, SCI-STI-MM Group
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the �cole Polytechnique F�d�rale de Lausanne (EPFL) nor 
 *     the names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL SCI-STI-MM Group BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package image.geometric ; 
/*
 * Authors: Richard Thavot <richard.thavot@epfl.ch>
 *		    Simone Casale Brunet <simone.casalebrunet@epfl.ch>
 * 
 * Create Date:   2011/03/02
 * Design Name:   Rotated90 
 * Project Name:  ImageProcessing
 * Tool versions: Orcc
 * Description:   rotated of 90� 
 *   
 * Dependencies:
 * 
 * Revision:
 * 
 * Additional Comments:
 * 
 */
actor Rotated90()
uint(size=16) SizeOfImage, uint(size=10) Y ==> uint(size=10) YRot, uint(size=16) SizeOfRotImage :

	List(type: List(type: uint(size=10), size=2048), size=2048) image;

	uint(size=16) H;
	uint(size=16) W;
	uint(size=16) i;
	uint(size=16) j;
	
	bool LoadUnload := false;

	Size.get: action SizeOfImage:[ soi ] repeat 2 ==>
	guard LoadUnload=false
	do
		H := soi[0];
		W := soi[1];
		i := 0;
		j := H - 1;
		LoadUnload := true;
	end

	Image.load: action Y:[ pixel ] ==>
	guard LoadUnload=true
	do
		image[j][i] := pixel;
		if j = 0 then
			if i = W - 1 then
				LoadUnload := false;
			else
				j := H - 1;
				i := i + 1;
			end
		else
			j := j - 1;
		end
	end
	
	Size.set: action ==> SizeOfRotImage:[ newSoi ] repeat 2
	guard LoadUnload=false
	var
		List(type: uint(size=16), size=2) newSoi
	do
		newSoi[0] := W;
		newSoi[1] := H;
		i := 0;
		j := 0;
		LoadUnload := true;
	end

	Image.unload: action ==> YRot:[ pixel ]
	guard LoadUnload=true
	var uint(size=8) pixel
	do
		pixel := image[j][i];
		if i = W - 1 then
			if j = H - 1 then
				LoadUnload := false;
			else
				i := 0;
				j := j + 1;
			end
		else
			i := i + 1;
		end
	end

	schedule fsm A :
		A ( Size.get )     --> B;
		B ( Image.load )   --> B;
		B ( Size.set ) 	   --> A;
		A ( Image.unload ) --> A;
	end
	
	priority 
		Size > Image;
	end

end