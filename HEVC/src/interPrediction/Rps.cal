/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * This actor generates the poc of the reference picture sets.
 * 
 * 
 * @input NaluType: Type of the current NALU : PPS, SPS, Slice, ...
 *
 * @input NumStRps : Equal to num_short_term_ref_pic_sets for SPS NALU or
 *        !short_term_ref_pic_set_sps_flag for slice_header NALU.
 * 
 * @input Poc : Contains the POC of the currrent slice.
 * 
 * @input SyntElem : contains the syntax elements from short_term_ref_pic_set.
 * 
 * 
 * @output RefPoc: Contains the size and the content of the 5 reference picture
 *         set (short_term_current_before, short_term_current_after,
 *         short_term_following, long_term_current, long_term_following).
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */

package interPrediction;

import org.sc29.wg11.mpegh.part2.main.synParser.Algo_ParserUtils.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

actor Rps()
	int(size=16) MaxPocLsb, /* is size correct ?*/
	uint(size=8) NaluType,
	uint(size=8) NumStRps, /*uint(size=7)*/
	uint(size=16) Poc,
	uint(size=8) SyntElem  /*uint(size=32)*/
		==>
	int(size=16) RefPoc
		:

	uint numPic[5];
	int  pocTables[5][8];

	uint numDeltaPocs[65];
	int  deltaPoc[65][8];
	
	int  numNegPict[65];
	int  deltaPocS0[65][8];
	bool currPicS0[65][8];
	
	int  numPosPict[65];
	int  deltaPocS1[65][8];
	bool currPicS1[65][8];

	bool isSps;	
	
	uint idxRps;
	uint idxRpsMax;
	uint rIdx;
	int  deltaRps;
	uint nDeltPoc;	
	int i0;
	int i1;
	uint iLoop;
	uint jLoop;
	int  dPoc;

	uint numStRps;
	uint stRpsDecod;
	int(size=16) maxPocLsb; // Used for LT references
	int(size=16) currPoc;

// /!\ : We don't manage multiple sps yet;
// /!\ : We don't manage long term references yet;


procedure setRefTables(uint idxRps)
var
	uint j := 0,
	uint k := 0
begin
	foreach int i in 0 .. numNegPict[idxRps]-1
	do
		if(currPicS0[idxRps][i]) then
			pocTables[ST_CURR_BEF][j] := currPoc + deltaPocS0[idxRps][i];
			j := j + 1;
		else
			pocTables[ST_FOLL][k] := currPoc + deltaPocS0[idxRps][i];
			k := k + 1;
		end
	end
	numPic[ST_CURR_BEF] := j;

	j:=0;
	foreach int i in 0 .. numPosPict[idxRps]-1
	do
		if(currPicS1[idxRps][i]) then
			pocTables[ST_CURR_AFT][j] := currPoc + deltaPocS1[idxRps][i];
			j := j + 1;
		else
			pocTables[ST_FOLL][k] := currPoc + deltaPocS1[idxRps][i];
			k := k + 1;
		end
	end
	numPic[ST_CURR_AFT] := j;
	numPic[ST_FOLL] := k;
	numPic[LT_CURR] := 0;
	numPic[LT_FOLL] := 0;
end


	/* Add all the element from deltaPocS0 an deltaPocS1 to deltaPoc */
	procedure fillInDeltaPoc()
	begin
		/* We put first the negative values, then the positive ones, then we
		 * put 0s
		 */
		numDeltaPocs[idxRps] := numNegPict[idxRps] + numPosPict[idxRps];
		foreach int i in 0 .. numNegPict[idxRps] - 1
		do
			deltaPoc[idxRps][i] := deltaPocS0[idxRps][i];
		end
		foreach int i in 0 .. numPosPict[idxRps] - 1
		do
			deltaPoc[idxRps][i+numNegPict[idxRps]] := deltaPocS1[idxRps][i];
		end
		foreach uint i in numDeltaPocs[idxRps] .. 7
		do
			deltaPoc[idxRps][i] := 0;
		end
	end

	/*** Check the NALU ***/
	getNaluType.isIdr: action NaluType:[nalu], MaxPocLsb:[maxPoc], Poc:[poc]
		==>
	guard
		nalu=NAL_IDR_W_DLP
	do
		/* An IDR picture has no reference */
		foreach int i in 0 .. 4
		do
			numPic[i] := 0;
		end
		iLoop := 0;
	end

	getNaluType.isNonIdr: action NaluType:[nalu], MaxPocLsb:[maxPoc],
		Poc:[poc], NumStRps:[numShTrmRps]
		==>
	guard
		nalu = NAL_TRAIL_N or nalu=NAL_TRAIL_R
	do
		maxPocLsb := maxPoc;
		currPoc   := poc;
		numStRps   := numShTrmRps;
		stRpsDecod := 0;
		idxRps     := idxRpsMax+1;
		isSps     := false;
	end

	getNaluType.isSps: action NaluType:[nalu], NumStRps:[numShTrmRps] ==>
	guard
		nalu=NAL_SPS
	do
		numStRps   := numShTrmRps;
		stRpsDecod := 0;
		idxRps     := 0;
		isSps      := true;
	end

	getNaluType.isOther: action NaluType:[nalu] ==>
	guard
		nalu!= NAL_SPS and nalu != NAL_TRAIL_N,
		nalu!= NAL_IDR_W_DLP and nalu != NAL_TRAIL_R
	end

	/* deltaPoc array will be based on an other array already decoded */
	checkInterRpsPred.eq1: action SyntElem:[se] repeat 4 ==>
	guard
		se[0] = 1
	var
		uint deltaIdx = se[1],
		uint(size=1) deltaRpsSign = se[2],
		uint absDeltaRps = se[3]
	do
		//We compute the idx of which array the current deltaPoc will be based
		//on.
		rIdx := idxRps - deltaIdx;
		rIdx := if(rIdx > 64) then 64 else rIdx end;
		//deltaRps is the difference between the original deltaPoc and the new one.
		deltaRps := (1-(deltaRpsSign<<1)) * absDeltaRps;
		nDeltPoc := numDeltaPocs[rIdx];
		i0 := 0;
		i1 := 0;
		iLoop := 0;
	end

	/* Check if the next value is in the "current" list */
	getUsedByCurr.isTrue: action SyntElem:[se] ==>
	guard
		se = 1 and iLoop <= nDeltPoc
	var
		int dPoc
	do
		/* We compute the value of the new deltaPoc then we put it in the right
		 * list (positive or negative list)
		 */
		dPoc := deltaPoc[rIdx][iLoop] + deltaRps;
		if(dPoc<0) then
			deltaPocS0[idxRps][i0] := dPoc;
			currPicS0[idxRps][i0] := true;
			i0 := i0 + 1;
		else
			deltaPocS1[idxRps][i1] := dPoc;
			currPicS1[idxRps][i1] := true;
			i1 := i1 + 1;
		end
		iLoop := iLoop + 1;
	end

	/* Check if the next value is either in the "following" list or if it's
	 * not in a list
	 */
	getUsedByCurr.isFalse: action SyntElem:[se] repeat 2 ==>
	guard
		se[0] = 0 and iLoop <= nDeltPoc
	var
		int dPoc,
		bool useDeltaFlag = se[1]!=0
	do
		//Check if the POC is contained in the "following" list.
		if(useDeltaFlag) then
			/* We compute the value of the new deltaPoc then we put it in the
			 * right list (positive or negative list)
			 */
			dPoc := deltaPoc[rIdx][iLoop] + deltaRps;
			if(dPoc<0) then
				deltaPocS0[idxRps][i0] := dPoc;
				currPicS0[idxRps][i0] := false;
				i0 := i0 + 1;
			else
				deltaPocS1[idxRps][i1] := dPoc;
				currPicS1[idxRps][i1] := false;
				i1 := i1 + 1;
			end
		end
		iLoop := iLoop + 1;
	end

	/* All the deltaPoc have been added */
	getUsedByCurrDone: action ==>
	guard
		iLoop > nDeltPoc
	var
		int dPoc,
		bool currPicSX
	do
		/* We sort deltaPocS0 and deltaPocS1 in order to always have
		 * deltaPocS0 increasing and deltaPocS1 decreasing. When
		 * inter_ref_pic_set_prediction_flag is equal to 0, we don't need to
		 * sort because it is already sorted.
		 */
		numNegPict[idxRps] := i0;
		numPosPict[idxRps] := i1;
		foreach int j in 0 .. i0-1
		do
			foreach int k in j+1 .. i0-1
			do 
				if(deltaPocS0[idxRps][j] < deltaPocS0[idxRps][k]) then
					dPoc := deltaPocS0[idxRps][j];
					currPicSX := currPicS0[idxRps][j];

					deltaPocS0[idxRps][j] := deltaPocS0[idxRps][k];
					currPicS0[idxRps][j] := currPicS0[idxRps][k];
					deltaPocS0[idxRps][k] := dPoc;
					currPicS0[idxRps][k] := currPicSX;
				end
			end
		end
		foreach int j in 0 .. i1-1
		do
			foreach int k in j+1 .. i1-1
			do 
				if(deltaPocS1[idxRps][j] > deltaPocS1[idxRps][k]) then
					dPoc := deltaPocS1[idxRps][j];
					currPicSX := currPicS1[idxRps][j];

					deltaPocS1[idxRps][j] := deltaPocS1[idxRps][k];
					currPicS1[idxRps][j] := currPicS1[idxRps][k];
					deltaPocS1[idxRps][k] := dPoc;
					currPicS1[idxRps][k] := currPicSX;
				end
			end
		end
		fillInDeltaPoc();
		stRpsDecod := stRpsDecod + 1;
	end

	/* deltaPoc array will be not based on an other array. */
	checkInterRpsPred.eq0: action SyntElem:[se] repeat 3 ==>
	guard
		se[0] = 0
	var
		uint seNumNegPics = se[1],
		uint seNumPosPics = se[2]
	do
		dPoc := 0;
		/* Indicates how many deltaPoc will be in the short term arrays */
		numNegPict[idxRps] := seNumNegPics;
		numPosPict[idxRps] := seNumPosPics;
		iLoop := 0;
	end

	/* Computing the value of the next deltaPocS0 and getting the flag to know
	 * if it belongs to the "following" or the "current" list
	 */
	getPocS0Info.launch: action SyntElem:[se] repeat 2 ==>
	guard
		iLoop < numNegPict[idxRps]
	var
		uint seDeltaPosS0 = se[0],
		bool seUsedByCurrPic = se[1]!=0
	do
		dPoc := dPoc - seDeltaPosS0;
		deltaPocS0[idxRps][iLoop] := dPoc;
		currPicS0[idxRps][iLoop] := seUsedByCurrPic;
		iLoop := iLoop + 1;
	end

	getPocS0Info.done: action ==>
	guard
		iLoop = numNegPict[idxRps]
	do
		iLoop := 0;
		dPoc := 0;
	end

	/* Computing the value of the next deltaPocS1 and getting the flag to know
	 * if it belongs to the "following" or the "current" list
	 */
	getPocS1Info.launch: action SyntElem:[se] repeat 2 ==>
	guard
		iLoop < numPosPict[idxRps]
	var
		uint seDeltaPosS1 = se[0],
		bool seUsedByCurrPic = se[1]!=0
	do
		dPoc := dPoc + seDeltaPosS1;
		deltaPocS1[idxRps][iLoop] := dPoc;
		currPicS1[idxRps][iLoop] := seUsedByCurrPic;
		iLoop := iLoop + 1;
	end

	getPocS1Info.done: action ==>
	guard
		iLoop = numPosPict[idxRps]
	do
		fillInDeltaPoc();
		stRpsDecod := stRpsDecod + 1;
	end

	checkNumStRps.finished.isSps: action ==>
	guard
		stRpsDecod = numStRps and isSps
	do
		idxRpsMax := idxRps;
	end

	checkNumStRps.finished.isSlice: action ==>
	guard
		stRpsDecod = numStRps and not isSps
	end

	checkNumStRps.notFinished: action ==>
	guard
		stRpsDecod < numStRps
	do
		if(stRpsDecod != 0) then
			idxRps := idxRps + 1;
		end
	end

	/*** Generating the 5 reference lists ***/
	computePocTables.getSe: action SyntElem:[stRpsIdx]==>
	guard
		numStRps = 0
	do
		setRefTables(stRpsIdx);
		iLoop := 0;
	end

	computePocTables.skipSe: action ==>
	guard
		numStRps != 0
	do
		setRefTables(idxRpsMax + 1);
		iLoop := 0;
	end

	/*** Sending the size of the current list ***/
	sendNumPic.launch: action ==> RefPoc:[numPic[iLoop]]
	guard
		iLoop < 5
	do
		jLoop:= 0;
	end

	sendNumPic.done: action ==>
	guard
		iLoop = 5
	end

	/*** Sending the content of the current list ***/
	sendPocRef.launch: action ==> RefPoc:[pocTables[iLoop][jLoop-1]]
	guard
		jLoop < numPic[iLoop]
	do
		jLoop := jLoop + 1;
	end

	sendPocRef.done: action ==>
	guard
		jLoop = numPic[iLoop]
	do
		iLoop := iLoop + 1;
	end

	schedule fsm GetNaluType:
		GetNaluType (getNaluType.isIdr    )--> SendNumPic;
		GetNaluType (getNaluType.isNonIdr )--> CheckNumStRps;
		GetNaluType (getNaluType.isSps    )--> CheckNumStRps;
		GetNaluType (getNaluType.isOther  )--> GetNaluType;

		CheckNumStRps (checkNumStRps.notFinished      )--> CheckInterRpsPred;
		CheckNumStRps (checkNumStRps.finished.isSps   )--> GetNaluType;
		CheckNumStRps (checkNumStRps.finished.isSlice )--> ComputePocTables;

		CheckInterRpsPred (checkInterRpsPred.eq0 )--> GetPocS0Info;
		CheckInterRpsPred (checkInterRpsPred.eq1 )--> GetUsedByCurr;

		GetUsedByCurr (getUsedByCurr     )--> GetUsedByCurr;
		GetUsedByCurr (getUsedByCurrDone )--> CheckNumStRps;
	
		GetPocS0Info (getPocS0Info.launch )--> GetPocS0Info;
		GetPocS0Info (getPocS0Info.done   )--> GetPocS1Info;
	
		GetPocS1Info (getPocS1Info.launch )--> GetPocS1Info;
		GetPocS1Info (getPocS1Info.done   )--> CheckNumStRps;

		ComputePocTables (computePocTables )--> SendNumPic;

		SendNumPic (sendNumPic.launch )--> SendPocRef;
		SendNumPic (sendNumPic.done   )--> GetNaluType;
	
		SendPocRef (sendPocRef.launch )--> SendPocRef;
		SendPocRef (sendPocRef.done   )--> SendNumPic;
	end
end