/**
 * This FU is part of the testbed of a CAL implementation of AES (Rijndael) running at CTR mode.
 * It sends a key, an inialization vector, a sequence of plaintext and the golden response (ciphertext) for the enciphers in CTR mode.
 * The test vectors and golden responses are taken from the following reference:
 * Morris Dworkin, "Recommendation for Block Cipher Modes of Operation: Methods and Techniques,"
 *  				NIST Special Publication 800-38A, December 2001
 * http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
 * 
 * FU ID: Source_AES_CTR_Encipher
 * Six output ports:
 *   1) uint(size=8) OP1_IV: the initialization vector (counter)
 *   2) uint(size=8) OP2_KeySize: the key size
 *   3) uint(size=8) OP3_Key: the key
 *   4) uint(size=8) OP4_PT: the plaintext
 *   5) uint(size=64) OP5_IDX: the 0-based index of the plaintext 
 *   6) uint(size=8) OP6_GR: the golden response
 *
 * Developers: Junaid Jameel Ahmad, Shujun Li @ Uni-Konstanz 2010
 */

package Block_Ciphers.Modes;

actor Source_AES_CTR_Encipher () ==> uint(size=8) OP1_IV, uint(size=8) OP2_KeySize, uint(size=8) OP3_Key, uint(size=8) OP4_PT, uint(size=64) OP5_IDX, uint(size=8) OP6_GR:

	// Test vectors for AES-128 (F.5.1 CTR-AES128.Encrypt).
	int KEY_SIZE = 16;
	List(type:uint(size=8), size=KEY_SIZE) k = [ // Key
		0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
	];

	int BLOCK_SIZE = 16;
	List(type:uint(size=8), size=BLOCK_SIZE) iv = [ // Initialization vector (counter): One block
		0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff
	];
	
	int TEXT_SIZE = 192;
	List(type:uint(size=64), size=TEXT_SIZE/BLOCK_SIZE) index = [i : for int i in 0 .. TEXT_SIZE/BLOCK_SIZE-1]; // Plaintext index
	List(type:uint(size=8), size=TEXT_SIZE) pt = [ // Plaintext: Multiple blocks
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51

	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Ciphertext)	
		0x87,0x4d,0x61,0x91,0xb6,0x20,0xe3,0x26,0x1b,0xef,0x68,0x64,0x99,0x0d,0xb6,0xce,
		0x98,0x06,0xf6,0x6b,0x79,0x70,0xfd,0xff,0x86,0x17,0x18,0x7b,0xb9,0xff,0xfd,0xff,
		0x01,0xed,0x7d,0x9a,0x56,0xc9,0xa8,0xd9,0x57,0x89,0xb6,0x0a,0x64,0x29,0x7b,0x6e,
		0x46,0xb1,0xb3,0xc8,0xee,0xf2,0x34,0x5a,0x4a,0xbd,0x5e,0x77,0x50,0xc3,0x25,0xaf,
		0xdb,0xcc,0xf9,0x1a,0x3a,0xca,0x0e,0x98,0x19,0x55,0x4e,0x86,0xe3,0xd8,0xb2,0x28,
		0xf6,0xb4,0xce,0x0d,0x53,0xe2,0xad,0x69,0x8d,0x7d,0xbe,0x34,0x38,0x26,0x67,0x4a,
		0x50,0x18,0x12,0x9b,0x67,0x9e,0xb4,0x6f,0x8c,0x54,0xd2,0x29,0x30,0x6b,0x65,0x68,
		0xd3,0xb7,0x44,0xd7,0x59,0xc0,0xff,0x95,0x8b,0xed,0xd7,0x04,0xb5,0x2a,0x19,0xe0,
		0xdc,0x5d,0x07,0xc4,0x6e,0xae,0xd7,0x01,0x7c,0x92,0x48,0x04,0x59,0x20,0xe1,0x11,
		0xd4,0x6f,0xe5,0x21,0x93,0xba,0x49,0x74,0x82,0x02,0xa7,0xe2,0x32,0xe2,0x43,0x7c,
		0xc6,0x61,0xf3,0x05,0x06,0x6d,0x1c,0x48,0xb1,0x53,0xaa,0x94,0x79,0x00,0x98,0x3f,
		0xe3,0x0f,0x3b,0xb6,0xcc,0xb2,0x84,0x08,0x64,0x16,0x90,0x0a,0x91,0x23,0xee,0x62
	];

	// Test vectors for AES-192 (F.5.3 CTR-AES192.Encrypt).
/*	int KEY_SIZE = 24;
	List(type:uint(size=8), size=KEY_SIZE) k = [ // Key
		0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
	];

	int BLOCK_SIZE = 16;
	List(type:uint(size=8), size=BLOCK_SIZE) iv = [ // Initialization vector (counter): One block
		0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff
	];
	
	int TEXT_SIZE = 32;
	List(type:uint(size=64), size=TEXT_SIZE) index = [i : for int i in 0 .. TEXT_SIZE-1]; // Plaintext index
	List(type:uint(size=8), size=TEXT_SIZE) pt = [ // Plaintext: Multiple blocks
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Ciphertext)	
		0x1a,0xbc,0x93,0x24,0x17,0x52,0x1c,0xa2,0x4f,0x2b,0x04,0x59,0xfe,0x7e,0x6e,0x0b,
		0x09,0x03,0x39,0xec,0x0a,0xa6,0xfa,0xef,0xd5,0xcc,0xc2,0xc6,0xf4,0xce,0x8e,0x94
	];*/

	// Test vectors for AES-256 (F.5.5 CTR-AES256.Encrypt).
/*	int KEY_SIZE = 32;
	List(type:uint(size=8), size=KEY_SIZE) k = [ // Key
		0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
		0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
	];

	int BLOCK_SIZE = 16;
	List(type:uint(size=8), size=BLOCK_SIZE) iv = [ // Initialization vector (counter): One block
		0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff
	];
	
	int TEXT_SIZE = 32;	
	List(type:uint(size=64), size=TEXT_SIZE) index = [i : for int i in 0 .. TEXT_SIZE-1]; // Plaintext index
	List(type:uint(size=8), size=TEXT_SIZE) pt = [ // Plaintext: Multiple blocks
		0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
		0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
	];
	List(type:uint(size=8), size=TEXT_SIZE) gr = [ // Golden response (Ciphertext)	
		0x60,0x1e,0xc3,0x13,0x77,0x57,0x89,0xa5,0xb7,0xa7,0xf5,0x04,0xbb,0xf3,0xd2,0x28,
		0xf4,0x43,0xe3,0xca,0x4d,0x62,0xb5,0x9a,0xca,0x84,0xe9,0x90,0xca,0xca,0xf5,0xc5
	]; */

	bool dataSent := false;
	sendData:
	action ==> OP1_IV:[iv] repeat BLOCK_SIZE,
               OP2_KeySize:[KEY_SIZE],
               OP3_Key:[k] repeat KEY_SIZE,
               OP4_PT:[pt] repeat TEXT_SIZE,
               OP5_IDX:[index] repeat TEXT_SIZE/BLOCK_SIZE,               
               OP6_GR:[gr] repeat TEXT_SIZE
    guard not dataSent
    do
    	dataSent := true;	
    end
end
