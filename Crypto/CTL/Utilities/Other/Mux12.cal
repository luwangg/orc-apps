/**
 * This FU is part of the testbed of the Cryptographic Tool Library (CTL) utilities.
 * It sequentially merges (or multiplexes) four blocks/streams of tokens into a single sequence.
 * Block size can be reconfigured using FU parameter.
 * 
 * FU ID: Mux4
 * Input ports:
 * 	 1), ..., 4) uint(size=8) IP_B1, ..., IP_B4: the input blocks
 * Output port:
 * 	 1) uint(size=8) OP: the output
 *  
 * Developer: Junaid Jameel Ahmad @ EPFL, 2015.
 * Last modified: 03.12.2015 
 */

package Utilities.Other;

actor Mux12 (uint(size=8) BLOCK_SIZE=16) 
				uint(size=8) IP_B1, uint(size=8) IP_B2, uint(size=8) IP_B3, uint(size=8) IP_B4,
				uint(size=8) IP_B5, uint(size=8) IP_B6, uint(size=8) IP_B7, uint(size=8) IP_B8,
				uint(size=8) IP_B9, uint(size=8) IP_B10, uint(size=8) IP_B11, uint(size=8) IP_B12
			==> uint(size=8) OP:
	
	uint(size=8) BLOCK_SIZE_1 = BLOCK_SIZE - 1;
	uint(size=8) BLOCK_SIZE_times_2 = BLOCK_SIZE * 2;
	uint(size=8) BLOCK_SIZE_times_3 = BLOCK_SIZE * 3;
	uint(size=8) BLOCK_SIZE_times_4 = BLOCK_SIZE * 4;
	uint(size=8) BLOCK_SIZE_times_5 = BLOCK_SIZE * 5;
	uint(size=8) BLOCK_SIZE_times_6 = BLOCK_SIZE * 6;
	uint(size=8) BLOCK_SIZE_times_7 = BLOCK_SIZE * 7;
	uint(size=8) BLOCK_SIZE_times_8 = BLOCK_SIZE * 8;
	uint(size=8) BLOCK_SIZE_times_9 = BLOCK_SIZE * 9;
	uint(size=8) BLOCK_SIZE_times_10 = BLOCK_SIZE * 10;
	uint(size=8) BLOCK_SIZE_times_11 = BLOCK_SIZE * 11;
	
    Forward12Blocks:
    action
               IP_B1:[B1] repeat BLOCK_SIZE,
               IP_B2:[B2] repeat BLOCK_SIZE,
               IP_B3:[B3] repeat BLOCK_SIZE,
               IP_B4:[B4] repeat BLOCK_SIZE,
               IP_B5:[B5] repeat BLOCK_SIZE,
               IP_B6:[B6] repeat BLOCK_SIZE,
               IP_B7:[B7] repeat BLOCK_SIZE,
               IP_B8:[B8] repeat BLOCK_SIZE,
               IP_B9:[B9] repeat BLOCK_SIZE,
               IP_B10:[B10] repeat BLOCK_SIZE,
               IP_B11:[B11] repeat BLOCK_SIZE,
               IP_B12:[B12] repeat BLOCK_SIZE
    	==>    
               OP:[op] repeat BLOCK_SIZE * 12                          
    var
    	int op[BLOCK_SIZE * 12]
    do
    	foreach int i in 0 .. BLOCK_SIZE_1 do
    		op[i] := B1[i];
    		op[BLOCK_SIZE+i] := B2[i];
    		op[BLOCK_SIZE_times_2+i] := B3[i];
    		op[BLOCK_SIZE_times_3+i] := B4[i];
    		op[BLOCK_SIZE_times_4+i] := B5[i];
    		op[BLOCK_SIZE_times_5+i] := B6[i];
    		op[BLOCK_SIZE_times_6+i] := B7[i];
    		op[BLOCK_SIZE_times_7+i] := B8[i];
    		op[BLOCK_SIZE_times_8+i] := B9[i];
    		op[BLOCK_SIZE_times_9+i] := B10[i];
    		op[BLOCK_SIZE_times_10+i] := B11[i];
    		op[BLOCK_SIZE_times_11+i] := B12[i];
    	end	
    end
end
