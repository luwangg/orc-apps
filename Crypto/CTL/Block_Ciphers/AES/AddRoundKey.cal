/**
 * This FU is part of a CAL implementation of AES (Rijndael).
 * It performs AddRoundKey process in each round of the AES encipher/decipher.
 * This FU also performs the initial key scheduling process to make the AES implementation more compact.
 * 
 * FU ID: AddRoundKey
 * One actor parameter:
 *   1) bool IS_ENCIPHER: true = encipher mode (default), false = decipher mode
 * Four input ports:
 *   1) uint(size=8) IP1_Text: the plaintext/ciphertext
 *   2) uint(size=8) IP2_KeySize: the key size
 *   3) uint(size=8) IP3_Key: the key
 *   4) uint(size=8) IP4_FD: feedback from other component of the AES cipher
 * Two output ports:
 *   1) uint(size=8) OP1_Text: final output as ciphertext/plaintext
 *   2) uint(size=8) OP2_FD: temporary output sent to other FU of the AES encipher/decipher
 *
 * Note: The key is also read from an input port because it is possible that key is dynamically changed.
 *       Currently the key is read only once, so it is fixed for the whole encryption/decryption process.
 *       Support to dynamically updated keys are to be added when necessary.
 * 
 * Developers: Shujun Li, Junaid Jameel Ahmad @ Uni-Konstanz 2010
 */

package Block_Ciphers.AES;

actor AddRoundKey (bool IS_ENCIPHER=true) uint(size=8) IP1_Text, uint(size=8) IP2_KeySize, uint(size=8) IP3_Key, uint(size=8) IP4_FD ==> 
		uint(size=8) OP1_Text, uint(size=8) OP2_FD :
		
	function getIdx(uint(size=8) x) --> int(size=16) 
	:
	if((x&0x80) = 1) then
		128 + (x&0x7F)
	else
		x
	end	
end

	// The following variables are values for AES-256.
	// They will be updated later according to the key received from the source.
	// Note: Nr and Nk are variables in FIPS standard, so they don't follow the normal naming convention.
	int keySize := 32;
	int Nk := (keySize >> 2); // = keySize/4 = Nk @ FIPS 197
	List(type:uint(size=8), size=32) key := [0 : for int i in 1 .. 32];
	int Nr := 6 + Nk; // keySize = [16, 24, 32] => Nr = [10, 12, 14] (Nr = number of rounds)
	int Nr16 := (Nr+1 << 4); // = 16*(Nr+1)
	int Nr4 := (Nr16 << 2); // = 4*(Nr+1) = Nb * (Nr+1) @ FIPS 197
	// A list for storing expanded keys for all rounds.
	List(type:uint(size=8), size=240) keyEx := [0 : for int i in 1 .. 240]; // Nr16 = 240

	// The S-box used in SubBytes.
	List(type:uint(size=8), size=256) S_BOX = 
	[
		0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
		0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
		0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
		0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
		0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
		0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
		0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
		0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
		0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
		0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
		0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
		0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
		0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
		0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
		0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
		0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
	];
	// The following list stores 2^{i-1} over GF(2^8), i.e., the non-zero Rcon bytes.
	List(type:uint(size=8), size=14) R_CON1 = 
	[
		0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36, // 10: for AES-128
		0x6c,0xc3, // 12: for AES-192
		0x9d,0x3a // 14: for AES-256
	];
	
	// KeyExpansion procedure defined in Fig. 11 of FIPS 197.
	procedure KeyExpansion ()
	var
		int i_word_mod_Nk,
		int i_byte,
		uint(size=8) byte,
		int index,
		int index2
	begin
		foreach int i in 0 .. keySize-1 do
			keyEx[i] := key[i];
		end	
		i_byte := keySize; // 4*Nk
		foreach int i_word in Nk .. Nr4-1 do
			i_word_mod_Nk := i_word mod Nk;
			if i_word_mod_Nk=0 then
				// SubByte(RotWord(...))			
				keyEx[i_byte] := S_BOX[getIdx(keyEx[i_byte-3])]; 
				keyEx[i_byte] := (keyEx[i_byte] ^ R_CON1[i_word/Nk-1]);
				keyEx[i_byte+1] := S_BOX[getIdx(keyEx[i_byte-2])]; // AND with 0xFF to make it work with LLVM.
				keyEx[i_byte+2] := S_BOX[getIdx(keyEx[i_byte-1])]; // AND with 0xFF to make it work with LLVM.
				keyEx[i_byte+3] := S_BOX[getIdx(keyEx[i_byte-4])]; // AND with 0xFF to make it work with LLVM.
			else
				if (Nk>6 and i_word_mod_Nk=4) then
					// SubBytes(...)
					keyEx[i_byte] := S_BOX[getIdx(keyEx[i_byte-4])];
					keyEx[i_byte+1] := S_BOX[getIdx(keyEx[i_byte-3])]; // AND with 0xFF to make it work with LLVM.
					keyEx[i_byte+2] := S_BOX[getIdx(keyEx[i_byte-2])]; // AND with 0xFF to make it work with LLVM.
					keyEx[i_byte+3] := S_BOX[getIdx(keyEx[i_byte-1])]; // AND with 0xFF to make it work with LLVM.
				else
					keyEx[i_byte] := keyEx[i_byte-4];
					keyEx[i_byte+1] := keyEx[i_byte-3];
					keyEx[i_byte+2] := keyEx[i_byte-2];
					keyEx[i_byte+3] := keyEx[i_byte-1];				
				end
			end
			keyEx[i_byte] := (keyEx[i_byte] ^ keyEx[i_byte-keySize]);
			keyEx[i_byte+1] := (keyEx[i_byte+1] ^ keyEx[i_byte-keySize+1]);
			keyEx[i_byte+2] := (keyEx[i_byte+2] ^ keyEx[i_byte-keySize+2]);
			keyEx[i_byte+3] := (keyEx[i_byte+3] ^ keyEx[i_byte-keySize+3]);
			i_byte := i_byte + 4;
		end
		// Reverse the expanded key round by round for decipher.
		// This will allow us not to change the other actions in this actor.
	 	if not IS_ENCIPHER then
			index := 0;
			index2 := (Nr << 4);
			foreach int r in 0 .. Nr/2 do
				foreach int i in 0 .. 15 do
					byte := keyEx[index+i];
					keyEx[index+i] := keyEx[index2+i];
					keyEx[index2+i] := byte;
				end
				index := index + 16;
				index2 := index2 - 16;
			end
		end
	end
	
	bool keyInfoUpdated := false;
	int keyCounter := 0;
	bool keyExpanded := false;

	// Read the key size and update other parameters.
	readKeyInfo:
	action IP2_KeySize:[K] ==>
	guard not keyInfoUpdated
	do
		keySize := K;
		Nk := (keySize >> 2);
		Nr := 6 + Nk;
		Nr16 := ((Nr+1) << 4);
		Nr4 := (Nr16 >> 2);
		keyInfoUpdated := true;
	end
	
	// Read the key according to the value of KeySize.
	keyExpansion:
	action IP3_Key:[k] ==>
	guard keyInfoUpdated and keyCounter<keySize
	do
		key[keyCounter] := k;
		keyCounter := keyCounter + 1;
		if keyCounter>=keySize then // Expand the key if all bytes have been read.
			KeyExpansion();
			keyExpanded := true;
		end
	end

	// y is used to assemble a 17-byte output due to the lack of support of list concatenation by ORCC.
	List(type:uint(size=8), size=17) y := [0 : for int i in 1 .. 17];

	// A common procedure for performing AddRoundKey.
	// Because ORCC does not support #, we have to send a second argument for this value.
	procedure AddRoundKey (List(type:uint(size=8), size=17) x, int xSize)
	var
		int index
	begin
		if xSize=16 then
			y[0] := 0;
			foreach int i in 0 .. 15 do
				y[i+1] := x[i] ^ keyEx[i];
			end
		else
			y[0] := x[0];
			index := (x[0] << 4); // x[0]*16;
			foreach int i in 0 .. 15 do
				y[i+1] := x[i+1] ^ keyEx[index+i];
			end
		end
	end
	
	// For the initial round, output the round number 0 and a 16-byte block to OP2_FD.
	initialRound:
	action IP1_Text:[x] repeat 16 ==> OP2_FD:[y] repeat 17
	guard keyExpanded
	do
		AddRoundKey(x,16);
	end

	// For a normal round, output the round number x[0] and a 16-byte block to OP2_FD.
	normalRound:
	action IP4_FD:[x] repeat 17 ==> OP2_FD:[y] repeat 17
	guard keyExpanded and x[0]<Nr
	do
		AddRoundKey(x,17);
	end
	
	// For the last round, output a 16-byte ciphertext block to OP1_CT.
	lastRound:
	action IP4_FD:[x] repeat 17 ==> OP1_Text:[ [y[i] : for int i in 1 .. 16] ] repeat 16
	guard keyExpanded and x[0]=Nr
	do
		AddRoundKey(x,17);
/*print("Round: "+y[0]+" y[");
foreach int i in 1 .. 16 do
	print(" "+y[i]);
end
println("]");*/
	end
	
	priority
		// lastRound helps reduce the waiting queue, so it has the highest priority.
		// initialRound can increase the waiting queue, so it has the lowest priority.
		// readKeyInfo and keyExpansion have the least priority as they will only 
		// fire once at the start.
		lastRound > normalRound > initialRound > readKeyInfo > keyExpansion;
	end
end
