/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package dfadd.common;

actor AddOrSub() int Ready,
				 int ASign, 
				 uint(size = 64) ASig, 
				 uint AExp, 
				 int BSign, 
				 uint(size = 64) BSig, 
				 uint BExp,
				 uint(size = 64) A_In,
				 uint(size =64) B_In 
					==> 
						int ASign_Out_Add,
						uint(size = 64) NumSig_Add, 
						uint NumExp_Add, 
						int ExpDiff_Add,
						uint(size = 64) A_Out_Add,
						uint(size = 64) B_Out_Add,
						int ASign_Out_Sub, 
						uint(size = 64) NumSig_Sub, 
						uint NumExp_Sub, 
						int ExpDiff_Sub,
						uint(size = 64) A_Out_Sub,
						uint(size = 64) B_Out_Sub :

	int ready := 1;

	ready_check: action Ready:[r] ==>
	do
		ready := r;
	end
		
	process.add: action 
		   ASign:[a_sign], 
		   ASig:[a_sig], 
		   AExp:[a_exp], 
		   BSign:[b_sign], 
		   BSig:[b_sig], 
		   BExp:[b_exp],
		   A_In:[a],
		   B_In:[b] 
		   	==> 
		   		ASign_Out_Add:[sign], 
				NumSig_Add:[sig] repeat 2, 
				NumExp_Add:[exp] repeat 2, 
				ExpDiff_Add:[exp_diff],
				A_Out_Add:[a],
				B_Out_Add:[b]
	guard
		(a_sign = b_sign) && (ready = 1)
	var
		int sign,
		uint(size = 64) sig[2],
		uint exp[2],
		uint exp_diff
	do
		sign := a_sign;
		exp_diff := a_exp - b_exp;
		sig[0] := a_sig << 9;
		sig[1] := b_sig << 9;
		exp[0] := a_exp;
		exp[1] := b_exp;
		ready := 0;
	end
	
	process.sub: action 
		   ASign:[a_sign], 
		   ASig:[a_sig], 
		   AExp:[a_exp], 
		   BSign:[b_sign], 
		   BSig:[b_sig], 
		   BExp:[b_exp],
		   A_In:[a],
		   B_In:[b] 
		   	==> 
		   		ASign_Out_Sub:[sign], 
				NumSig_Sub:[sig] repeat 2, 
				NumExp_Sub:[exp] repeat 2, 
				ExpDiff_Sub:[exp_diff],
				A_Out_Sub:[a],
				B_Out_Sub:[b]
	guard
		(a_sign != b_sign) && (ready = 1)
	var
		int sign,
		uint(size = 64) sig[2],
		uint exp[2],
		uint exp_diff
	do
		sign := a_sign;
		exp_diff := a_exp - b_exp;
		sig[0] := a_sig << 10;
		sig[1] := b_sig << 10;
		exp[0] := a_exp;
		exp[1] := b_exp;
		ready := 0;
	end
	
	schedule fsm first:
		first (process) --> check;
		check (ready_check) --> busy;
		busy (process) --> check;
	end 
end