/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package dfsin;

unit Constants :
/*----------------------------------------------------------------------------
| The pattern for a default generated double-precision NaN.
*----------------------------------------------------------------------------*/
	uint(size = 64) float64_default_nan = 0x7FFFFFFFFFFFFFFF;

/*----------------------------------------------------------------------------
| Underflow tininess-detection mode, statically initialized to default value.
*----------------------------------------------------------------------------*/
	uint float_detect_tininess = float_tininess_before_rounding;

/*----------------------------------------------------------------------------
| Software IEC/IEEE floating-point underflow tininess-detection mode.
*----------------------------------------------------------------------------*/
	uint float_tininess_after_rounding  = 0;
	uint float_tininess_before_rounding = 1;

/*----------------------------------------------------------------------------
| Floating-point rounding mode, extended double-precision rounding precision,
| and exception flags.
*----------------------------------------------------------------------------*/
	uint float_rounding_mode = float_round_nearest_even;
	uint float_exception_flags = 0;

/*----------------------------------------------------------------------------
| Software IEC/IEEE floating-point rounding mode.
*----------------------------------------------------------------------------*/
	uint float_round_nearest_even = 0;
	uint float_round_to_zero      = 1;
	uint float_round_up 		  = 2;
	uint float_round_down 		  = 3;

/*----------------------------------------------------------------------------
| Software IEC/IEEE floating-point exception flags.
*----------------------------------------------------------------------------*/
	uint float_flag_inexact   =  1;
	uint float_flag_divbyzero =  2;
	uint float_flag_underflow =  4;
	uint float_flag_overflow  =  8;
	uint float_flag_invalid   = 16;

	uint countLeadingZerosHigh[256] = [
    8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  ];
  
/*
+--------------------------------------------------------------------------+
| * Test Vectors (added for CHStone)                                       |
|     test_in : input data                                                 |
|     test_out : expected output data                                      |
+--------------------------------------------------------------------------+
*/
	int N = 36;
uint(size = 64) test_in[N] = [
  0x0000000000000000,	/*      0  */
  0x3fc65717fced55c1,	/*   PI/18 */
  0x3fd65717fced55c1,	/*   PI/9  */
  0x3fe0c151fdb20051,	/*   PI/6  */
  0x3fe65717fced55c1,	/*  2PI/9  */
  0x3febecddfc28ab31,	/*  5PI/18 */
  0x3ff0c151fdb20051,	/*   PI/3  */
  0x3ff38c34fd4fab09,	/*  7PI/18 */
  0x3ff65717fced55c1,	/*  4PI/9  */
  0x3ff921fafc8b0079,	/*   PI/2  */
  0x3ffbecddfc28ab31,	/*  5PI/9  */
  0x3ffeb7c0fbc655e9,	/* 11PI/18 */
  0x4000c151fdb20051,	/*  2PI/3  */
  0x400226c37d80d5ad,	/* 13PI/18 */
  0x40038c34fd4fab09,	/*  7PI/9  */
  0x4004f1a67d1e8065,	/*  5PI/6  */
  0x40065717fced55c1,	/*  8PI/9  */
  0x4007bc897cbc2b1d,	/* 17PI/18 */
  0x400921fafc8b0079,	/*   PI    */
  0x400a876c7c59d5d5,	/* 19PI/18 */
  0x400becddfc28ab31,	/* 10PI/9  */
  0x400d524f7bf7808d,	/*  7PI/6  */
  0x400eb7c0fbc655e9,	/* 11PI/9  */
  0x40100e993dca95a3,	/* 23PI/18 */
  0x4010c151fdb20051,	/*  8PI/6  */
  0x4011740abd996aff,	/* 25PI/18 */
  0x401226c37d80d5ad,	/* 13PI/9  */
  0x4012d97c3d68405b,	/*  3PI/2  */
  0x40138c34fd4fab09,	/* 14PI/9  */
  0x40143eedbd3715b7,	/* 29PI/18 */
  0x4014f1a67d1e8065,	/* 15PI/9  */
  0x4015a45f3d05eb13,	/* 31PI/18 */
  0x40165717fced55c1,	/* 16PI/9  */
  0x401709d0bcd4c06f,	/* 33PI/18 */
  0x4017bc897cbc2b1d,	/* 17PI/9  */
  0x40186f423ca395cb
];				/* 35PI/18 */

uint(size = 64) test_out[N] = [
  0x0000000000000000,	/*  0.000000 */
  0x3fc63a1a335aadcd,	/*  0.173648 */
  0x3fd5e3a82b09bf3e,	/*  0.342020 */
  0x3fdfffff91f9aa91,	/*  0.500000 */
  0x3fe491b716c242e3,	/*  0.642787 */
  0x3fe8836f672614a6,	/*  0.766044 */
  0x3febb67ac40b2bed,	/*  0.866025 */
  0x3fee11f6127e28ad,	/*  0.939693 */
  0x3fef838b6adffac0,	/*  0.984808 */
  0x3fefffffe1cbd7aa,	/*  1.000000 */
  0x3fef838bb0147989,	/*  0.984808 */
  0x3fee11f692d962b4,	/*  0.939693 */
  0x3febb67b77c0142d,	/*  0.866026 */
  0x3fe883709d4ea869,	/*  0.766045 */
  0x3fe491b81d72d8e8,	/*  0.642788 */
  0x3fe00000ea5f43c8,	/*  0.500000 */
  0x3fd5e3aa4e0590c5,	/*  0.342021 */
  0x3fc63a1d2189552c,	/*  0.173648 */
  0x3ea6aedffc454b91,	/*  0.000001 */
  0xbfc63a1444ddb37c,	/* -0.173647 */
  0xbfd5e3a4e68f8f3e,	/* -0.342019 */
  0xbfdffffd494cf96b,	/* -0.499999 */
  0xbfe491b61cb9a3d3,	/* -0.642787 */
  0xbfe8836eb2dcf815,	/* -0.766044 */
  0xbfebb67a740aae32,	/* -0.866025 */
  0xbfee11f5912d2157,	/* -0.939692 */
  0xbfef838b1ac64afc,	/* -0.984808 */
  0xbfefffffc2e5dc8f,	/* -1.000000 */
  0xbfef838b5ea2e7ea,	/* -0.984808 */
  0xbfee11f7112dae27,	/* -0.939693 */
  0xbfebb67c2c31cb4a,	/* -0.866026 */
  0xbfe883716e6fd781,	/* -0.766045 */
  0xbfe491b9cd1b5d56,	/* -0.642789 */
  0xbfe000021d0ca30d,	/* -0.500001 */
  0xbfd5e3ad0a69caf7,	/* -0.342021 */
  0xbfc63a23c48863dd
];
end