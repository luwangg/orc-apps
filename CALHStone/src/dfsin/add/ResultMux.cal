/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package dfsin.add;

actor ResultMux() uint(size = 64) Pack_Result_Add, 
				  uint Prop_Flag_Add,
				  uint Round_Flag_Add,
				  uint Round_Add,
				  uint(size = 64) Nan_Result_Add, 
				  uint(size = 64) A_Result_Add,
				  uint(size = 64) Nan_Result_Sub,
				  uint Prop_Flag_Sub, 
				  uint(size = 64) Pack_Result_Sub,
				  uint Round_Sub,
				  uint Round_Flag_Sub, 
				  uint(size = 64) A_Result_Sub, 
				  uint Sub_Flag 
				  	==> 
				  		int Ready,
				  		uint(size = 64) Result_Out, 
				  		uint Flag :

	flag.add1: action Prop_Flag_Add:[f] ==> Flag:[f]
	end

	flag.add2: action Round_Flag_Add:[f] ==> Flag:[f]
	end
		
	flag.sub1: action Prop_Flag_Sub:[rf], Sub_Flag:[sf] ==> Flag:[f]
	var
		uint f := 0
	do
		f := rf | sf;
	end

	flag.sub2: action Round_Flag_Sub:[pf], Sub_Flag:[sf] ==> Flag:[f]
	var
		uint f := 0
	do
		f := pf | sf;
	end
	
	pack.add: action Pack_Result_Add:[pr], Round_Add:[r] ==> Result_Out:[r_out], Ready:[1]
	var
		uint(size = 64) r_out
	do
		r_out := pr - r;
	end	

	pack.sub: action Pack_Result_Sub:[pr], Round_Sub:[r] ==> Result_Out:[r_out], Ready:[1]
	var
		uint(size = 64) r_out
	do
		r_out := pr - r;
	end
		
	nan.add: action Nan_Result_Add:[nr_a] ==> Result_Out:[nr_a], Ready:[1]
	end

	nan.sub: action Nan_Result_Sub:[nr_s] ==> Result_Out:[nr_s], Ready:[1]
	end
	
	a_out.add: action A_Result_Add:[ar] ==> Result_Out:[ar], Ready:[1]
	end
	
	a_out.sub: action A_Result_Sub:[ar], Sub_Flag:[f] ==> Result_Out:[ar], Ready:[1], Flag:[f]
	end
end