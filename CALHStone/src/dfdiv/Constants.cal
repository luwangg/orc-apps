/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package dfdiv;

unit Constants :
/*----------------------------------------------------------------------------
| The pattern for a default generated double-precision NaN.
*----------------------------------------------------------------------------*/
	uint(size = 64) float64_default_nan = 0x7FFFFFFFFFFFFFFF;

/*----------------------------------------------------------------------------
| Underflow tininess-detection mode, statically initialized to default value.
*----------------------------------------------------------------------------*/
	uint float_detect_tininess = float_tininess_before_rounding;

/*----------------------------------------------------------------------------
| Software IEC/IEEE floating-point underflow tininess-detection mode.
*----------------------------------------------------------------------------*/
	uint float_tininess_after_rounding  = 0;
	uint float_tininess_before_rounding = 1;

/*----------------------------------------------------------------------------
| Floating-point rounding mode, extended double-precision rounding precision,
| and exception flags.
*----------------------------------------------------------------------------*/
	uint float_rounding_mode = float_round_nearest_even;
	uint float_exception_flags = 0;

/*----------------------------------------------------------------------------
| Software IEC/IEEE floating-point rounding mode.
*----------------------------------------------------------------------------*/
	uint float_round_nearest_even = 0;
	uint float_round_to_zero      = 1;
	uint float_round_up 		  = 2;
	uint float_round_down 		  = 3;

/*----------------------------------------------------------------------------
| Software IEC/IEEE floating-point exception flags.
*----------------------------------------------------------------------------*/
	uint float_flag_inexact   =  1;
	uint float_flag_divbyzero =  2;
	uint float_flag_underflow =  4;
	uint float_flag_overflow  =  8;
	uint float_flag_invalid   = 16;

	uint countLeadingZerosHigh[256] = [
    8, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  ];
  
/*
+--------------------------------------------------------------------------+
| * Test Vectors (added for CHStone)                                       |
|     a_input, b_input : input data                                        |
|     z_output : expected output data                                      |
+--------------------------------------------------------------------------+
*/
	int N = 22;

uint(size = 64) a_input[N] = [
  0x7FFF000000000000,	/* nan */
  0x7FF0000000000000,	/* inf */
  0x7FF0000000000000,	/* inf */
  0x7FF0000000000000,	/* inf */
  0x3FF0000000000000,	/* 1.0 */
  0x3FF0000000000000,	/* 1.0 */
  0x0000000000000000,	/* 0.0 */
  0x3FF0000000000000,	/* 1.0 */
  0x0000000000000000,	/* 0.0 */
  0x8000000000000000,	/* -0.0 */
  0x4008000000000000,	/* 3.0 */
  0xC008000000000000,	/* -3.0 */
  0x4008000000000000,	/* 3.0 */
  0xC008000000000000,	/* -3.0 */
  0x4000000000000000,	/* 2.0 */
  0xC000000000000000,	/* -2.0 */
  0x4000000000000000,	/* 2.0 */
  0xC000000000000000,	/* -2.0 */
  0x3FF0000000000000,	/* 1.0 */
  0xBFF0000000000000,	/* -1.0 */
  0x3FF0000000000000,	/* 1.0 */
  0xBFF0000000000000	/* -1.0 */
];

uint(size = 64) b_input[N] = [
  0x3FF0000000000000,	/* 1.0 */
  0x7FF8000000000000,	/* nan */
  0x7FF0000000000000,	/* inf */
  0x3FF0000000000000,	/* 1.0 */
  0x7FF8000000000000,	/* nan */
  0x7FF0000000000000,	/* inf */
  0x0000000000000000,	/* 0.0 */
  0x0000000000000000,	/* 0.0 */
  0x3FF0000000000000,	/* 1.0 */
  0x3FF0000000000000,	/* 1.0 */
  0x4000000000000000,	/* 2.0 */
  0x4000000000000000,	/* 2.0 */
  0xC000000000000000,	/* 2.0 */
  0xC000000000000000,	/* -2.0 */
  0x4010000000000000,	/* 4.0 */
  0x4010000000000000,	/* 4.0 */
  0xC010000000000000,	/* -4.0 */
  0xC010000000000000,	/* -4.0 */
  0x3FF8000000000000,	/* 1.5 */
  0x3FF8000000000000,	/* 1.5 */
  0xBFF8000000000000,	/* -1.5 */
  0xBFF8000000000000	/* -1.5 */
];

uint(size = 64) z_output[N] = [
  0x7FFF000000000000,	/* nan */
  0x7FF8000000000000,	/* nan */
  0x7FFFFFFFFFFFFFFF,	/* nan */
  0x7FF0000000000000,	/* inf */
  0x7FF8000000000000,	/* nan */
  0x0000000000000000,	/* 0.0 */
  0x7FFFFFFFFFFFFFFF,	/* nan */
  0x7FF0000000000000,	/* inf */
  0x0000000000000000,	/* 0.0 */
  0x8000000000000000,	/* -0.0 */
  0x3FF8000000000000,	/* 1.5 */
  0xBFF8000000000000,	/* -1.5 */
  0xBFF8000000000000,	/* 1.5 */
  0x3FF8000000000000,	/* -1.5 */
  0x3FE0000000000000,	/* 0.5 */
  0xBFE0000000000000,	/* 5.0 */
  0xBFE0000000000000,	/* -5.0 */
  0x3FE0000000000000,	/* 0.5 */
  0x3FE5555555555555,	/* 0.666667 */
  0xBFE5555555555555,	/* -0.666667 */
  0xBFE5555555555555,	/* -0.666667 */
  0x3FE5555555555555	/* 0.666667 */
];
end