/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package dfdiv;

actor ResultMux() uint(size = 64) Pack_Result, 
				  uint Prop_Flag,
				  uint Round_Flag,
				  uint Round,
				  uint(size = 64) Nan_Result, 
				  uint(size = 64) A_Result,
				  uint Div_Flag 
				  	==> 
				  		int Ready,
				  		uint(size = 64) Result_Out, 
				  		uint Flag :
	
	flag.prop: action Prop_Flag:[pf], Div_Flag:[df] ==> Flag:[f]
	var
		uint f
	do
		f := pf | df;
	end

	flag.round: action Round_Flag:[rf], Div_Flag:[df] ==> Flag:[f]
	var
		uint f
	do
		f := rf | df;
	end
		
	pack.add: action Pack_Result:[pr], Round:[r] ==> Result_Out:[r_out], Ready:[1]
	var
		uint(size = 64) r_out
	do
		r_out := pr - r;
	end	
		
	nan.add: action Nan_Result:[nr_a] ==> Result_Out:[nr_a], Ready:[1]
	end

	a_out.add: action A_Result:[ar], Div_Flag:[f] ==> Result_Out:[ar], Ready:[1], Flag:[f]
	end	
end