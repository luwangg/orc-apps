/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
package dfdiv;

import dfdiv.Constants.*;

actor PropagateFloat64NaN() uint(size = 64) A, uint(size = 64) B ==> uint(size = 64) Z, uint Flag_Invalid :
	function float64_is_nan(uint(size = 64) a) --> bool :
		0xFFE0000000000000 < ((a & ~(1 << 63)) << 1)
	end
	
	function float64_is_signaling_nan(int(size = 64) a) --> bool :
		(((a >> 51) & 0xFFF) = 0xFFE) && ((a & 0x0007FFFFFFFFFFFF) != 0)
	end
	
	action A:[a], B:[b] ==> Z:[z], Flag_Invalid:[flag]
	var
		//bool aIsNaN, 
		bool aIsSignalingNaN, 
		bool bIsNaN, 
		bool bIsSignalingNaN,
		uint(size = 64) z,
		uint flag := 0
	do
		aIsSignalingNaN := float64_is_signaling_nan (a);
		bIsNaN := float64_is_nan (b);
		bIsSignalingNaN := float64_is_signaling_nan (b);
		a := a | 0x0008000000000000;
		b := b | 0x0008000000000000;
		if bIsSignalingNaN then
			flag := float_flag_invalid;
			println("hey");
			z := b;
		else 
			if aIsSignalingNaN then
				flag := float_flag_invalid;
				println("whao");
				z := a;
			else 
				if bIsNaN then
					z := b;
				else
					z := a;
				end
			end
		end
	end
end