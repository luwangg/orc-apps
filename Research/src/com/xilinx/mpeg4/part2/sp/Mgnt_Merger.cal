// Mgnt_Merger420
//
// Author Endri Bezati
package com.xilinx.mpeg4.part2.sp;
import org.sc29.wg11.mpeg4.part2.Constants.*;

actor Mgnt_Merger() int(size=9) YUV_i ==> uint(size=8) YUV :

int(size=PIX_SZ) out56[56];


	ReadAndSentY: action YUV_i:[y] ==> YUV:[y]
	do
		Counter := Counter + 1;
	end

	StopReadAndSent: action ==>
	guard
		Counter = 8
	do
		Counter := 0;
	end
	
	ReadAndSaveY: action YUV_i:[y] ==>
	do
		out56[Counter] := y;
		Counter := Counter + 1;
	end
	
	StopReadAndSave: action ==>
	guard
		Counter = 56
	do
		Counter := 0;
	end
	
	SentSaved: action ==> YUV:[out]
	var
		int(size=PIX_SZ) out
	do
		out := out56[8*stopLines + Counter];
		Counter := Counter + 1;
	end
	
	
	int stopLines:= 0;
	
	StopSavedAndReadAndSave: action ==>
	guard
		stopLines = 7
	do
		stopLines := 0;
	end
	
	nextLine : action ==>
	do
		stopLines := stopLines + 1;
	end
	

	int Counter :=0;

	stop : action ==>
	guard
		Counter = 64
	do
		Counter := 0;
	end

	// Select the U blocks 
	Read_U: action YUV_i:[ u ] ==> YUV:[ u ]
	do
		Counter := Counter + 1;
	end

	// Select the V blocks 
	Read_V: action YUV_i:[ v ]==> YUV:[ v ]
	do
		Counter := Counter + 1;
	end

	schedule fsm Y0 :
		//Y ( Read_Y ) --> U;
		
		Y0	(ReadAndSentY) --> Y0;
		Y0	(StopReadAndSent) --> Y1;
		
		Y1	(ReadAndSaveY)	--> Y1;
		Y1	(StopReadAndSave)	--> Y2;
		
		Y2	(ReadAndSentY) --> Y2;
		Y2	(StopReadAndSent) --> Y31;
		
		Y31	(SentSaved)	--> Y31;
		Y31	(StopReadAndSent)	--> Y32;
		
		Y32 (ReadAndSentY)	--> Y32;
		Y32	(StopReadAndSent)	--> Y33;
		
		Y33 (nextLine)	--> Y31;
		
		Y31 (StopSavedAndReadAndSave) --> Y00;
		
		Y00	(ReadAndSentY) --> Y00;
		Y00	(StopReadAndSent) --> Y11;
		
		Y11	(ReadAndSaveY)	--> Y11;
		Y11	(StopReadAndSave)	--> Y22;
		
		Y22	(ReadAndSentY) --> Y22;
		Y22	(StopReadAndSent) --> Y331;
		
		Y331	(SentSaved)	--> Y331;
		Y331	(StopReadAndSent)	--> Y332;
		
		
		Y332 (ReadAndSentY)	--> Y332;
		Y332	(StopReadAndSent)	--> Y333;
		
		Y333 (nextLine)	--> Y331;
		
		Y331 (StopSavedAndReadAndSave) --> U;
		
		
		U ( Read_U ) --> U;
		U ( stop ) --> V;
		V ( Read_V ) --> V;
		V ( stop ) --> Y0;
	end

	priority
		stop > Read_U;
		stop > Read_V;
		StopSavedAndReadAndSave > StopReadAndSent > SentSaved;
		StopReadAndSent > ReadAndSentY;
		StopReadAndSave > ReadAndSaveY;
	end

end