package org.ietr.mpegh.part2.common;

import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import std.video.Display.*;
import std.util.Math.*;

actor MD5SplitInfo()
    uint(size=8)  Y,
    uint(size=8)  U,
    uint(size=8)  V,
    uint(size=8)  LcuSizeMax,
    uint(size=16) PictSize
    ==>
    uint(size=64) Length,
    uint(size= 8) DataOut
    :

    uint(size=8)  pictureBufferY[MAX_WIDTH * MAX_HEIGHT];
    uint(size=8)  pictureBufferU[MAX_WIDTH * MAX_HEIGHT / 4];
    uint(size=8)  pictureBufferV[MAX_WIDTH * MAX_HEIGHT / 4];
    int (size=32) pictureSizeInMb;
    int (size=32) nbBlockGot;
    //uint(size=2)  chromaComponent;
    uint(size=16) pictureWidthLuma;
    uint(size=16) cropPicWthLuma;
    uint(size=12) xIdxLuma;
    uint(size=12) yIdxLuma;
    uint(size=12) xIdxChroma;
    uint(size=32) yIdxChroma;
    uint(size=14) xMin;
    uint(size=14) xMax;
    uint(size=14) yMin;
    uint(size=14) yMax;
    
    uint(size=64) lumaSize;
    uint(size=64) chromaSize;
    uint(size=64) idx;
    uint(size=8)  lcuSizeMax;
    
    getPictureSize: action  PictSize:[picWidthInPix, picHeightInPix], LcuSizeMax:[lcuSize]
                            ==>
                            Length:[lumaSize, chromaSize, chromaSize]
    var
        uint(size=16) picWidth,
        uint(size=16) picHeight
    do  
    	lcuSizeMax := 1 << lcuSize;
    	picWidth  := (picWidthInPix  + lcuSizeMax-1)/lcuSizeMax;
    	picHeight := (picHeightInPix + lcuSizeMax-1)/lcuSizeMax;
        lumaSize          := picWidthInPix * picHeightInPix;
        chromaSize        := lumaSize >> 2;
        pictureWidthLuma  := picWidth * lcuSizeMax;
        pictureSizeInMb   := picWidth * picHeight;
        xMin := 0;
        xMax := picWidthInPix-1;
        yMin := 0;
        yMax := picHeightInPix-1;
        cropPicWthLuma  := xMax - xMin + 1;
        nbBlockGot := 0;
        xIdxLuma   := 0;
        yIdxLuma   := 0;
        xIdxChroma := 0;
        yIdxChroma := 0;
    end

    getPixValue.launch.Luma.blk16x16: action Y :[Bytes] repeat 256 ==>
    guard
        nbBlockGot < pictureSizeInMb,
        lcuSizeMax = 16
    var
        uint(size=14) xIdxMin = max(xIdxLuma, xMin),
        uint(size=14) xIdxMax = min(xIdxLuma + lcuSizeMax-1, xMax),
        uint(size=14) yIdxMin = max(yIdxLuma, yMin),
        uint(size=14) yIdxMax = min(yIdxLuma + lcuSizeMax-1, yMax)
    do

        nbBlockGot := nbBlockGot + 1;
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferY[(y-yMin)*cropPicWthLuma+x-xMin]
                    := Bytes[(y-yIdxLuma)*lcuSizeMax + x-xIdxLuma];
            end
        end
        xIdxLuma := xIdxLuma + lcuSizeMax;
    end
    
    getPixValue.launch.Luma.blk32x32: action Y :[Bytes] repeat 1024 ==>
    guard
        nbBlockGot < pictureSizeInMb,
        lcuSizeMax = 32
    var
        uint(size=14) xIdxMin = max(xIdxLuma, xMin),
        uint(size=14) xIdxMax = min(xIdxLuma + lcuSizeMax-1, xMax),
        uint(size=14) yIdxMin = max(yIdxLuma, yMin),
        uint(size=14) yIdxMax = min(yIdxLuma + lcuSizeMax-1, yMax)
    do

        nbBlockGot := nbBlockGot + 1;
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferY[(y-yMin)*cropPicWthLuma+x-xMin]
                    := Bytes[(y-yIdxLuma)*lcuSizeMax + x-xIdxLuma];
            end
        end
        xIdxLuma := xIdxLuma + lcuSizeMax;
    end

    getPixValue.launch.Luma.blk64x64: action Y :[Bytes] repeat 4096 ==>
    guard
        nbBlockGot < pictureSizeInMb,
        lcuSizeMax = 64
    var
        uint(size=14) xIdxMin = max(xIdxLuma, xMin),
        uint(size=14) xIdxMax = min(xIdxLuma + lcuSizeMax-1, xMax),
        uint(size=14) yIdxMin = max(yIdxLuma, yMin),
        uint(size=14) yIdxMax = min(yIdxLuma + lcuSizeMax-1, yMax)
    do

        nbBlockGot := nbBlockGot + 1;
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferY[(y-yMin)*cropPicWthLuma+x-xMin]
                    := Bytes[(y-yIdxLuma)*lcuSizeMax + x-xIdxLuma];
            end
        end
        xIdxLuma := xIdxLuma + lcuSizeMax;
    end

    getPixValue.launch.ChromaU.blk16x16: action U :[Bytes] repeat 64 ==>
    guard
        lcuSizeMax = 16
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (lcuSizeMax>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (lcuSizeMax>>1)-1, yMax/2)
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferU[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                    Bytes[(y-yIdxChroma)*(lcuSizeMax>>1) + x-xIdxChroma];
            end
        end
    end
    
    getPixValue.launch.ChromaU.blk32x32: action U :[Bytes] repeat 256 ==>
    guard
        lcuSizeMax = 32
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (lcuSizeMax>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (lcuSizeMax>>1)-1, yMax/2)
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferU[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                    Bytes[(y-yIdxChroma)*(lcuSizeMax>>1) + x-xIdxChroma];
            end
        end
    end
    

    getPixValue.launch.ChromaU.blk64x64: action U :[Bytes] repeat 1024 ==>
    guard
        lcuSizeMax = 64
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (lcuSizeMax>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (lcuSizeMax>>1)-1, yMax/2)
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferU[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                    Bytes[(y-yIdxChroma)*(lcuSizeMax>>1) + x-xIdxChroma];
                
            end
        end
    end
    
    getPixValue.launch.ChromaV.blk16x16: action V :[Bytes] repeat 64 ==>
    guard
        lcuSizeMax = 16
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (lcuSizeMax>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (lcuSizeMax>>1)-1, yMax/2)
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                
                pictureBufferV[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                    Bytes[(y-yIdxChroma)*(lcuSizeMax>>1) + x-xIdxChroma];
            end
        end
        xIdxChroma := xIdxChroma + (lcuSizeMax>>1);
        if xIdxLuma = pictureWidthLuma then
            xIdxLuma   := 0;
            xIdxChroma := 0;
            yIdxLuma   := yIdxLuma + lcuSizeMax;
            yIdxChroma := yIdxChroma + (lcuSizeMax>>1);
        end
    end
    
    getPixValue.launch.ChromaV.blk32x32: action V :[Bytes] repeat 256 ==>
    guard
        lcuSizeMax = 32
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (lcuSizeMax>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (lcuSizeMax>>1)-1, yMax/2)
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                
                pictureBufferV[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                    Bytes[(y-yIdxChroma)*(lcuSizeMax>>1) + x-xIdxChroma];
            end
        end
        xIdxChroma := xIdxChroma + (lcuSizeMax>>1);
        if xIdxLuma = pictureWidthLuma then
            xIdxLuma   := 0;
            xIdxChroma := 0;
            yIdxLuma   := yIdxLuma + lcuSizeMax;
            yIdxChroma := yIdxChroma + (lcuSizeMax>>1);
        end
    end
    

    getPixValue.launch.ChromaV.blk64x64: action V :[Bytes] repeat 1024 ==>
    guard
        lcuSizeMax = 64
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (lcuSizeMax>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (lcuSizeMax>>1)-1, yMax/2)
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                
                pictureBufferV[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                    Bytes[(y-yIdxChroma)*(lcuSizeMax>>1) + x-xIdxChroma];
            end
        end
        xIdxChroma := xIdxChroma + (lcuSizeMax>>1);
        if xIdxLuma = pictureWidthLuma then
            xIdxLuma   := 0;
            xIdxChroma := 0;
            yIdxLuma   := yIdxLuma + lcuSizeMax;
            yIdxChroma := yIdxChroma + (lcuSizeMax>>1);
        end

    end

    initOutputLoop: action ==>
    guard
        nbBlockGot >= pictureSizeInMb
    do
        idx := 0;
    end
    
    outputLoop.Y_loop : action ==> DataOut:[pictureBufferY[tmp]]
    guard
        idx < lumaSize
    var uint(size=64) tmp = idx
    do
        idx := idx + 1;
    end
    outputLoop.Y_endLoop : action ==>
    guard
        idx = lumaSize
    do
        idx := 0;
    end
    outputLoop.U_loop : action ==> DataOut:[pictureBufferU[tmp]]
    guard
        idx < chromaSize
    var uint(size=64) tmp = idx
    do
        idx := idx + 1;
    end
    outputLoop.U_endLoop : action ==>
    guard
        idx = chromaSize
    do
        idx := 0;
    end
    outputLoop.V_loop : action ==> DataOut:[pictureBufferV[tmp]]
    guard
        idx < chromaSize
    var uint(size=64) tmp = idx
    do
        idx := idx + 1;
    end
    outputLoop.V_endLoop : action ==>
    guard
        idx = chromaSize
    do
        idx := 0;
    end
    
    schedule fsm GetPictureSize:
        GetPictureSize  (getPictureSize            )--> GetLumaBlock;
        
        GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
        GetLumaBlock    (initOutputLoop            )--> outputLoopY;
        
        GetChroma1Block (getPixValue.launch.ChromaU )--> GetChroma2Block;
        GetChroma2Block (getPixValue.launch.ChromaV )--> GetLumaBlock;
        
        outputLoopY     (outputLoop.Y_loop         )--> outputLoopY;
        outputLoopY     (outputLoop.Y_endLoop      )--> outputLoopU;
        
        outputLoopU     (outputLoop.U_loop         )--> outputLoopU;
        outputLoopU     (outputLoop.U_endLoop      )--> outputLoopV;
        
        outputLoopV     (outputLoop.V_loop         )--> outputLoopV;
        outputLoopV     (outputLoop.V_endLoop      )--> GetPictureSize;
    end

    priority
        getPixValue > initOutputLoop;
    end
end