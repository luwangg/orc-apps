package org.ietr.mpegh.part2.common;

import std.util.Math.*;

unit SelectCuFunctions :

  // Luma >>>>
  @optimize_c(condition="defined(SSE_ENABLE)", name="copy_8_8_16_orcc")
  procedure copy_8_8_16_cal(
  	uint(size=8) SampleOut[64 * 64],
  	uint(size=8) SampleIn[16],
  	uint(size=32) offsetOut,
  	uint(size=32) offsetIn)
  begin
	  foreach int i in 0 .. 16-1
		do
		  SampleOut[offsetOut + i] := SampleIn[offsetIn + i];
		end
  end

  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_16_orcc")
  procedure add_8_16_clip_16_1x16_cal (
  	uint(size=8) predSample[1 * 16],
    int(size=9) resSample[16],
    uint(size=8) sample[16],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 16-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_16_orcc")
  procedure add_8_16_clip_16_64x64_cal (
  	uint(size=8) predSample[64 * 64],
    int(size=9) resSample[16],
    uint(size=8) sample[16],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 16-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_64_orcc")
  procedure add_8_16_clip_64_64x64_cal (
  	uint(size=8) predSample[64 * 64],
    int(size=9) resSample[64],
    uint(size=8) sample[64],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 64-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_256_orcc")
  procedure add_8_16_clip_256_64x64_cal (
  	uint(size=8) predSample[64 * 64],
    int(size=9) resSample[256],
    uint(size=8) sample[256],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 256-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_1024_orcc")
  procedure add_8_16_clip_1024_64x64_cal (
  	uint(size=8) predSample[64 * 64],
    int(size=9) resSample[1024],
    uint(size=8) sample[1024],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 1024-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  // Luma <<<<
  
  // Chroma >>>>
  
  procedure add_8_16_clip_4_1x4_cal (
  	uint(size=8) predSample[1 * 4],
    int(size=9) resSample[4],
    uint(size=8) sample[4],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 4-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  procedure add_8_16_clip_4_32x32_cal (
  	uint(size=8) predSample[32 * 32],
    int(size=9) resSample[4],
    uint(size=8) sample[4],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 4-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_8_orcc")
  procedure add_8_16_clip_8_32x32_cal (
  	uint(size=8) predSample[32 * 32],
    int(size=9) resSample[8],
    uint(size=8) sample[8],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 8-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_16_orcc")
  procedure add_8_16_clip_16_32x32_cal (
  	uint(size=8) predSample[32 * 32],
    int(size=9) resSample[16],
    uint(size=8) sample[16],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 16-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_64_orcc")
  procedure add_8_16_clip_64_32x32_cal (
  	uint(size=8) predSample[32 * 32],
    int(size=9) resSample[64],
    uint(size=8) sample[64],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 64-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  
  @optimize_c(condition="defined(SSE_ENABLE)", name="add_8_16_clip_256_orcc")
  procedure add_8_16_clip_256_32x32_cal (
  	uint(size=8) predSample[32 * 32],
    int(size=9) resSample[256],
    uint(size=8) sample[256],
    uint(size=9) offsetPred,
    uint(size=9) offsetRes,
    uint(size=9) offsetOut)
  begin
    foreach int i in 0 .. 256-1
      do
	 	sample[offsetOut + i] := clip_i32(predSample[offsetPred + i]+resSample[offsetRes + i], 0, 255);
      end
  end
  // Chroma <<<<
end