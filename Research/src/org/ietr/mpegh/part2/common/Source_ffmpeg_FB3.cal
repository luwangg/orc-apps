/*
 * Copyright (c) 2011, IRISA
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IRISA nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Herve Yvique <herve.yviquel@irisa.fr>
// Modified by Damien de Saint Jorre IETR/INSA of Rennes (France)
// Modified by Jerome Gorin IETR/INSA of Rennes (France)

package org.ietr.mpegh.part2.common;
import std.video.FFmpegUtil.*;
import  std.video.Display.*;
import  org.sc29.wg11.common.DisplayYUVFunctions.*;
//@DEBUG
actor Source_ffmpeg_FB3 () ==> uint(size=8) Om, uint(size=8) O1, uint(size=8) O2, uint(size=8) O3, uint Select:

	uint(size=8) framesBuffer[MAX_FRAME_DELAY][MAX_FRAME_SIZE];
	int  frameSize[2];
	uint ReadFrameIdx_1 := 0;
	uint ReadFrameIdx_2 := 0;
	uint ReadFrameIdx_3 := 0;
	uint ReadFrameIdx_m := 0;
	uint totalFrameSize := 0;
	uint currentFrame_1 := 0;
	uint currentFrame_2 := 0;
	uint currentFrame_3 := 0;
	uint currentFrame_m := 0;
	uint currentFrame   := 0;
	uint frameSizeList[MAX_FRAME_DELAY] := [0 : for int i in 0 .. MAX_FRAME_DELAY - 1];
	
	initialize ==>
	do
		ffmpeg_initSource();
	end
	
	readFirstFrame: action ==> Select:[0]
	do
		//println("select = 0");
		ffmpeg_readFrame(framesBuffer, frameSize, (currentFrame & (MAX_FRAME_DELAY - 1)));
		totalFrameSize := totalFrameSize + frameSize[0];
		frameSizeList[currentFrame & (MAX_FRAME_DELAY - 1)] := frameSize[0];
	end
	
	readFrame: action ==> 
	do
		ffmpeg_readFrame(framesBuffer, frameSize, (currentFrame & (MAX_FRAME_DELAY - 1)));
		totalFrameSize := totalFrameSize + frameSize[0];
		frameSizeList[currentFrame & (MAX_FRAME_DELAY - 1)] := frameSize[0];
	end
	
	@schedule_outputs
	sendData.d1: action ==> O1:[ Out ]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_1 & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_1];
		ReadFrameIdx_1 := ReadFrameIdx_1 + 1;
		if (ReadFrameIdx_1 = frameSizeList[currentFrame_1 & (MAX_FRAME_DELAY - 1)]) and (currentFrame_1 < currentFrame) then
			//current frame 1 is sent and next frame is already in the buffer
			ReadFrameIdx_1 := 0;
			currentFrame_1 := currentFrame_1 + 1;
		end
	end
	
	@schedule_outputs
	sendData.d2: action ==> O2:[ Out ]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_2 & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_2];
		ReadFrameIdx_2 := ReadFrameIdx_2 + 1;
		if (ReadFrameIdx_2 = frameSizeList[currentFrame_2 & (MAX_FRAME_DELAY - 1)]) and (currentFrame_2 < currentFrame) then
			//current frame 2 is sent and next frame is already in the buffer
			ReadFrameIdx_2 := 0;
			currentFrame_2 := currentFrame_2 + 1;
		end
	end
	
	@schedule_outputs
	sendData.d3: action ==> O3:[ Out ]
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_3 & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_3];
		ReadFrameIdx_3 := ReadFrameIdx_3 + 1;
		if (ReadFrameIdx_3 = frameSizeList[currentFrame_3 & (MAX_FRAME_DELAY - 1)]) and (currentFrame_3 < currentFrame) then
			//current frame 3 is sent and next frame is already in the buffer
			ReadFrameIdx_3 := 0;
			currentFrame_3 := currentFrame_3 + 1;
		end
	end
	
	@schedule_outputs
	sendData.m: action ==> Om:[ Out ]
	guard
		//ReadFrameIdx_m < frameSizeList[currentFrame_m & (MAX_FRAME_DELAY - 1)],
		currentFrame_m <= currentFrame
	var
		uint(size=8) Out
	do
		Out := framesBuffer[currentFrame_m & (MAX_FRAME_DELAY - 1)][ReadFrameIdx_m];
		ReadFrameIdx_m := ReadFrameIdx_m + 1;
		if ReadFrameIdx_m = frameSizeList[currentFrame_m & (MAX_FRAME_DELAY - 1)] then
			//current frame m is sent -> remain in sendData state 
			ReadFrameIdx_m := 0;
			currentFrame_m := currentFrame_m +1;
		end
	end
	
	sendDataDone.d1: action ==> Select:[0] //current frame 1 is sent and next frame is not yet put in the buffer
	guard
		ReadFrameIdx_1 = frameSizeList[currentFrame_1 & (MAX_FRAME_DELAY - 1)],
		currentFrame_1 = currentFrame
	do
		//println("select = 0");
		ReadFrameIdx_1 := 0;
		currentFrame_1 := currentFrame_1 + 1;
		currentFrame   := currentFrame + 1;
	end
	
	sendDataDone.d2: action ==> Select:[1] //current frame 2 is sent and next frame is not yet put in the buffer
	guard
		ReadFrameIdx_2 = frameSizeList[currentFrame_2 & (MAX_FRAME_DELAY - 1)],
		currentFrame_2 = currentFrame
	do
		//println("select = 1");
		ReadFrameIdx_2 := 0;
		currentFrame_2 := currentFrame_2 + 1;
		currentFrame   := currentFrame + 1;
	end
	
	sendDataDone.d3: action ==> Select:[2] //current frame 3 is sent and next frame is not yet put in the buffer
	guard
		ReadFrameIdx_3 = frameSizeList[currentFrame_3 & (MAX_FRAME_DELAY - 1)],
		currentFrame_3 = currentFrame
	do
		//println("select = 2");
		ReadFrameIdx_3 := 0;
		currentFrame_3 := currentFrame_3 + 1;
		currentFrame   := currentFrame + 1;
	end
	
	schedule fsm readFirstFrame :
		readFirstFrame	(readFirstFrame)--> sendData;
		sendData 		(sendData)  	--> sendData;
		sendData 		(sendDataDone)	--> readFrame;
		readFrame 		(readFrame)		--> sendData;
	end
	
	priority
		sendDataDone > sendData;
	end
	
end