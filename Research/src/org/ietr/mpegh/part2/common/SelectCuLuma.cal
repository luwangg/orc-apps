/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
 
/**
 * Decoding process for intra blocks.
 * 
 * 
 * @input CUInfo : Informations related to the current CU
 *        (size, address and mode : INTRA,INTER,...).
 * 
 * @input InterSample : Pixel's value from the Inter-prediction CU.
 * 
 * @input IntraSample : Pixel's value from the Intra-prediction CU.
 * 
 * @input PartMode : Giving the partitioning mode of the current CU.
 * 
 * @input ResidualSample : Residual values for the current CU.
 * 
 * 
 * @output Sample : Pixel's value before inLoop filter.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
 
package org.ietr.mpegh.part2.common;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.ietr.mpegh.part2.common.SelectCuFunctions.*;

//@DEBUG
actor SelectCuLuma()
	uint(size=8)  LcuSizeMax,
	uint(size=16) PicSize,
	uint(size=16) TilesCoord,
	uint(size=16) CUInfo,
	uint(size=8)  InterSample,
	uint(size=8)  IntraSample,
	uint(size=4)  PartMode,
	int (size=9)  ResidualSample
		==>
	uint(size=8) Sample
	,uint(size=8) VidSample
		:

	uint(size=16) PU_SIZE_TO_NB_BLK_TO_CLIP[17] =
		[0, 1, 4, 4, 16, 16, 16, 16, 64, 64, 64,
			64, 64, 64, 64, 64, 256];
	uint(size=8)  SCU_SIZE = 16;
	uint(size=4)  numPart;
	uint(size=3)  numPartDecoded;
    uint(size=8)  predSamp[64 * 64]; // + 2 * 32 * 32];
	bool          sampGot[512];
    uint(size=16) nbBlkToClip;
	uint(size=7)  cuSize[4][2];
	uint(size=5)  cuMode;
	uint(size=4)  partMode;
	uint(size=5)  cuOff[4][2] := [[0,0],[0,0],[0,0],[0,0]];
	uint(size=7)  cuWidth;
	uint(size=9)  nbBlk;
	uint(size=9)  idxBlk;
	uint(size=9)  idxBlkInterpred;
	// uint(size=8)  interSamp[16][16][SCU_SIZE];
	uint(size=7)  xIdx;
	uint(size=7)  yIdx;
	uint(size=8)  LcuBuffer[64][64];
	
	uint(size=8)  lcuSizeMax;	
	uint(size=16) picSize[2];
	uint(size=16) XIdx;
	uint(size=16) YIdx;
	uint(size=16) xAddrVert;
	uint(size=16) yAddrVert;
	uint(size=16) numPartition;
	uint(size=9)  blkIdx := 0;
	uint(size=16) pixAddr[2] := [0,0];
	
	uint(size=16) numTiles;
	uint(size=16) tileIdx;
	uint(size=16) tilesBegSamp[MAX_NUM_TILES][2];
	uint(size=16) tilesEndSamp[MAX_NUM_TILES][2];
	int(size=16) iLoop;
	uint LcuType := 0 ; // 0: LCU not in the Edge, 1: LCU vert edge, 2: LCU hor edge, 3: LCU hor&vert edge 
	
	procedure saveRasterScanCu_1x4x4(uint(size=8) sample[1*4*4])
	var
		uint(size=16) pixAddr[2]
	begin
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
//		println("pixAddr[0] = " + pixAddr[0] );
//		println("pixAddr[1] = " + pixAddr[1] );
		foreach int y in 0 .. 3
		do
			foreach int x in 0 .. 3
			do
				LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] :=
					sample[4 * y + x];
			end
		end
	end
	
	procedure saveRasterScanCu_4x4x4(uint(size=8) sample[4*4*4])
	var
		uint(size=16) pixAddr[2],
		int offset
	begin
	    offset := 0;
	    foreach int j in 0 .. 3
	    do
		  zScanToAbsCoord(blkIdx, pixAddr);
		  pixAddr[0] := pixAddr[0] + xAddrVert;
		  pixAddr[1] := pixAddr[1] + yAddrVert;
//		  println("pixAddr[0] = " + pixAddr[0] );
//		  println("pixAddr[1] = " + pixAddr[1] );
		  foreach int y in 0 .. 3
		  do
			  foreach int x in 0 .. 3
			  do
				  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] :=
					  sample[offset + 4 * y + x];
			  end
		  end
		  blkIdx := blkIdx + 1;
		  offset := offset + 16;
		end
	end
	
	procedure saveRasterScanCu_16x4x4(uint(size=8) sample[16*4*4])
	var
		uint(size=16) pixAddr[2],
		int offset
	begin
	    offset := 0;
	    foreach int j in 0 .. 15
	    do
		  zScanToAbsCoord(blkIdx, pixAddr);
		  pixAddr[0] := pixAddr[0] + xAddrVert;
		  pixAddr[1] := pixAddr[1] + yAddrVert;
//		  println("pixAddr[0] = " + pixAddr[0] );
//		  println("pixAddr[1] = " + pixAddr[1] );
		  foreach int y in 0 .. 3
		  do
			  foreach int x in 0 .. 3
			  do
				  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] :=
					  sample[offset + 4 * y + x];
			  end
		  end
		  blkIdx := blkIdx + 1;
		  offset := offset + 16;
		end
	end
	
	procedure saveRasterScanCu_64x4x4(uint(size=8) sample[64*4*4])
	var
		uint(size=16) pixAddr[2],
		int offset
	begin
	    offset := 0;
	    foreach int j in 0 .. 63
	    do
		  zScanToAbsCoord(blkIdx, pixAddr);
		  pixAddr[0] := pixAddr[0] + xAddrVert;
		  pixAddr[1] := pixAddr[1] + yAddrVert;
//		  println("pixAddr[0] = " + pixAddr[0] );
//		  println("pixAddr[1] = " + pixAddr[1] );
		  foreach int y in 0 .. 3
		  do
			  foreach int x in 0 .. 3
			  do
				  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] :=
					  sample[offset + 4 * y + x];
			  end
		  end
		  blkIdx := blkIdx + 1;
		  offset := offset + 16;
		end
	end
	
	procedure storeLCU_1x4x4(uint(size=8) sample[1*4*4])
	begin
		if LcuType = 0 then
        	// no Hor no Vert
		 	saveRasterScanCu_1x4x4(sample);	
			blkIdx := blkIdx + 1;   
		
		elsif LcuType = 1 then
			// vert
			
			// store
			if (XIdx + pixAddr[0]) < picSize[0] then
//				println("pixAddrVERT[0] = " + pixAddr[0] + "  pixAddrVERT[1] = " + pixAddr[1]);
	        	foreach int y in 0 .. 3
				do
					foreach int x in 0 .. 3
					do
						LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[4*y+x];
					end
				end
				blkIdx := blkIdx + 1;
				zScanToAbsCoord(blkIdx, pixAddr);
				pixAddr[0] := pixAddr[0] + xAddrVert;
				pixAddr[1] := pixAddr[1] + yAddrVert;
			end
			
			// bypass 
			while ((XIdx + pixAddr[0]) >= picSize[0]) && (blkIdx < numPartition) do
//				println("pixAddr[0]bypassVERT = " + pixAddr[0] + "  pixAddr[1]bypassVERT = " + pixAddr[1]);
				blkIdx := blkIdx + 1;
				zScanToAbsCoord(blkIdx, pixAddr);
				pixAddr[0] := pixAddr[0] + xAddrVert;
				pixAddr[1] := pixAddr[1] + yAddrVert;
//				println("blkIdxVERT = " + blkIdx);
			end
		elsif LcuType = 2 then
        	// Hor
			
			// store
			if (YIdx + pixAddr[1]) < picSize[1]   then
//				println("pixAddrHOR[0] = " + pixAddr[0] + "  pixAddrHOR[1] = " + pixAddr[1]);
	        	foreach int y in 0 .. 3
				do
					foreach int x in 0 .. 3
					do
						LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[4*y+x];
					end
				end
				blkIdx := blkIdx + 1;
				zScanToAbsCoord(blkIdx, pixAddr);
				pixAddr[0] := pixAddr[0] + xAddrVert;
				pixAddr[1] := pixAddr[1] + yAddrVert;
			end
			
			// bypass 
			while ((YIdx + pixAddr[1]) >= picSize[1]) && (blkIdx < numPartition) do
//				println("pixAddr[0]bypassHOR = " + pixAddr[0] + "  pixAddr[1]bypassHOR = " + pixAddr[1]);
				blkIdx := blkIdx + 1;
				zScanToAbsCoord(blkIdx, pixAddr);
				pixAddr[0] := pixAddr[0] + xAddrVert;
				pixAddr[1] := pixAddr[1] + yAddrVert;
//				println("blkIdxHOR = " + blkIdx);
			end
        else //if (XIdx >= picSize[0]-lcuSizeMax) && (YIdx >= (picSize[1]-lcuSizeMax)) then
			// vertHor
			
			// store
			if ((XIdx + pixAddr[0]) < picSize[0]) && ((YIdx + pixAddr[1]) < picSize[1]) then
//				println("pixAddrHORVERT[0] = " + pixAddr[0] + "  pixAddrHORVERT[1] = " + pixAddr[1]);
	        	foreach int y in 0 .. 3
				do
					foreach int x in 0 .. 3
					do
						LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[4*y+x];
					end
				end
				blkIdx := blkIdx + 1;
				zScanToAbsCoord(blkIdx, pixAddr);
				pixAddr[0] := pixAddr[0] + xAddrVert;
				pixAddr[1] := pixAddr[1] + yAddrVert;
			end
			
			// bypass 
			while (((XIdx + pixAddr[0]) >= picSize[0]) || ((YIdx + pixAddr[1]) >= picSize[1])) && (blkIdx < numPartition) do
//				println("pixAddr[0]bypassHORVERT = " + pixAddr[0] + "  pixAddr[1]bypassHORVERT = " + pixAddr[1]);
				blkIdx := blkIdx + 1;
				zScanToAbsCoord(blkIdx, pixAddr);
				pixAddr[0] := pixAddr[0] + xAddrVert;
				pixAddr[1] := pixAddr[1] + yAddrVert;
//				println("blkIdxHORVERT = " + blkIdx);
			end  	
        end
	end
	
	procedure storeLCU_4x4x4(uint(size=8) sample[4*4*4])
	var
	  int offset
	begin
		if LcuType = 0 then
          // no Hor no Vert
		  saveRasterScanCu_4x4x4(sample);
		
		elsif LcuType = 1 then
		  // vert
			  
		  offset := 0;
	      foreach int j in 0 .. 3
	      do
			  // store
			  if (XIdx + pixAddr[0]) < picSize[0] then
//				  println("pixAddrVERT[0] = " + pixAddr[0] + "  pixAddrVERT[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
				  	  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
			  end
			
			  // bypass 
			  while ((XIdx + pixAddr[0]) >= picSize[0]) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassVERT = " + pixAddr[0] + "  pixAddr[1]bypassVERT = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxVERT = " + blkIdx);
			  end
			  offset := offset + 16;
			end
		  elsif LcuType = 2 then
        	  // Hor
        	  offset := 0;
	          foreach int j in 0 .. 3
	          do
			
			  // store
			  if (YIdx + pixAddr[1]) < picSize[1]   then
//				  println("pixAddrHOR[0] = " + pixAddr[0] + "  pixAddrHOR[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
					  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
			  end
			
			  // bypass 
			  while ((YIdx + pixAddr[1]) >= picSize[1]) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHOR = " + pixAddr[0] + "  pixAddr[1]bypassHOR = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHOR = " + blkIdx);
			  end
			  offset := offset + 16;
			end
          else //if (XIdx >= picSize[0]-lcuSizeMax) && (YIdx >= (picSize[1]-lcuSizeMax)) then
			  // vertHor
			  offset := 0;
	          foreach int j in 0 .. 3
	          do
			
			  // store
			  if ((XIdx + pixAddr[0]) < picSize[0]) && ((YIdx + pixAddr[1]) < picSize[1]) then
//				  println("pixAddrHORVERT[0] = " + pixAddr[0] + "  pixAddrHORVERT[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
					  	  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
					  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
	   		  end
			
			  // bypass 
			  while (((XIdx + pixAddr[0]) >= picSize[0]) || ((YIdx + pixAddr[1]) >= picSize[1])) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHORVERT = " + pixAddr[0] + "  pixAddr[1]bypassHORVERT = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHORVERT = " + blkIdx);
			  end
			  offset := offset + 16;  	
           end
        end
	end
	
	procedure storeLCU_16x4x4(uint(size=8) sample[16*4*4])
	var
	  int offset
	begin
		if LcuType = 0 then
          // no Hor no Vert
		  saveRasterScanCu_16x4x4(sample);   
		
		elsif LcuType = 1 then
		  // vert
			  
		  offset := 0;
	      foreach int j in 0 .. 15
	      do
			  // store
			  if (XIdx + pixAddr[0]) < picSize[0] then
//				  println("pixAddrVERT[0] = " + pixAddr[0] + "  pixAddrVERT[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
				  	  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
			  end
			
			  // bypass 
			  while ((XIdx + pixAddr[0]) >= picSize[0]) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassVERT = " + pixAddr[0] + "  pixAddr[1]bypassVERT = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxVERT = " + blkIdx);
			  end
			  offset := offset + 16;
			end
		  elsif LcuType = 2 then
        	  // Hor
        	  offset := 0;
	          foreach int j in 0 .. 15
	          do
			
			  // store
			  if (YIdx + pixAddr[1]) < picSize[1]   then
//				  println("pixAddrHOR[0] = " + pixAddr[0] + "  pixAddrHOR[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
					  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
			  end
			
			  // bypass 
			  while ((YIdx + pixAddr[1]) >= picSize[1]) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHOR = " + pixAddr[0] + "  pixAddr[1]bypassHOR = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHOR = " + blkIdx);
			  end
			  offset := offset + 16;
			end
          else //if (XIdx >= picSize[0]-lcuSizeMax) && (YIdx >= (picSize[1]-lcuSizeMax)) then
			  // vertHor
			  offset := 0;
	          foreach int j in 0 .. 15
	          do
			
			  // store
			  if ((XIdx + pixAddr[0]) < picSize[0]) && ((YIdx + pixAddr[1]) < picSize[1]) then
//				  println("pixAddrHORVERT[0] = " + pixAddr[0] + "  pixAddrHORVERT[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
					  	  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
					  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
	   		  end
			
			  // bypass 
			  while (((XIdx + pixAddr[0]) >= picSize[0]) || ((YIdx + pixAddr[1]) >= picSize[1])) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHORVERT = " + pixAddr[0] + "  pixAddr[1]bypassHORVERT = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHORVERT = " + blkIdx);
			  end
			  offset := offset + 16;  	
           end
        end
	end
	
	procedure storeLCU_64x4x4(uint(size=8) sample[64*4*4])
	var
	  int offset
	begin
		if LcuType = 0 then
          // no Hor no Vert
		  saveRasterScanCu_64x4x4(sample);   
		
		elsif LcuType = 1 then
		  // vert
			  
		  offset := 0;
	      foreach int j in 0 .. 63
	      do
			  // store
			  if (XIdx + pixAddr[0]) < picSize[0] then
//				  println("pixAddrVERT[0] = " + pixAddr[0] + "  pixAddrVERT[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
				  	  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
			  end
			
			  // bypass 
			  while ((XIdx + pixAddr[0]) >= picSize[0]) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassVERT = " + pixAddr[0] + "  pixAddr[1]bypassVERT = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxVERT = " + blkIdx);
			  end
			  offset := offset + 16;
			end
		  elsif LcuType = 2 then
        	  // Hor
        	  offset := 0;
	          foreach int j in 0 .. 63
	          do
			
			  // store
			  if (YIdx + pixAddr[1]) < picSize[1]   then
//				  println("pixAddrHOR[0] = " + pixAddr[0] + "  pixAddrHOR[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
					  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
			  end
			
			  // bypass 
			  while ((YIdx + pixAddr[1]) >= picSize[1]) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHOR = " + pixAddr[0] + "  pixAddr[1]bypassHOR = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHOR = " + blkIdx);
			  end
			  offset := offset + 16;
			end
          else //if (XIdx >= picSize[0]-lcuSizeMax) && (YIdx >= (picSize[1]-lcuSizeMax)) then
			  // vertHor
			  offset := 0;
	          foreach int j in 0 .. 63
	          do
			
			  // store
			  if ((XIdx + pixAddr[0]) < picSize[0]) && ((YIdx + pixAddr[1]) < picSize[1]) then
//				  println("pixAddrHORVERT[0] = " + pixAddr[0] + "  pixAddrHORVERT[1] = " + pixAddr[1]);
	        	  foreach int y in 0 .. 3
				  do
					  foreach int x in 0 .. 3
					  do
					  	  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
					  end
				  end
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
	   		  end
			
			  // bypass 
			  while (((XIdx + pixAddr[0]) >= picSize[0]) || ((YIdx + pixAddr[1]) >= picSize[1])) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHORVERT = " + pixAddr[0] + "  pixAddr[1]bypassHORVERT = " + pixAddr[1]);
				  blkIdx := blkIdx + 1;
				  zScanToAbsCoord(blkIdx, pixAddr);
				  pixAddr[0] := pixAddr[0] + xAddrVert;
				  pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHORVERT = " + blkIdx);
			  end
			  offset := offset + 16;  	
           end
        end
	end
	
	procedure computeNextLcuAddr()
	begin
		XIdx := XIdx + lcuSizeMax;
		if(XIdx >= tilesEndSamp[tileIdx][0]) then
			XIdx := tilesBegSamp[tileIdx][0];
			YIdx := YIdx + lcuSizeMax;
			if(YIdx >= tilesEndSamp[tileIdx][1]) then
				tileIdx := tileIdx + 1;
				XIdx := tilesBegSamp[tileIdx][0];
				YIdx := tilesBegSamp[tileIdx][1];
			end
		end
		
		if (XIdx < picSize[0]-lcuSizeMax) && (YIdx < (picSize[1]-lcuSizeMax)) then
		 	LcuType := 0;
		elsif (XIdx >= picSize[0]-lcuSizeMax) && (not (YIdx >= (picSize[1]-lcuSizeMax))) then
			LcuType := 1;
		elsif (YIdx >= (picSize[1]-lcuSizeMax)) && (not (XIdx >= picSize[0]-lcuSizeMax)) then
			LcuType := 2;
		else
			LcuType := 3;
		end
	end
	
	initialize ==>
	do
		sampGot := [false: for int i in 0 .. 511];
	end
	
	isNewSlc_dep: action PartMode:[partModeVal] ==>
	guard
		partModeVal = PART_MODE_SLICE_DEP
	end
	
	isNewSlc_indep: action PartMode:[partModeVal], PicSize:[picWidthInPix,
	picHeightInPix], LcuSizeMax:[log2_lcuSz] ==>
	guard
		partModeVal = PART_MODE_SLICE_INDEP
	end
	
	isNewPict: action PartMode:[partModeVal], LcuSizeMax:[log2_lcuSz], 
					   PicSize:[picWidthInPix, picHeightInPix] ==>
	guard
		partModeVal = PART_MODE_PICT
	do
		lcuSizeMax := 1 << log2_lcuSz;
		numPartition := (lcuSizeMax * lcuSizeMax) / 16;
		
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		tileIdx := 0;
		XIdx := 0;
		YIdx := 0;
		blkIdx := 0;
	end

	getPartMode: action PartMode:[partModeVal] ==>
	guard
		partModeVal != PART_MODE_SLICE_DEP && partModeVal != PART_MODE_SLICE_INDEP &&
		partModeVal != PART_MODE_PICT
	do
		partMode := partModeVal;
		numPart := partModeToNumPart[partModeVal];
		numPartDecoded := 0;
	end

	/* Getting informations of the next CU. */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart && numPart != 2
	do
		cuMode  := cuInfo[0];
		cuWidth := cuInfo[3];
        nbBlkToClip := PU_SIZE_TO_NB_BLK_TO_CLIP[cuWidth >> 2];
		nbBlk   := nbBlkToClip;
		// nbBlk   := cuWidth*cuWidth/16;
		idxBlk  := 0;
		cuSize := [[cuInfo[i]/4:for int i in 3 .. 4]:for int j in 0 .. 3];
		cuOff[0] := [0:for int i in 0 .. 1];	
	end

	/* Getting informations of the next CU when there are two part.
	 * Get twice informations in order to have all the informations concerning
	 * this CU.
	 */
	getCuInfo.launch.numPart2: action CUInfo:[cuInfo] repeat 10 ==>
	guard
		numPartDecoded < numPart && numPart = 2
	do
		cuMode := cuInfo[0];
		cuSize  := [[cuInfo[i+5*j]/4:for uint i in 3 .. 4]:
			for uint j in 0 .. 1];
		cuWidth := max(cuInfo[3], cuInfo[4]);
		nbBlk   := cuWidth*cuWidth/16;
		idxBlk  := 0;
		nbBlkToClip := PU_SIZE_TO_NB_BLK_TO_CLIP[min(cuInfo[3], cuInfo[4]) >> 2];
		if(partMode=PART_2NxN || partMode=PART_2NxnU ||
			partMode=PART_2NxnD) then
			cuOff[1][0] := 0;
			cuOff[1][1] := cuInfo[4]/4;
		else
			cuOff[1][0] := cuInfo[3]/4;
			cuOff[1][1] := 0;
		end
		numPartDecoded := 0;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	/** Checking type of prediction.  **/
	getCuMode.isIntra: action ==>
	guard
		cuMode = INTRA
	do
		numPartDecoded := numPartDecoded + 1;
	end

	getCuMode.isInter: action ==>
	guard
		cuMode = INTER || cuMode = SKIP
	do
		xIdx := 0;
		yIdx := 0;
		idxBlkInterpred := 0;
	end

	getCuMode.isOther: action ==>
	guard
		cuMode = OTHER
	do
		numPartDecoded := numPartDecoded + 1;
	end

	/* Getting samples from intraPrediction */
	getCuSample.isIntra: action IntraSample:[intraSample] repeat SCU_SIZE,
		ResidualSample:[resSample] repeat SCU_SIZE
		==> Sample:[sample] repeat SCU_SIZE
	guard
		blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE]
	do
		/* Reordering the sample is not needed because both (Residual and
		 * prediction parts) sample are in the rasterScan order
		 */
		add_8_16_clip_16_1x16_cal (
		  intraSample,
          resSample,
          sample,
          0,
          0,
          0);
        idxBlk := idxBlk + 1;
        storeLCU_1x4x4(sample);
	end
	
	endLCU.x64 : action ==> VidSample:[vidSamp] repeat 4096
	guard
		blkIdx = numPartition, lcuSizeMax = 64
	var
		uint(size=8) vidSamp[64 * 64]
	do
//		println("line Done");
		blkIdx := 0;
    	xAddrVert := 0;
		yAddrVert := 0;
		pixAddr[0] := 0;
		pixAddr[1] := 0;
				
		computeNextLcuAddr();
		
		foreach int y in 0 .. 63
		do			
			foreach int x in 0 .. 63
			do
				vidSamp[y * 64 + x] := LcuBuffer[y][x];
			end
		end
	end
	
	endLCU.x32 : action ==> VidSample:[vidSamp] repeat 1024
	guard
		blkIdx = numPartition, lcuSizeMax = 32
	var
		uint(size=8) vidSamp[32 * 32]
	do
//		println("line Done");
		blkIdx := 0;
    	xAddrVert := 0;
		yAddrVert := 0;
		pixAddr[0] := 0;
		pixAddr[1] := 0;
				
		computeNextLcuAddr();
		
		foreach int y in 0 .. 31
		do			
			foreach int x in 0 .. 31
			do
				vidSamp[y * 32 + x] := LcuBuffer[y][x];
			end
		end
	end
	
	endLCU.x16 : action ==> VidSample:[vidSamp] repeat 256
	guard
		blkIdx = numPartition, lcuSizeMax = 16
	var
		uint(size=8) vidSamp[16 * 16]
	do
//		println("line Done");
		blkIdx := 0;
    	xAddrVert := 0;
		yAddrVert := 0;
		pixAddr[0] := 0;
		pixAddr[1] := 0;
				
		computeNextLcuAddr();
		
		foreach int y in 0 .. 15
		do			
			foreach int x in 0 .. 15
			do
				vidSamp[y * 16 + x] := LcuBuffer[y][x];
			end
		end
	end
	
	/* Getting prediction samples from interPrediction */
	getCuSample.isInter: action InterSample:[interSample] repeat SCU_SIZE ==>
	guard
		idxBlkInterpred < nbBlk
	var
		uint(size=16) blkAddr[2],
		/* Offset is not null when numPart = 2 and partIdx = 1. */
		uint xOff = cuOff[numPartDecoded][0],
		uint yOff = cuOff[numPartDecoded][1],
		uint blkIdx
	do
        blkAddr := [xIdx+xOff, yIdx+yOff];
		blkIdx := absCoordInBlkToZScan(blkAddr);
        copy_8_8_16_cal(
          predSamp,
  	      interSample,
  	      SCU_SIZE*blkIdx,
  	      0);
  	    sampGot[blkIdx] := true;
		/* Computing the location of the next block (it's sent in ZScan order instead of RasterScan. */
		xIdx := xIdx + 1;
		if(xIdx = cuSize[numPartDecoded][0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
			if(yIdx = cuSize[numPartDecoded][1]) then
				yIdx := 0;
				numPartDecoded := numPartDecoded + 1;
			end
		end

		idxBlkInterpred := idxBlkInterpred + 1;
	end

	chekNbBlkToClip.is1: action ==>
	guard
		nbBlkToClip = 1
	end

	chekNbBlkToClip.is4: action ==>
	guard
		nbBlkToClip = 4
	end

	chekNbBlkToClip.is16: action ==>
	guard
		nbBlkToClip = 16
	end

	chekNbBlkToClip.is64: action ==>
	guard
		nbBlkToClip = 64
	end

	chekNbBlkToClip.is256: action ==>
	guard
		nbBlkToClip = 256
	end

	/* Getting the residual part for interPrediction then computing the
	 * result.
	 */
	getInterRes.get1Blk: action ResidualSample:[resSample] repeat SCU_SIZE
		==> Sample:[sample] repeat SCU_SIZE
	guard
		// idxBlk < nbBlk
        sampGot[idxBlk],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE]
	do
        add_8_16_clip_16_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
		idxBlk := idxBlk + 1;

		storeLCU_1x4x4(sample);
	end

    /* Getting the residual part for interPrediction then computing the
	 * result.
	 */
    getInterRes.get4Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 4
		==> Sample:[sample] repeat SCU_SIZE * 4
	guard
        sampGot[idxBlk + 3],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE * 4]
	do
		add_8_16_clip_64_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
          
		idxBlk := idxBlk + 4;
		
		storeLCU_4x4x4(sample);
	end

    /* Getting the residual part for interPrediction then computing the
	 * result.
	 */
    getInterRes.get16Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 16
		==> Sample:[sample] repeat SCU_SIZE * 16
	guard
        sampGot[idxBlk + 15],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE * 16]
	do
		add_8_16_clip_256_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
		idxBlk := idxBlk + 16;
		
		storeLCU_16x4x4(sample);
	end

    /* Getting the residual part for interPrediction then computing the
	 * result.
	 */
    getInterRes.get64Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 64
		==> Sample:[sample] repeat SCU_SIZE * 64
	guard
        sampGot[idxBlk + 63],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE * 64]
	do
		add_8_16_clip_1024_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
		idxBlk := idxBlk + 64;
		
		storeLCU_64x4x4(sample);
	end

	getCuSample.done: action ==>
	guard
		idxBlk = nbBlk
	do
		idxBlk := 0;
		foreach int i in 0 .. nbBlk - 1
		do
			sampGot[i] := false;
		end
	end
	
	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBegSamp[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEndSamp[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	schedule fsm GetPartMode:
		GetPartMode (isNewPict        )--> GetNumTiles;
		GetPartMode (isNewSlc_dep     )--> GetCuInfo;
		GetPartMode (isNewSlc_indep   )--> GetNumTiles;
		GetPartMode (getPartMode      )--> GetCuInfo;
		
		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetPartMode;
		

		GetCuInfo   (getCuInfo.launch )--> GetCuMode;
		GetCuInfo   (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isIntra )--> GetCuSampleIntra;
		GetCuMode (getCuMode.isInter )--> CheckNbBlkToClip;
		GetCuMode (getCuMode.isOther )--> GetCuInfo;

		GetCuSampleIntra (getCuSample.isIntra )--> GetCuSampleIntra;
		GetCuSampleIntra (getCuSample.done    )--> GetCuInfo;
		GetCuSampleIntra (endLCU  )--> GetCuSampleIntra;
		
		CheckNbBlkToClip (chekNbBlkToClip.is1   )--> GetCuSampleInter1Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is4   )--> GetCuSampleInter4Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is16  )--> GetCuSampleInter16Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is64  )--> GetCuSampleInter64Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is256 )--> GetCuSampleInter256Blk;

		GetCuSampleInter1Blk (getCuSample.isInter )--> GetCuSampleInter1Blk;
		GetCuSampleInter1Blk (getInterRes.get1Blk )--> GetCuSampleInter1Blk;
		GetCuSampleInter1Blk (getCuSample.done    )--> GetCuInfo;
		GetCuSampleInter1Blk (endLCU  )--> GetCuSampleInter1Blk;

		GetCuSampleInter4Blk (getCuSample.isInter    )--> GetCuSampleInter4Blk;
		GetCuSampleInter4Blk (getInterRes.get4Blk )--> GetCuSampleInter4Blk;
		GetCuSampleInter4Blk (getCuSample.done       )--> GetCuInfo;
		GetCuSampleInter4Blk (endLCU  )--> GetCuSampleInter4Blk;

		GetCuSampleInter16Blk (getCuSample.isInter    )--> GetCuSampleInter16Blk;
		GetCuSampleInter16Blk (getInterRes.get16Blk )--> GetCuSampleInter16Blk;
		GetCuSampleInter16Blk (getCuSample.done       )--> GetCuInfo;
		GetCuSampleInter16Blk (endLCU  )--> GetCuSampleInter16Blk;

		GetCuSampleInter64Blk (getCuSample.isInter    )--> GetCuSampleInter64Blk;
		GetCuSampleInter64Blk (getInterRes.get64Blk )--> GetCuSampleInter64Blk;
		GetCuSampleInter64Blk (getCuSample.done       )--> GetCuInfo;
		GetCuSampleInter64Blk (endLCU  )--> GetCuSampleInter64Blk;

		GetCuSampleInter256Blk (getCuSample.isInter    )--> GetCuSampleInter256Blk;
		GetCuSampleInter256Blk (getInterRes.get64Blk )--> GetCuSampleInter256Blk;
		GetCuSampleInter256Blk (getCuSample.done       )--> GetCuInfo;
		GetCuSampleInter256Blk (endLCU  )--> GetCuSampleInter256Blk;
	end
	priority
		getCuSample.done > getCuSample.isIntra;
		getCuSample.done > getInterRes > getCuSample.isInter;
		chekNbBlkToClip.is64 > chekNbBlkToClip.is16  > chekNbBlkToClip.is4;
		chekNbBlkToClip.is4  > chekNbBlkToClip.is256 > chekNbBlkToClip.is1;
	end
end