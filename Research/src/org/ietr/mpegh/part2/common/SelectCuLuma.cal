/*
 * Copyright (c) 2014, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
 
 
/**
 * Decoding process for intra blocks.
 * 
 * 
 * @input CUInfo : Informations related to the current CU
 *        (size, address and mode : INTRA,INTER,...).
 * 
 * @input InterSample : Pixel's value from the Inter-prediction CU.
 * 
 * @input IntraSample : Pixel's value from the Intra-prediction CU.
 * 
 * @input PartMode : Giving the partitioning mode of the current CU.
 * 
 * @input ResidualSample : Residual values for the current CU.
 * 
 * 
 * @output Sample : Pixel's value before inLoop filter.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
 
package org.ietr.mpegh.part2.common;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.ietr.mpegh.part2.common.SelectCuFunctions.*;

//@DEBUG
actor SelectCuLuma()
	uint(size=8)  LcuSizeMax,
	uint(size=16) PicSize,
	uint(size=16) TilesCoord,
	uint(size=16) CUInfo,
	uint(size=8)  InterSample,
	uint(size=8)  IntraSample,
	uint(size=4)  PartMode,
	int (size=9)  ResidualSample,
	bool          SplitTransform
		==>
    uint(size=8) VidSample,
    uint(size=8)  IntraNeighb
		:

	uint(size=16) PU_SIZE_TO_NB_BLK_TO_CLIP[17] =
		[0, 1, 4, 4, 16, 16, 16, 16, 64, 64, 64,
			64, 64, 64, 64, 64, 256];
	uint(size=8)  SCU_SIZE = 16;
	uint(size=4)  numPart;
	uint(size=3)  numPartDecoded;

    uint(size=8)  puNeighb[NEIGHB_TAB_SZ];

    uint(size=8)  predSamp[64 * 64];
	bool          sampGot[512];
    uint(size=16) nbBlkToClip;
	uint(size=7)  cuSize[4][2];
	uint(size=5)  cuMode;
	uint(size=4)  partMode;
	uint(size=5)  cuOff[4][2] := [[0,0],[0,0],[0,0],[0,0]];
	uint(size=7)  cuWidth;
	uint(size=9)  nbBlk;
	uint(size=9)  nbBlkPu;
	uint(size=9)  idxBlkInterpred;
	uint(size=7)  xIdx;
	uint(size=7)  yIdx;
	uint(size=8)  LcuBuffer[64][64];
	
    int (size=16) puAddr[2];
	int (size=16) treeAddr[2];

    uint(size=9)  idxBlk := 0;
	uint(size=9)  idxBlkMax := 0;

	uint(size=8)  tuSize;
	
	uint(size=32) maskLcuSizeMax;

	int (size=4) trafoTreeDepth;
	uint(size=3) trafoTreeIdx[6];
	
	uint(size=8)  lcuSizeMax;	
	uint(size=16) picSize[2];
	uint(size=16) XIdx;
	uint(size=16) YIdx;
	uint(size=16) xAddrVert;
	uint(size=16) yAddrVert;
	uint(size=16) numPartition;
	uint(size=9)  blkIdx := 0;
	uint(size=16) pixAddr[2] := [0,0];
	
	uint(size=16) numTiles;
	uint(size=16) tileIdx;
	uint(size=16) tilesBegSamp[MAX_NUM_TILES][2];
	uint(size=16) tilesEndSamp[MAX_NUM_TILES][2];
	int(size=16) iLoop;
	uint LcuType := 0 ; // 0: LCU not in the Edge, 1: LCU vert edge, 2: LCU hor edge, 3: LCU hor&vert edge 
	
	procedure saveRasterScanCu_Nx4x4(uint(size=8) sample[64*4*4], int n)
	var
		uint(size=16) pixAddr[2],
		int offset
	begin
	    offset := 0;
	    foreach int j in 0 .. n-1
	    do
			zScanToAbsCoord(blkIdx, pixAddr);
			pixAddr[0] := pixAddr[0] + xAddrVert;
			pixAddr[1] := pixAddr[1] + yAddrVert;
//			println("pixAddr[0] = " + pixAddr[0] );
//			println("pixAddr[1] = " + pixAddr[1] );
			foreach int y in 0 .. 3
			do
				foreach int x in 0 .. 3
				do
					  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4 * y + x];
				end
			end
			blkIdx := blkIdx + 1;
			offset := offset + 16;
		end
	end
	
	procedure storeLCU_Nx4x4(uint(size=8) sample[64*4*4], int n)
	var
		int offset
	begin
		if LcuType = 0 then
			// no Hor no Vert
			saveRasterScanCu_Nx4x4(sample, n);	
		
		elsif LcuType = 1 then
			// vert
			  
			offset := 0;
	      foreach int j in 0 .. n-1
			do
				// store
				if (XIdx + pixAddr[0]) < picSize[0] then
//					println("pixAddrVERT[0] = " + pixAddr[0] + "  pixAddrVERT[1] = " + pixAddr[1]);
					foreach int y in 0 .. 3
					do
						foreach int x in 0 .. 3
						do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
						end
					end
					blkIdx := blkIdx + 1;
					zScanToAbsCoord(blkIdx, pixAddr);
					pixAddr[0] := pixAddr[0] + xAddrVert;
					pixAddr[1] := pixAddr[1] + yAddrVert;
				end
				
				// bypass 
				while ((XIdx + pixAddr[0]) >= picSize[0]) && (blkIdx < numPartition) do
//					println("pixAddr[0]bypassVERT = " + pixAddr[0] + "  pixAddr[1]bypassVERT = " + pixAddr[1]);
					blkIdx := blkIdx + 1;
					zScanToAbsCoord(blkIdx, pixAddr);
					pixAddr[0] := pixAddr[0] + xAddrVert;
					pixAddr[1] := pixAddr[1] + yAddrVert;
//					println("blkIdxVERT = " + blkIdx);
				end
				offset := offset + 16;
			end
			
		elsif LcuType = 2 then
			// Hor
			offset := 0;
	          foreach int j in 0 .. n-1
			do
			
				// store
				if (YIdx + pixAddr[1]) < picSize[1]   then
//				  println("pixAddrHOR[0] = " + pixAddr[0] + "  pixAddrHOR[1] = " + pixAddr[1]);
					foreach int y in 0 .. 3
					do
						foreach int x in 0 .. 3
						do
						  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
						end
					end
					blkIdx := blkIdx + 1;
					zScanToAbsCoord(blkIdx, pixAddr);
					pixAddr[0] := pixAddr[0] + xAddrVert;
					pixAddr[1] := pixAddr[1] + yAddrVert;
				end
			
				// bypass 
				while ((YIdx + pixAddr[1]) >= picSize[1]) && (blkIdx < numPartition) do
//					println("pixAddr[0]bypassHOR = " + pixAddr[0] + "  pixAddr[1]bypassHOR = " + pixAddr[1]);
					blkIdx := blkIdx + 1;
					zScanToAbsCoord(blkIdx, pixAddr);
					pixAddr[0] := pixAddr[0] + xAddrVert;
					pixAddr[1] := pixAddr[1] + yAddrVert;
//					println("blkIdxHOR = " + blkIdx);
				end
				offset := offset + 16;
			end
		else //if (XIdx >= picSize[0]-lcuSizeMax) && (YIdx >= (picSize[1]-lcuSizeMax)) then
			// vertHor
			offset := 0;
	          foreach int j in 0 .. n-1
			do
				// store
				if ((XIdx + pixAddr[0]) < picSize[0]) && ((YIdx + pixAddr[1]) < picSize[1]) then
//				println("pixAddrHORVERT[0] = " + pixAddr[0] + "  pixAddrHORVERT[1] = " + pixAddr[1]);
					foreach int y in 0 .. 3
					do
						foreach int x in 0 .. 3
						do
					  	  LcuBuffer[pixAddr[1]+y][pixAddr[0]+x] := sample[offset + 4*y+x];
						end
					end
					blkIdx := blkIdx + 1;
					zScanToAbsCoord(blkIdx, pixAddr);
					pixAddr[0] := pixAddr[0] + xAddrVert;
					pixAddr[1] := pixAddr[1] + yAddrVert;
				end
			
				// bypass 
				while (((XIdx + pixAddr[0]) >= picSize[0]) || ((YIdx + pixAddr[1]) >= picSize[1])) && (blkIdx < numPartition) do
//				  println("pixAddr[0]bypassHORVERT = " + pixAddr[0] + "  pixAddr[1]bypassHORVERT = " + pixAddr[1]);
					blkIdx := blkIdx + 1;
					zScanToAbsCoord(blkIdx, pixAddr);
					pixAddr[0] := pixAddr[0] + xAddrVert;
					pixAddr[1] := pixAddr[1] + yAddrVert;
//				  println("blkIdxHORVERT = " + blkIdx);
				end
				offset := offset + 16;  	
           end
        end
	end
	
	procedure computeNextLcuAddr()
	begin
		XIdx := XIdx + lcuSizeMax;
		if(XIdx >= tilesEndSamp[tileIdx][0]) then
			XIdx := tilesBegSamp[tileIdx][0];
			YIdx := YIdx + lcuSizeMax;
			if(YIdx >= tilesEndSamp[tileIdx][1]) then
				tileIdx := tileIdx + 1;
				XIdx := tilesBegSamp[tileIdx][0];
				YIdx := tilesBegSamp[tileIdx][1];
			end
		end
		
		if (XIdx < picSize[0]-lcuSizeMax) && (YIdx < (picSize[1]-lcuSizeMax)) then
			LcuType := 0;
		elsif (XIdx >= picSize[0]-lcuSizeMax) && (not (YIdx >= (picSize[1]-lcuSizeMax))) then
			LcuType := 1;
		elsif (YIdx >= (picSize[1]-lcuSizeMax)) && (not (XIdx >= picSize[0]-lcuSizeMax)) then
			LcuType := 2;
		else
			LcuType := 3;
		end
	end

    procedure saveNeighbours(int(size=16) pictOff[2])
	var
		uint tabOff,
		uint(size=16) numPixNeighb = 2 * lcuSizeMax - 1
	begin
		tabOff := PICT_HEIGHT - pictOff[1] + pictOff[0] - lcuSizeMax + 1;
		foreach uint x in 0 .. lcuSizeMax - 1
		do
			puNeighb[tabOff + x] :=
				LcuBuffer[lcuSizeMax - 1][x];
		end
		foreach uint y in 0 .. lcuSizeMax - 1 - 1
		do
			puNeighb[tabOff + numPixNeighb - 1 - y] :=
				LcuBuffer[y][lcuSizeMax - 1];
		end
	end

	procedure setIntraNeighb(
		uint(size=8) samples[64][64],
		uint(size=8) intraNeighb[130 + 2 * 66])
	var
		int xLimit,
		uint(size=16) origPixIdx := PICT_HEIGHT - treeAddr[1] + treeAddr[0] - 2 * tuSize,
		int(size=16) samplesOff[2] = [treeAddr[i]: for int i in 0 .. 1]
	begin
		intraNeighb[2 * tuSize] := puNeighb[origPixIdx + 2 * tuSize];
		// Pixels under the LCU do not exist.
		if((samplesOff[0] & maskLcuSizeMax) != 0) then
			foreach int i in 0 .. 2 * tuSize - 1
			do
				intraNeighb[i] := samples[(samplesOff[1] & maskLcuSizeMax) + 2 * tuSize - 1 - i]
					[(samplesOff[0] & maskLcuSizeMax) - 1];
			end
			if((samplesOff[1] & maskLcuSizeMax) != 0) then
				intraNeighb[2 * tuSize] := samples
					[(samplesOff[1] & maskLcuSizeMax) - 1][(samplesOff[0] & maskLcuSizeMax) - 1];
			end
		else
			foreach int i in 0 .. 2 * tuSize - 1
			do
				intraNeighb[i] := puNeighb[origPixIdx + i];
			end
		end
		if((samplesOff[1] & maskLcuSizeMax) != 0) then
			xLimit := min((samplesOff[0] & maskLcuSizeMax) + 2 * tuSize, (samplesOff[0] & ~maskLcuSizeMax) + lcuSizeMax) - (samplesOff[0] & maskLcuSizeMax);
			foreach int i in 0 .. xLimit - 1
			do
				intraNeighb[2 * tuSize + 1 + i] := samples
					[(samplesOff[1] & maskLcuSizeMax) - 1][(samplesOff[0] & maskLcuSizeMax) + i];
			end
		else
			foreach int i in 2 * tuSize + 1 .. 4 * tuSize + 1
			do
				intraNeighb[i] := puNeighb[origPixIdx + i];
			end
		end
	end
	
	initialize ==>
	do
		sampGot := [false: for int i in 0 .. 511];
	end
	
	isNewSlc_dep: action PartMode:[partModeVal] ==>
	guard
		partModeVal = PART_MODE_SLICE_DEP
	end
	
	isNewSlc_indep: action PartMode:[partModeVal], PicSize:[picWidthInPix,
	picHeightInPix], LcuSizeMax:[log2_lcuSz] ==>
	guard
		partModeVal = PART_MODE_SLICE_INDEP
	end
	
	isNewPict: action PartMode:[partModeVal], LcuSizeMax:[log2_lcuSz], 
					   PicSize:[picWidthInPix, picHeightInPix] ==> 
	guard
		partModeVal = PART_MODE_PICT
	do
        maskLcuSizeMax := (1 << log2_lcuSz) - 1;
		lcuSizeMax := 1 << log2_lcuSz;
		numPartition := (lcuSizeMax * lcuSizeMax) / 16;
		
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		tileIdx := 0;
		XIdx := 0;
		YIdx := 0;
		blkIdx := 0;
	end

	getPartMode: action PartMode:[partModeVal] ==>
	guard
		partModeVal != PART_MODE_SLICE_DEP && partModeVal != PART_MODE_SLICE_INDEP &&
		partModeVal != PART_MODE_PICT
	do
		partMode := partModeVal;
		numPart := partModeToNumPart[partModeVal];
		numPartDecoded := 0;
	end

	/* Getting informations of the next CU. */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart && numPart != 2
	do
		cuMode  := cuInfo[0];
		cuWidth := cuInfo[3];
        tuSize := cuWidth;
        nbBlkToClip := PU_SIZE_TO_NB_BLK_TO_CLIP[cuWidth >> 2];
		nbBlk   := nbBlkToClip;
		nbBlkPu   := nbBlkToClip;
		// nbBlk   := cuWidth*cuWidth/16;
		idxBlk  := 0;
		cuSize := [[cuInfo[i]/4:for int i in 3 .. 4]:for int j in 0 .. 3];
		cuOff[0] := [0:for int i in 0 .. 1];
		puAddr := [cuInfo[1], cuInfo[2]];
		treeAddr := [cuInfo[1], cuInfo[2]];
        trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
	end

	/* Getting informations of the next CU when there are two parts.
	 * Get twice informations in order to have all the informations concerning
	 * this CU.
	 */
	getCuInfo.launch.numPart2: action CUInfo:[cuInfo] repeat 10 ==>
	guard
		numPartDecoded < numPart && numPart = 2
	do
		cuMode := cuInfo[0];
		cuSize  := [[cuInfo[i+5*j]/4:for uint i in 3 .. 4]:
			for uint j in 0 .. 1];
        puAddr := [cuInfo[1], cuInfo[2]];
		treeAddr := [cuInfo[1], cuInfo[2]];
		cuWidth := max(cuInfo[3], cuInfo[4]);
        trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
        tuSize := cuWidth;
		nbBlk   := cuWidth*cuWidth/16;
		nbBlkPu   := cuWidth*cuWidth/16;
		idxBlk  := 0;
		nbBlkToClip := PU_SIZE_TO_NB_BLK_TO_CLIP[min(cuInfo[3], cuInfo[4]) >> 2];
		if(partMode=PART_2NxN || partMode=PART_2NxnU ||
			partMode=PART_2NxnD) then
			cuOff[1][0] := 0;
			cuOff[1][1] := cuInfo[4]/4;
		else
			cuOff[1][0] := cuInfo[3]/4;
			cuOff[1][1] := 0;
		end
		numPartDecoded := 0;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	/** Checking type of prediction.  **/
	getCuMode.isIntra: action ==>
	guard
		cuMode = INTRA
	do
		numPartDecoded := numPartDecoded + 1;
	end

	getCuMode.isInter: action ==>
	guard
		cuMode = INTER || cuMode = SKIP
	do
		xIdx := 0;
		yIdx := 0;
		idxBlkInterpred := 0;
	end

	getCuMode.isOther: action ==>
	guard
		cuMode = OTHER
	do
		numPartDecoded := numPartDecoded + 1;
	end

	/* Getting samples from intraPrediction */
	getCuSample.isIntra: action IntraSample:[intraSample] repeat SCU_SIZE,
		ResidualSample:[resSample] repeat SCU_SIZE
		==> 
	guard
		idxBlk < nbBlk
	var
		uint(size=8) sample[SCU_SIZE]
	do
		/* Reordering the sample is not needed because both (Residual and
		 * prediction parts) sample are in the rasterScan order
		 */
		add_8_16_clip_16_1x16_cal (
		  intraSample,
          resSample,
          sample,
          0,
          0,
          0);
        idxBlk := idxBlk + 1;
        storeLCU_Nx4x4(sample, 1);
	end
	
	endLCU.x64 : action ==> VidSample:[vidSamp] repeat 4096
	guard
		blkIdx = numPartition, lcuSizeMax = 64
	var
	    int(size=16) pictOff[2] = [puAddr[i] & ~maskLcuSizeMax: for int i in 0 .. 1],
		uint(size=8) vidSamp[64 * 64]
	do
//		println("line Done");
		blkIdx := 0;
    	xAddrVert := 0;
		yAddrVert := 0;
		pixAddr[0] := 0;
		pixAddr[1] := 0;
				
		computeNextLcuAddr();
		
		foreach int y in 0 .. 63
		do			
			foreach int x in 0 .. 63
			do
				vidSamp[y * 64 + x] := LcuBuffer[y][x];
			end
		end
		
		saveNeighbours(pictOff);
	end
	
	endLCU.x32 : action ==> VidSample:[vidSamp] repeat 1024
	guard
		blkIdx = numPartition, lcuSizeMax = 32
	var
	    int(size=16) pictOff[2] = [puAddr[i] & ~maskLcuSizeMax: for int i in 0 .. 1],
		uint(size=8) vidSamp[32 * 32]
	do
//		println("line Done");
		blkIdx := 0;
    	xAddrVert := 0;
		yAddrVert := 0;
		pixAddr[0] := 0;
		pixAddr[1] := 0;
				
		computeNextLcuAddr();
		
		foreach int y in 0 .. 31
		do			
			foreach int x in 0 .. 31
			do
				vidSamp[y * 32 + x] := LcuBuffer[y][x];
			end
		end
		
		saveNeighbours(pictOff);
	end
	
	endLCU.x16 : action ==> VidSample:[vidSamp] repeat 256
	guard
		blkIdx = numPartition, lcuSizeMax = 16
	var
	    int(size=16) pictOff[2] = [puAddr[i] & ~maskLcuSizeMax: for int i in 0 .. 1],
		uint(size=8) vidSamp[16 * 16]
	do
//		println("line Done");
		blkIdx := 0;
    	xAddrVert := 0;
		yAddrVert := 0;
		pixAddr[0] := 0;
		pixAddr[1] := 0;
				
		computeNextLcuAddr();
		
		foreach int y in 0 .. 15
		do			
			foreach int x in 0 .. 15
			do
				vidSamp[y * 16 + x] := LcuBuffer[y][x];
			end
		end
		
		saveNeighbours(pictOff);
	end

    endLCU.isFalse : action ==> 
	guard
		blkIdx < numPartition
	do
    end
	
	checkNbBlkToClip.is1: action ==>
	guard
		tuSize = 4
	end

	checkNbBlkToClip.is4: action ==>
	guard
		tuSize = 8
	end

	checkNbBlkToClip.is16: action ==>
	guard
		tuSize = 16
	end

	checkNbBlkToClip.is64: action ==>
	guard
		tuSize = 32
	end

	checkNbBlkToClip.is256: action ==>
	guard
		tuSize = 64
	end
	
	/* Getting prediction samples from interPrediction */
	getCuSample.isInter: action InterSample:[interSample] repeat SCU_SIZE ==>
	guard
		idxBlkInterpred < nbBlkPu
	var
		uint(size=16) blkAddr[2],
		/* Offset is not null when numPart = 2 and partIdx = 1. */
		uint xOff = cuOff[numPartDecoded][0],
		uint yOff = cuOff[numPartDecoded][1],
		uint blkIdx
	do
        blkAddr := [xIdx+xOff, yIdx+yOff];
		blkIdx := absCoordInBlkToZScan(blkAddr);
        copy_8_8_16_cal(
          predSamp,
  	      interSample,
  	      SCU_SIZE*blkIdx,
  	      0);
  	    sampGot[blkIdx] := true;
		/* Computing the location of the next block (it's sent in ZScan order instead of RasterScan) */
		xIdx := xIdx + 1;
		if(xIdx = cuSize[numPartDecoded][0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
			if(yIdx = cuSize[numPartDecoded][1]) then
				yIdx := 0;
				numPartDecoded := numPartDecoded + 1;
			end
		end

		idxBlkInterpred := idxBlkInterpred + 1;
	end
	
	/* Getting the residual part for interPrediction then computing the
	 * result.
	 */
	getInterRes.get1Blk: action ResidualSample:[resSample] repeat SCU_SIZE
		==> 
	guard
        sampGot[idxBlkMax],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE]
	do
        add_8_16_clip_16_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);

		storeLCU_Nx4x4(sample, 1);
		
		idxBlk := idxBlkMax + 1;
	end

    /* Getting the residual part for interPrediction then computing the
	 * result.
	 */
    getInterRes.get4Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 4
		==> 
	guard
        sampGot[idxBlkMax],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE * 4]
	do
		add_8_16_clip_64_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
          
		idxBlk := idxBlk + 4;
		
		storeLCU_Nx4x4(sample, 4);
	end

    /* Getting the residual part for interPrediction then computing the
	 * result.
	 */
    getInterRes.get16Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 16
		==> 
	guard
        sampGot[idxBlkMax],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE * 16]
	do
		add_8_16_clip_256_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
		idxBlk := idxBlk + 16;
		
		storeLCU_Nx4x4(sample, 16);
	end

    /* Getting the residual part for interPrediction then computing the
	 * result.
	 */
    getInterRes.get64Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 64
		==> 
	guard
        sampGot[idxBlkMax],
        blkIdx < numPartition
	var
		uint(size=8) sample[SCU_SIZE * 64]
	do
		add_8_16_clip_1024_64x64_cal (
          predSamp,
		  resSample,
          sample,
          SCU_SIZE*idxBlk,
          0,
          0);
		idxBlk := idxBlk + 64;
		
		storeLCU_Nx4x4(sample, 64);
	end

	getCuSample.done: action ==>
	guard
		idxBlk = nbBlk
	do
		foreach int i in 0 .. idxBlkMax
		do
			sampGot[i] := false;
		end
	end

    /* Check if the intra prediction CU has to be split in 4 "subCU" */
	getSplitTrafo.isTrue: action SplitTransform:[splitTrafo] ==>
	guard
		splitTrafo
	do
		trafoTreeDepth := trafoTreeDepth + 1;
		trafoTreeIdx[trafoTreeDepth] := 0;
		nbBlk := nbBlk >> 2;
	end

	/* Check if the intra prediction will not be split again, then realize the
	 * prediction for this part of CU
	 */
	getSplitTrafo.isFalse: action SplitTransform:[splitTrafo] ==>
	guard
		not splitTrafo
	do
		/* Computing the size and the address of the current block. */
		tuSize := cuWidth;
		treeAddr := [puAddr[i]: for int i in 0 .. 1];
		foreach uint idx in 1 .. trafoTreeDepth
		do
			tuSize := tuSize >> 1;
			if((trafoTreeIdx[idx]&1) != 0) then
				treeAddr[0] := treeAddr[0] + tuSize;
			end
			if((trafoTreeIdx[idx]&2) != 0) then
				treeAddr[1] := treeAddr[1] + tuSize;
			end
		end
	
		nbBlk := tuSize * tuSize / 16;

		idxBlk := 0;

		/* going to the next "branch of the tree" */
		trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
		/* Replace by (trafoTreeDepth > -1 && trafoTreeIdx[trafoTreeDepth] = 4) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		while (if trafoTreeDepth>= 0 then (trafoTreeIdx[trafoTreeDepth] = 4) else false end)
		do
			trafoTreeDepth := trafoTreeDepth - 1;
			if(trafoTreeDepth>-1) then
				trafoTreeIdx[trafoTreeDepth] :=
					trafoTreeIdx[trafoTreeDepth] + 1;
			end
		end
	end

	getSplitTrafo.isInter.isTrue: action SplitTransform:[splitTrafo] ==>
	guard
		splitTrafo = true
	do
		trafoTreeDepth := trafoTreeDepth + 1;
		trafoTreeIdx[trafoTreeDepth] := 0;
	end

	getSplitTrafo.isInter.isFalse: action SplitTransform:[splitTrafo] ==>
	guard
		splitTrafo = false
	do
		// tuSize := cuWidth >> trafoTreeDepth;
		tuSize := cuWidth;

		idxBlkMax := 
			if(tuSize = 4 || tuSize = 8) then
				idxBlk + 3
			else if(tuSize = 16) then
				idxBlk + 15
			else if(tuSize = 32) then
				idxBlk + 63
			else
				idxBlk + 255
			end end end;
			
		nbBlk := tuSize * tuSize / 16;

		/* going to the next "branch of the tree" */
		trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
		/* Replace by (trafoTreeDepth > -1 && trafoTreeIdx[trafoTreeDepth] = 4) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		while(if trafoTreeDepth>= 0 then (trafoTreeIdx[trafoTreeDepth] = 4) else false end)
		do
			trafoTreeDepth := trafoTreeDepth - 1;
			if(trafoTreeDepth>-1) then
				trafoTreeIdx[trafoTreeDepth] :=
					trafoTreeIdx[trafoTreeDepth] + 1;
			end
		end
	end
	
	getSplitTrafo.done: action ==>
	guard
		trafoTreeDepth = -1
	do
		idxBlk := 0;
        idxBlkInterpred := 0;
	end
	
	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBegSamp[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEndSamp[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	sendNeighb.is4x4: action ==> IntraNeighb:[intraNeighb] repeat 18
	guard
		tuSize = 4
	var
		uint(size=8) intraNeighb[18]
	do
		setIntraNeighb(LcuBuffer, intraNeighb);
	end

	sendNeighb.is8x8: action ==> IntraNeighb:[intraNeighb] repeat 34
	guard
		tuSize = 8
	var
		uint(size=8) intraNeighb[34]
	do
		setIntraNeighb(LcuBuffer, intraNeighb);
	end

	sendNeighb.is16x16: action ==> IntraNeighb:[intraNeighb] repeat 66
	guard
		tuSize = 16
	var
		uint(size=8) intraNeighb[66]
	do
		setIntraNeighb(LcuBuffer, intraNeighb);
	end

	sendNeighb.is32x32: action ==> IntraNeighb:[intraNeighb] repeat 130
	guard
		tuSize = 32
	var
		uint(size=8) intraNeighb[130]
	do
		setIntraNeighb(LcuBuffer, intraNeighb);
	end

	schedule fsm GetPartMode:
		GetPartMode (isNewPict        )--> GetNumTiles;
		GetPartMode (isNewSlc_dep     )--> GetCuInfo;
		GetPartMode (isNewSlc_indep   )--> GetNumTiles;
		GetPartMode (getPartMode      )--> GetCuInfo;
		
		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetPartMode;
		
		GetCuInfo   (getCuInfo.launch )--> GetCuMode;
		GetCuInfo   (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isIntra )--> GetSplitTrafoIntra;
		GetCuMode (getCuMode.isInter )--> GetSplitTrafoInter;
		GetCuMode (getCuMode.isOther )--> GetCuInfo;

        GetSplitTrafoIntra (getSplitTrafo.isTrue  )--> GetSplitTrafoIntra;
		GetSplitTrafoIntra (getSplitTrafo.isFalse )--> SendNeighb;
		GetSplitTrafoIntra (getSplitTrafo.done    )--> GetCuInfo;

        SendNeighb (sendNeighb.is4x4   )--> GetPuIntra4x4;
		SendNeighb (sendNeighb.is8x8   )--> GetPuIntraNot4x4;
		SendNeighb (sendNeighb.is16x16 )--> GetPuIntraNot4x4;
		SendNeighb (sendNeighb.is32x32 )--> GetPuIntraNot4x4;

        EndLcu    (endLCU  )--> GetSplitTrafoIntra;
		
		GetPuIntraNot4x4 (getCuSample.isIntra )--> GetPuIntraNot4x4;
		GetPuIntraNot4x4 (getCuSample.done    )--> EndLcu;
		
		GetPuIntra4x4    (getCuSample.isIntra    )--> EndLcu2;
		EndLcu2    (endLCU  )--> GetSplitTrafoIntra_2;
		
		// Block4x4 :
		// Only one block (PU == 4)
		GetSplitTrafoIntra_2 (getSplitTrafo.done    )--> GetCuInfo;

		// 2nd Block
		GetSplitTrafoIntra_2 (getSplitTrafo.isFalse )--> SendNeighb_2;
		SendNeighb_2 (sendNeighb.is4x4 )--> GetPuIntra_2;
		GetPuIntra_2 (getCuSample.isIntra )--> GetSplitTrafoIntra_3;

		// 3rd Block
		GetSplitTrafoIntra_3 (getSplitTrafo.isFalse )--> SendNeighb_3;
		SendNeighb_3 (sendNeighb.is4x4 )--> GetPuIntra_3;
		GetPuIntra_3 (getCuSample.isIntra )--> GetSplitTrafoIntra_4;

		// 4th Block
		GetSplitTrafoIntra_4 (getSplitTrafo.isFalse )--> SendNeighb_4;
		SendNeighb_4 (sendNeighb.is4x4 )--> GetPuIntra_4;
		GetPuIntra_4 (getCuSample.isIntra )--> EndLcu;

        GetSplitTrafoInter (getSplitTrafo.isInter  )--> GetSplitTrafoInter;
		GetSplitTrafoInter (getSplitTrafo.done     )--> CheckNbBlkToClip;
		
		CheckNbBlkToClip (checkNbBlkToClip.is1   )--> GetSplitTrafoInter1;
		CheckNbBlkToClip (checkNbBlkToClip.is4   )--> GetCuSampleInter4Blk;
		CheckNbBlkToClip (checkNbBlkToClip.is16  )--> GetCuSampleInter16Blk;
		CheckNbBlkToClip (checkNbBlkToClip.is64  )--> GetCuSampleInter64Blk;
		CheckNbBlkToClip (checkNbBlkToClip.is256 )--> GetCuSampleInter256Blk;

        GetSplitTrafoInter1 (getSplitTrafo.isInter.isFalse )--> GetSplitTrafoInter2;
		GetSplitTrafoInter2 (getSplitTrafo.isInter.isFalse )--> GetSplitTrafoInter3;
		GetSplitTrafoInter3 (getSplitTrafo.isInter.isFalse )--> GetCuSampleInter1Blk;
		
		EndLcuInter(endLCU) --> GetPartMode;
		
		GetCuSampleInter1Blk (getCuSample.isInter )--> GetCuSampleInter1Blk;
		GetCuSampleInter1Blk (getInterRes.get1Blk )--> GetCuSampleInter1Blk;
		GetCuSampleInter1Blk (getCuSample.done    )--> EndLcuInter;

		GetCuSampleInter4Blk (getCuSample.isInter    )--> GetCuSampleInter4Blk;
		GetCuSampleInter4Blk (getInterRes.get4Blk )--> GetCuSampleInter4Blk;
		GetCuSampleInter4Blk (getCuSample.done       )--> EndLcuInter;
        
		GetCuSampleInter16Blk (getCuSample.isInter    )--> GetCuSampleInter16Blk;
		GetCuSampleInter16Blk (getInterRes.get16Blk )--> GetCuSampleInter16Blk;
		GetCuSampleInter16Blk (getCuSample.done       )--> EndLcuInter;

		GetCuSampleInter64Blk (getCuSample.isInter    )--> GetCuSampleInter64Blk;
		GetCuSampleInter64Blk (getInterRes.get64Blk )--> GetCuSampleInter64Blk;
		GetCuSampleInter64Blk (getCuSample.done       )--> EndLcuInter;

		GetCuSampleInter256Blk (getCuSample.isInter    )--> GetCuSampleInter256Blk;
		GetCuSampleInter256Blk (getInterRes.get64Blk )--> GetCuSampleInter256Blk;
		GetCuSampleInter256Blk (getCuSample.done       )--> EndLcuInter;
	end
	priority
		getSplitTrafo.done > getSplitTrafo.isFalse > getSplitTrafo.isInter > getSplitTrafo.isTrue;
		getCuSample.done > getCuSample.isIntra;
		getCuSample.done > getInterRes > getCuSample.isInter;
		checkNbBlkToClip.is64 > checkNbBlkToClip.is16  > checkNbBlkToClip.is4;
		checkNbBlkToClip.is4  > checkNbBlkToClip.is256 > checkNbBlkToClip.is1;
	end
end