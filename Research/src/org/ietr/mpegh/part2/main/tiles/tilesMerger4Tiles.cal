package org.ietr.mpegh.part2.main.tiles;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

actor tilesMerger4Tiles () 	uint (size= 8) IN1, 
						uint (size= 8) IN2, 
						uint (size= 8) IN3, 
						uint (size= 8) IN4,
						uint(size=16) TilesCoord
  						==> 
  						uint (size= 8) OUT:

uint counter0 := 0;
uint counter1 := 0;
uint counter2 := 0;
uint counter3 := 0;

uint countOut0 := 0;
uint countOut1 := 0;
uint countOut2 := 0;
uint countOut3 := 0;

int(size=16) iLoop;
uint(size=16) numTiles;

uint (size=8) tab0[384*256*3/2];
uint (size=8) tab1[448*256*3/2];
uint (size=8) tab2[384*224*3/2];
uint (size=8) tab3[448*224*3/2];

uint tileSize[MAX_NUM_TILES];

	readWrite.Rtile0: action IN1:[data] repeat 384 ==> 
	guard
		counter0 < tileSize[0]*3/2
	do
		foreach int i in 0 .. 383 do
			tab0[counter0 + i] := data[i];
		end
		counter0 := counter0 + 384;
	end
	
	readWrite.Rtile1: action IN2:[data] repeat 384 ==> 
	guard
		counter1 < tileSize[1]*3/2
	do
		foreach int i in 0 .. 383 do
			tab1[counter1 + i] := data[i];
		end
		counter1 := counter1 + 384;
	end
	
	readWrite.Rtile2: action IN3:[data] repeat 384 ==> 
	guard
		counter2 < tileSize[2]*3/2
	do
		foreach int i in 0 .. 383 do
			tab2[counter2 + i] := data[i];
		end
		counter2 := counter2 + 384;
	end
	
	readWrite.Rtile3: action IN4:[data] repeat 384 ==>  
	guard
		counter3 < tileSize[3]*3/2
	do
		foreach int i in 0 .. 383 do
			tab3[counter3 + i] := data[i];
		end
		counter3 := counter3 + 384;
	end
	
	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	var
		uint tileWidth,
		uint tileHeight
	do
		tileWidth  := tilesCoord[2] - tilesCoord[0];
		tileHeight := tilesCoord[3] - tilesCoord[1];
		tileSize[iLoop] := tileWidth * tileHeight;
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	do
		iLoop := 0;
	end
	
	
	readWrite.WTile0: action ==> OUT:[[tab0[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter0 > countOut0
	var
		uint cnt
	do
		cnt := countOut0;
		countOut0 := countOut0 + 384;
	end
	
	readWrite.WTile1: action ==> OUT:[[tab1[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter1 > countOut1,
		countOut0 = tileSize[0]*3/2
	var
		uint cnt
	do
		cnt := countOut1;
		countOut1 := countOut1 + 384;
	end
	
	readWrite.WTile2: action ==> OUT:[[tab2[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter2 > countOut2,
		countOut1 = tileSize[1]*3/2
	var
		uint cnt
	do
		cnt := countOut2;
		countOut2 := countOut2 + 384;
	end
	
	readWrite.sendTile3: action ==> OUT:[[tab3[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter3 > countOut3,
		countOut2 = tileSize[2]*3/2
	var
		uint cnt
	do
		cnt := countOut3;
		countOut3 := countOut3 + 384;
	end
	
	endTiles: action ==>
	guard
		countOut3 = tileSize[3]*3/2
	do
		countOut0 := 0;
		countOut1 := 0;
		countOut2 := 0;
		countOut3 := 0;
		counter0 := 0;
		counter1 := 0;
		counter2 := 0;
		counter3 := 0;
	end
	
	
	schedule fsm GetNumTiles:
		GetNumTiles   	(getNumTiles          )	--> GetTilesCoord;
		GetTilesCoord 	(getTilesCoord.launch )	--> GetTilesCoord;
		GetTilesCoord 	(getTilesCoord.done   )	--> readTiles;
		readTiles		(readWrite)				--> readTiles;
		readTiles		(endTiles)				--> GetNumTiles;
	end
	
	priority
		getTilesCoord.done > getTilesCoord.launch;
		endTiles  > readWrite;
	end
end