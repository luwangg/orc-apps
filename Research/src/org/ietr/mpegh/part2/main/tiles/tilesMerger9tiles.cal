package org.ietr.mpegh.part2.main.tiles;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

actor tilesMerger9tiles () 	uint (size= 8) IN1, 
						uint (size= 8) IN2, 
						uint (size= 8) IN3, 
						uint (size= 8) IN4,
						uint (size= 8) IN5, 
						uint (size= 8) IN6, 
						uint (size= 8) IN7,
						uint (size= 8) IN8, 
						uint (size= 8) IN9, 
						
						uint(size=16) TilesCoord
  						==> 
  						uint (size= 8) OUT:

uint counter0 := 0;
uint counter1 := 0;
uint counter2 := 0;
uint counter3 := 0;
uint counter4 := 0;
uint counter5 := 0;
uint counter6 := 0;
uint counter7 := 0;
uint counter8 := 0;

uint countOut0 := 0;
uint countOut1 := 0;
uint countOut2 := 0;
uint countOut3 := 0;
uint countOut4 := 0;
uint countOut5 := 0;
uint countOut6 := 0;
uint countOut7 := 0;
uint countOut8 := 0;

int(size=16) iLoop;
uint(size=16) numTiles;

uint (size=8) tab0[256*128*3/2];
uint (size=8) tab1[256*128*3/2];
uint (size=8) tab2[320*128*3/2];
uint (size=8) tab3[256*192*3/2];
uint (size=8) tab4[256*192*3/2];
uint (size=8) tab5[320*192*3/2];
uint (size=8) tab6[256*160*3/2];
uint (size=8) tab7[256*160*3/2];
uint (size=8) tab8[320*160*3/2];


uint tileSize[MAX_NUM_TILES];

	readWrite.Rtile0: action IN1:[data] repeat 384 ==> 
	guard
		counter0 < tileSize[0]*3/2
	do
		foreach int i in 0 .. 383 do
			tab0[counter0 + i] := data[i];
		end
		counter0 := counter0 + 384;
	end
	
	readWrite.Rtile1: action IN2:[data] repeat 384 ==> 
	guard
		counter1 < tileSize[1]*3/2
	do
		foreach int i in 0 .. 383 do
			tab1[counter1 + i] := data[i];
		end
		counter1 := counter1 + 384;
	end
	
	readWrite.Rtile2: action IN3:[data] repeat 384 ==> 
	guard
		counter2 < tileSize[2]*3/2
	do
		foreach int i in 0 .. 383 do
			tab2[counter2 + i] := data[i];
		end
		counter2 := counter2 + 384;
	end
	
	readWrite.Rtile3: action IN4:[data] repeat 384 ==>  
	guard
		counter3 < tileSize[3]*3/2
	do
		foreach int i in 0 .. 383 do
			tab3[counter3 + i] := data[i];
		end
		counter3 := counter3 + 384;
	end
	
	readWrite.Rtile4: action IN5:[data] repeat 384 ==>  
	guard
		counter4 < tileSize[4]*3/2
	do
		foreach int i in 0 .. 383 do
			tab4[counter4 + i] := data[i];
		end
		counter4 := counter4 + 384;
	end
	readWrite.Rtile5: action IN6:[data] repeat 384 ==>  
	guard
		counter5 < tileSize[5]*3/2
	do
		foreach int i in 0 .. 383 do
			tab5[counter5 + i] := data[i];
		end
		counter5 := counter5 + 384;
	end
	readWrite.Rtile6: action IN7:[data] repeat 384 ==>  
	guard
		counter6 < tileSize[6]*3/2
	do
		foreach int i in 0 .. 383 do
			tab6[counter6 + i] := data[i];
		end
		counter6 := counter6 + 384;
	end
	readWrite.Rtile7: action IN8:[data] repeat 384 ==>  
	guard
		counter7 < tileSize[7]*3/2
	do
		foreach int i in 0 .. 383 do
			tab7[counter7 + i] := data[i];
		end
		counter7 := counter7 + 384;
	end
	readWrite.Rtile8: action IN9:[data] repeat 384 ==>  
	guard
		counter8 < tileSize[8]*3/2
	do
		foreach int i in 0 .. 383 do
			tab8[counter8 + i] := data[i];
		end
		counter8 := counter8 + 384;
	end
	
	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	var
		uint tileWidth,
		uint tileHeight
	do
		tileWidth  := tilesCoord[2] - tilesCoord[0];
		tileHeight := tilesCoord[3] - tilesCoord[1];
		tileSize[iLoop] := tileWidth * tileHeight;
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	do
		iLoop := 0;
	end
	
	
	readWrite.WTile0: action ==> OUT:[[tab0[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter0 > countOut0
	var
		uint cnt
	do
		cnt := countOut0;
		countOut0 := countOut0 + 384;
	end
	
	readWrite.WTile1: action ==> OUT:[[tab1[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter1 > countOut1,
		countOut0 = tileSize[0]*3/2
	var
		uint cnt
	do
		cnt := countOut1;
		countOut1 := countOut1 + 384;
	end
	
	readWrite.WTile2: action ==> OUT:[[tab2[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter2 > countOut2,
		countOut1 = tileSize[1]*3/2
	var
		uint cnt
	do
		cnt := countOut2;
		countOut2 := countOut2 + 384;
	end
	
	readWrite.WTile3: action ==> OUT:[[tab3[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter3 > countOut3,
		countOut2 = tileSize[2]*3/2
	var
		uint cnt
	do
		cnt := countOut3;
		countOut3 := countOut3 + 384;
	end
	
	readWrite.WTile4: action ==> OUT:[[tab4[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter4 > countOut4,
		countOut3 = tileSize[3]*3/2
	var
		uint cnt
	do
		cnt := countOut4;
		countOut4 := countOut4 + 384;
	end
	
	readWrite.WTile5: action ==> OUT:[[tab5[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter5 > countOut5,
		countOut4 = tileSize[4]*3/2
	var
		uint cnt
	do
		cnt := countOut5;
		countOut5 := countOut5 + 384;
	end
	
	readWrite.WTile6: action ==> OUT:[[tab6[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter6 > countOut6,
		countOut5 = tileSize[5]*3/2
	var
		uint cnt
	do
		cnt := countOut6;
		countOut6 := countOut6 + 384;
	end
	
	readWrite.WTile7: action ==> OUT:[[tab7[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter7 > countOut7,
		countOut6 = tileSize[6]*3/2
	var
		uint cnt
	do
		cnt := countOut7;
		countOut7 := countOut7 + 384;
	end
	
	readWrite.WTile8: action ==> OUT:[[tab8[cnt + i]: for int i in 0 .. 383]] repeat 384
	guard
		counter8 > countOut8,
		countOut7 = tileSize[7]*3/2
	var
		uint cnt
	do
		cnt := countOut8;
		countOut8 := countOut8 + 384;
	end
	
	endTiles: action ==>
	guard
		countOut8 = tileSize[8]*3/2
	do
		 counter0 := 0;
		 counter1 := 0;
		 counter2 := 0;
		 counter3 := 0;
		 counter4 := 0;
		 counter5 := 0;
		 counter6 := 0;
		 counter7 := 0;
		 counter8 := 0;
		
		 countOut0 := 0;
		 countOut1 := 0;
		 countOut2 := 0;
		 countOut3 := 0;
		 countOut4 := 0;
		 countOut5 := 0;
		 countOut6 := 0;
		 countOut7 := 0;
		 countOut8 := 0;
	end
	
	
	schedule fsm GetNumTiles:
		GetNumTiles   	(getNumTiles          )	--> GetTilesCoord;
		GetTilesCoord 	(getTilesCoord.launch )	--> GetTilesCoord;
		GetTilesCoord 	(getTilesCoord.done   )	--> readTiles;
		readTiles		(readWrite)				--> readTiles;
		readTiles		(endTiles)				--> GetNumTiles;
	end
	
	priority
		getTilesCoord.done > getTilesCoord.launch;
		endTiles  > readWrite;
	end
end