/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * This actor is a picture buffer containing all reference pictures. It sends
 *		samples needed for the inter prediction
 * 
 * 
 * @input IsBiPred : Indicates when the current CU is using Bi-prediction.
 * 
 * @input IsReadOrNewSlc : Indicates if samples are asked from the current RPS
 *		or if there is a new picture.
 * 
 * @input Mv : movement vectors of the current CU.
 * 
 * @input PicSize : size of the current picture.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @output PocRef : POC used for the prediction of the current CU.
 * 
 * @input PredCuSize : Size of the largest side of the current CU.
 * 
 * @input Sample : Samples from the Inloop filter. It represents the pixels
 * 		which will be displayed.
 * 
 * 
 * @output Sample : Samples needed for the inter prediction.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
package org.ietr.mpegh.part2.main.inter;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.sc29.wg11.mpegh.part2.main.inter.DecodingPictureBufferFunctions.*;

actor DecodingPictureBuffer_luma_FB2 ()
	uint(size=2)  IsPicSlc0,
	uint(size=2)  IsPicSlc1,	
	uint(size=8)  LcuSizeMax0,
	uint(size=8)  LcuSizeMax1,
	uint(size=1)  IsReadOrNewSlice0,
	uint(size=1)  IsReadOrNewSlice1,
	int (size=32) Mv0,
	int (size=32) Mv1,
	uint(size=16) PictSize0,
	uint(size=16) PictSize1,
	int(size=16)  Poc0,
	int(size=16)  Poc1,
	int (size=16) PocRef0,
	int (size=16) PocRef1,
	uint(size=7)  PredCuSize0,
	uint(size=7)  PredCuSize1,
	int (size=16) RpsPoc0,
	int (size=16) RpsPoc1,
	uint(size=8)  ReorderPics,
	uint(size=8)  Sample0,
	uint(size=8)  Sample1
		==>
	uint(size=8)  RefSample0,
	uint(size=8)  RefSample1,
	uint(size=8)  Vid,
	int          Done
		:
		
	bool DEBUG_DPB := false;
	
	int FB_SIZE = 2;
	bool sendPict = false;
	uint(size=8)  pictureBuffer[DPB_SIZE][DPB_LUM_HEIGHT][DPB_LUM_WIDTH];
	
	int (size=16) pocIndex[32];
	int (size=16) pocRef[DPB_SIZE] := [-1 : for int i in 0 .. DPB_SIZE-1];

	uint(size=8)  currIdx := 0;
	uint(size=6)  picSizeInCu[2];
	uint(size=16) picSize[2];
	
	uint(size=16)  xIdx[FB_SIZE];
	uint(size=16)  yIdx[FB_SIZE];
	
	uint          pictNum;
	int           numReorderPic;
	int           numAvailablePic := 0;

	bool          isSent[DPB_SIZE] := [true : for int i in 0 .. DPB_SIZE-1];
	bool          skip[DPB_SIZE] := [false : for int i in 0 .. DPB_SIZE-1];
	bool          isRef[FB_SIZE][DPB_SIZE] := [[false: for int i in 0 .. DPB_SIZE - 1] : for int i in 0 .. FB_SIZE - 1];
	
	uint(size=3)  nbList[FB_SIZE];
	uint(size=3)  sizeOfList[FB_SIZE];
	
	bool pocDone[32] := [false : for int i in 0 .. 31];
	int cuHeightDone[32] := [BORDER_SIZE_LUM : for int i in 0 .. 31];
	int sendingPoc := 0;
	int readingPoc[FB_SIZE];
	
	uint sendx := 0;
	uint sendy := 0;
	uint(size=8) lcuSizeMax;
	
	uint(size=8) seqIdOutput := 1;
	bool needReset[FB_SIZE] :=  [false : for int i in 0 .. FB_SIZE - 1];
	
	bool needNewPict[FB_SIZE] := [true : for int i in 0 .. FB_SIZE - 1];
    
    
	@optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_orcc")
    procedure getmvinfo_dpb_luma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][DPB_LUM_HEIGHT][DPB_LUM_WIDTH],
  	      uint(size= 8) RefCu[(64 + 7) * (64 + 7)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset,
  	      uint(size=16) width,
		  uint(size=16) height)
    begin
      foreach int y in 0 .. sideMax - 1
	  	do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBufferTmp[idx][y+yOffset][x+xOffset];
			end
		end
    end

	/** Getting informations from new slice/picture. Updating these informations **/
	isNewSlice.d0: action IsReadOrNewSlice0:[isRead], PictSize0:[picWidthInPix,
		picHeightInPix], Poc0:[poc], LcuSizeMax0:[log2LcuSize], IsPicSlc0:[isPicSlc] ==>
	guard
		isRead = 0,
		isPicSlc = 1
	do	
		lcuSizeMax := 1 << log2LcuSize;
		isRef[0] := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList[0] := 0;
	end
	
	isNewPict.d0: action IsReadOrNewSlice0:[isRead], PictSize0:[picWidthInPix,
					  picHeightInPix], Poc0:[poc], ReorderPics:[noOutputOfPriorPicsFlag, 
					  spsNumReorderPics, picOutputFlag, videoSequenceId] 
					  ,LcuSizeMax0:[log2LcuSize], IsPicSlc0:[isPicSlc] ==>
	guard
		isRead = 0,
		isPicSlc = 0,
		needNewPict[0] = true,
		not needReset[0]
	do
		needNewPict[0] := false;
		lcuSizeMax := 1 << log2LcuSize;
//		println("Dpb ; Pict num "+pictNum);
		pictNum := pictNum + 1;
		picSizeInCu[0] := (picWidthInPix+lcuSizeMax-1)>>log2LcuSize;
		picSizeInCu[1] := (picHeightInPix+lcuSizeMax-1)>>log2LcuSize;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		
		xIdx[0] := 0;
		yIdx[0] := 0;
		
		// Find the next available buffer
		currIdx := 0;
		while isRef[0][currIdx] 
				or isRef[1][currIdx] 
				or not isSent[currIdx] do
			currIdx := currIdx + 1;
			if currIdx = DPB_SIZE then currIdx := 0; end
		end
		
		readingPoc[0] := poc;
		isRef[0] := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList[0] := 0;
		
		pocDone[readingPoc[0] & 31] := false;
		cuHeightDone[readingPoc[0] & 31] := BORDER_SIZE_LUM;
		pocIndex[readingPoc[0] & 31] := currIdx;
		pocRef[currIdx] := readingPoc[0];
		
		if noOutputOfPriorPicsFlag = 1 then
			// Flush the queue of next displayed frames
			sendingPoc := poc;
			numAvailablePic := 0;
			isSent := [true : for int i in 0 .. DPB_SIZE-1];
			skip := [false : for int i in 0 .. DPB_SIZE-1];
		end
		
		isSent[currIdx] := false;
		
		if picOutputFlag = 1 then
			skip[currIdx] := false;
		else
			skip[currIdx] := true;
		end
		
		// Number of frames needed to display 
		numReorderPic := spsNumReorderPics;
		
		if videoSequenceId = seqIdOutput then 
			// Always display the frame with the smallest poc
			if readingPoc[0] < sendingPoc then 
				sendingPoc := readingPoc[0];
			end
		else
			needReset[0] := true;
			if DEBUG_DPB then 
				println("Dpb ; need reset");
			end
		end
		
		if DEBUG_DPB then 
			println("Dpb ; reading " + readingPoc[0] + " (" + pocIndex[readingPoc[0] & 31] + ")");
			println("Dpb ; noOutputOfPriorPicsFlag "+noOutputOfPriorPicsFlag);
			println("Dpb ; numReorderPic "+numReorderPic);
			println("Dpb ; picOutputFlag "+picOutputFlag);
			println("Dpb ; videoSequenceId "+videoSequenceId);
		end
	end
	
	/** Getting informations from new slice/picture. Updating these informations **/
	isNewSlice.d1: action IsReadOrNewSlice1:[isRead], PictSize1:[picWidthInPix,
		picHeightInPix], Poc1:[poc], LcuSizeMax1:[log2LcuSize], IsPicSlc1:[isPicSlc] ==>
	guard
		isRead = 0,
		isPicSlc = 1
	do	
		lcuSizeMax := 1 << log2LcuSize;
		isRef[1] := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList[1] := 0;
	end
	
	isNewPict.d1: action IsReadOrNewSlice1:[isRead], PictSize1:[picWidthInPix,
					  picHeightInPix], Poc1:[poc], ReorderPics:[noOutputOfPriorPicsFlag, 
					  spsNumReorderPics, picOutputFlag, videoSequenceId] 
					  ,LcuSizeMax1:[log2LcuSize], IsPicSlc1:[isPicSlc] ==>
	guard
		isRead = 0,
		isPicSlc = 0,
		needNewPict[1] = true,
		not needReset[1]
	do
		needNewPict[1] := false;
		lcuSizeMax := 1 << log2LcuSize;
		//println("Dpb ; Pict num "+pictNum);
		pictNum := pictNum + 1;
		picSizeInCu[0] := (picWidthInPix+lcuSizeMax-1)>>log2LcuSize;
		picSizeInCu[1] := (picHeightInPix+lcuSizeMax-1)>>log2LcuSize;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		
		xIdx[1] := 0;
		yIdx[1] := 0;
		
		// Find the next available buffer
		currIdx := 0;
		while isRef[0][currIdx] 
				or isRef[1][currIdx] 
				or not isSent[currIdx] do
			currIdx := currIdx + 1;
			if currIdx = DPB_SIZE then currIdx := 0; end
		end
		
		readingPoc[1] := poc;
		isRef[1] := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList[1] := 0;
		
		pocDone[readingPoc[1] & 31] := false;
		cuHeightDone[readingPoc[1] & 31] := BORDER_SIZE_LUM;
		pocIndex[readingPoc[1] & 31] := currIdx;
		pocRef[currIdx] := readingPoc[1];
		
		if noOutputOfPriorPicsFlag = 1 then
			// Flush the queue of next displayed frames
			sendingPoc := poc;
			numAvailablePic := 0;
			isSent := [true : for int i in 0 .. DPB_SIZE-1];
			skip := [false : for int i in 0 .. DPB_SIZE-1];
		end
		
		isSent[currIdx] := false;
		
		if picOutputFlag = 1 then
			skip[currIdx] := false;
		else
			skip[currIdx] := true;
		end
		
		// Number of frames needed to display 
		numReorderPic := spsNumReorderPics;
		
		if videoSequenceId = seqIdOutput then 
			// Always display the frame with the smallest poc
			if readingPoc[1] < sendingPoc then 
				sendingPoc := readingPoc[1];
			end
		else 
			needReset[1] := true;
			if DEBUG_DPB then 
				println("Dpb ; need reset");
			end
		end
		
		if DEBUG_DPB then 
			println("Dpb ; reading " + readingPoc[1] + " (" + pocIndex[readingPoc[1] & 31] + ")");
			println("Dpb ; noOutputOfPriorPicsFlag "+noOutputOfPriorPicsFlag);
			println("Dpb ; numReorderPic "+numReorderPic);
			println("Dpb ; picOutputFlag "+picOutputFlag);
			println("Dpb ; videoSequenceId "+videoSequenceId);
		end
	end
	
	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	getRps.d0.launch: action RpsPoc0:[numPic]==>
	guard
		nbList[0] < 5
	do
		sizeOfList[0] := numPic;
	end
	
	getRps.d0.done: action ==>
	guard
		nbList[0] = 5
	do
		isRef[0][currIdx]:= true;
		
		if DEBUG_DPB then
			print("isRef = ");
			foreach int i in 0 .. DPB_SIZE-1 do
				print(isRef[0][i]);
			end
			println();
		end
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	getRpsPoc.d0.launch: action RpsPoc0:[pocVal] ==>
	guard
		sizeOfList[0] > 0
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if pocRef[i] = pocVal then
				isRef[0][i] := true;
			end
		end

		sizeOfList[0] := sizeOfList[0] - 1;
	end

	getRpsPoc.d0.done: action ==>
	guard
		sizeOfList[0] = 0
	do
		nbList[0] := nbList[0] + 1;
	end
	
	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	getRps.d1.launch: action RpsPoc1:[numPic]==>
	guard
		nbList[1] < 5
	do
		sizeOfList[1] := numPic;
	end
	
	getRps.d1.done: action ==>
	guard
		nbList[1] = 5
	do
		isRef[1][currIdx]:= true;
		
		if DEBUG_DPB then
			print("isRef = ");
			foreach int i in 0 .. DPB_SIZE-1 do
				print(isRef[1][i]);
			end
			println();
		end
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	getRpsPoc.d1.launch: action RpsPoc1:[pocVal] ==>
	guard
		sizeOfList[1] > 0
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if pocRef[i] = pocVal then
				isRef[1][i] := true;
			end
		end

		sizeOfList[1] := sizeOfList[1] - 1;
	end

	getRpsPoc.d1.done: action ==>
	guard
		sizeOfList[1] = 0
	do
		nbList[1] := nbList[1] + 1;
	end
////////////////////////////////////////getCuPix 0 ///////////////////////////////////////////////////
	/* We get the whole Cu decoded (luma and chroma components) and we save
	 * it in the Dpb (pictureBuffer).
	 */
	getCuPix.d0.launch.x64.y: action Sample0:[samp] repeat 64*64 ==>
	guard
		yIdx[0] < picSizeInCu[1], 
		lcuSizeMax = 64,
		not needReset[0]
	do
		copy_cu_dpb_luma_x64_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_LUM + xIdx[0]*64,
  	      BORDER_SIZE_LUM + yIdx[0]*64,
  	      pocIndex[readingPoc[0] & 31],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
		
		xIdx[0] := xIdx[0] + 1;
		if(xIdx[0] = picSizeInCu[0]) then
			xIdx[0] := 0;
			yIdx[0] := yIdx[0] + 1;
			cuHeightDone[readingPoc[0] & 31] := cuHeightDone[readingPoc[0] & 31] + 64;
		end
	end
	
	getCuPix.d0.launch.x32.y: action Sample0:[samp] repeat 32*32 ==>
	guard
		yIdx[0] < picSizeInCu[1], 
		lcuSizeMax = 32,
		not needReset[0]
	do
		copy_cu_dpb_luma_x32_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_LUM + xIdx[0]*32,
  	      BORDER_SIZE_LUM + yIdx[0]*32,
  	      pocIndex[readingPoc[0] & 31],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
		
		xIdx[0] := xIdx[0] + 1;
		if(xIdx[0] = picSizeInCu[0]) then
			xIdx[0] := 0;
			yIdx[0] := yIdx[0] + 1;
			cuHeightDone[readingPoc[0] & 31] := cuHeightDone[readingPoc[0] & 31] + 32;
		end
	end
	
	getCuPix.d0.launch.x16.y: action Sample0:[samp] repeat 16*16 ==>
	guard
		yIdx[0] < picSizeInCu[1], 
		lcuSizeMax = 16,
		not needReset[0]
	do
		copy_cu_dpb_luma_x16_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_LUM + xIdx[0]*16,
  	      BORDER_SIZE_LUM + yIdx[0]*16,
  	      pocIndex[readingPoc[0] & 31],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
		
		xIdx[0] := xIdx[0] + 1;
		if(xIdx[0] = picSizeInCu[0]) then
			xIdx[0] := 0;
			yIdx[0] := yIdx[0] + 1;
			cuHeightDone[readingPoc[0] & 31] := cuHeightDone[readingPoc[0] & 31] + 16;
		end
	end
	
	getCuPix.d0.done: action ==> Vid:[counter]
	guard
		yIdx[0] = picSizeInCu[1],
		needNewPict[0] = false,
		not needReset[0]
	do
		fillBorder_luma_cal(
			pictureBuffer,
			pocIndex[readingPoc[0] & 31],
			picSize[0],
			picSize[1],
			BORDER_SIZE_LUM);
		
		pocDone[readingPoc[0] & 31] := true;
		cuHeightDone[readingPoc[0] & 31] := cuHeightDone[readingPoc[0] & 31] + BORDER_SIZE_LUM;
		numAvailablePic := numAvailablePic + 1;
		
		if DEBUG_DPB then
			print("isSent = ");
			foreach int i in 0 .. DPB_SIZE-1 do
				print(isSent[i]);
			end
			println();
		end
		counter := counter + 1;
		needNewPict[0] := true;
	end
	////////////////////////////////////////getCuPix 1 ///////////////////////////////////////////////////
	getCuPix.d1.launch.x64.y: action Sample1:[samp] repeat 64*64 ==>
	guard
		yIdx[1] < picSizeInCu[1], 
		lcuSizeMax = 64,
		not needReset[1]
	do
		copy_cu_dpb_luma_x64_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_LUM + xIdx[1]*64,
  	      BORDER_SIZE_LUM + yIdx[1]*64,
  	      pocIndex[readingPoc[1] & 31],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
		
		xIdx[1] := xIdx[1] + 1;
		if(xIdx[1] = picSizeInCu[0]) then
			xIdx[1] := 0;
			yIdx[1] := yIdx[1] + 1;
			cuHeightDone[readingPoc[1] & 31] := cuHeightDone[readingPoc[1] & 31] + 64;
		end
	end
	
	getCuPix.d1.launch.x32.y: action Sample1:[samp] repeat 32*32 ==>
	guard
		yIdx[1] < picSizeInCu[1], 
		lcuSizeMax = 32,
		not needReset[1]
	do
		copy_cu_dpb_luma_x32_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_LUM + xIdx[1]*32,
  	      BORDER_SIZE_LUM + yIdx[1]*32,
  	      pocIndex[readingPoc[1] & 31],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
		
		xIdx[1] := xIdx[1] + 1;
		if(xIdx[1] = picSizeInCu[0]) then
			xIdx[1] := 0;
			yIdx[1] := yIdx[1] + 1;
			cuHeightDone[readingPoc[1] & 31] := cuHeightDone[readingPoc[1] & 31] + 32;
		end
	end
	
	getCuPix.d1.launch.x16.y: action Sample1:[samp] repeat 16*16 ==>
	guard
		yIdx[1] < picSizeInCu[1], 
		lcuSizeMax = 16,
		not needReset[1]
	do
		copy_cu_dpb_luma_x16_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_LUM + xIdx[1]*16,
  	      BORDER_SIZE_LUM + yIdx[1]*16,
  	      pocIndex[readingPoc[1] & 31],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
		
		xIdx[1] := xIdx[1] + 1;
		if(xIdx[1] = picSizeInCu[0]) then
			xIdx[1] := 0;
			yIdx[1] := yIdx[1] + 1;
			cuHeightDone[readingPoc[1] & 31] := cuHeightDone[readingPoc[1] & 31] + 16;
		end
	end
	
	int counter := 0;
	
	getCuPix.d1.done: action ==> Vid:[counter]
	guard
		yIdx[1] = picSizeInCu[1],
		needNewPict[1] = false,
		not needReset[1]
	do
		//println("getCuDone_1 ");
		fillBorder_luma_cal(
			pictureBuffer,
			pocIndex[readingPoc[1] & 31],
			picSize[0],
			picSize[1],
			BORDER_SIZE_LUM);
		
		pocDone[readingPoc[1] & 31] := true;
		cuHeightDone[readingPoc[1] & 31] := cuHeightDone[readingPoc[1] & 31] + BORDER_SIZE_LUM;
		numAvailablePic := numAvailablePic + 1;
		
		if DEBUG_DPB then
			print("isSent = ");
			foreach int i in 0 .. DPB_SIZE-1 do
				print(isSent[i]);
			end
			println();
		end
		counter := counter + 1;
		needNewPict[1] := true;
	end
	
	////////////////////////////////////////end GetCuPix ////////////////////////////////////////////////
	sendCuPix.launch.x64: action ==> 
		
	guard
		sendPict,
		sendy < picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic 
			|| needReset[0] || needReset[1],
		numAvailablePic > 0,
		lcuSizeMax = 64
	
	do
		
		
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.launch.x32: action ==> 
		
	guard
		sendPict,
		sendy < picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic 
			|| needReset[0] || needReset[1],
		numAvailablePic > 0,
		lcuSizeMax = 32
	
		
	do
		
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.launch.x16: action ==> 
		
	guard
		sendPict,
		sendy < picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic 
			|| needReset[0] || needReset[1],
		numAvailablePic > 0,
		lcuSizeMax = 16
	
	do
		
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.done: action ==>
	guard
	 	sendPict,
		sendy = picSizeInCu[1],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic 
			|| needReset[0] || needReset[1],
		numAvailablePic > 0
	do
		//println("sendCuDone_1 ");
		sendx := 0;
		sendy := 0;
		
		if DEBUG_DPB then 
			println("Dpb ; sent " + sendingPoc + " (" + pocIndex[sendingPoc & 31] + ")");
		end
		
		isSent[pocIndex[sendingPoc & 31]] := true;
		sendingPoc := sendingPoc + 1;
		numAvailablePic := numAvailablePic - 1;
		
	end
	
	sendCuPix.done.next: action ==> Done: [1]
	guard
	 	not sendPict,
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic 
			|| needReset[0] || needReset[1],
		numAvailablePic > 0
	do
		//println("sendCuDone_1 ");
		sendx := 0;
		sendy := 0;
		
		if DEBUG_DPB then 
			println("Dpb ; sent " + sendingPoc + " (" + pocIndex[sendingPoc & 31] + ")");
		end
		
		isSent[pocIndex[sendingPoc & 31]] := true;
		sendingPoc := sendingPoc + 1;
		numAvailablePic := numAvailablePic - 1;
		
	end
	
	sendCuPix.reset: action ==>
	guard
		needReset[0],
		needReset[1],
		numAvailablePic = 0
	do
		// Reset the DPB
		if DEBUG_DPB then 
			println("Dpb ; reset");
		end
		seqIdOutput := seqIdOutput + 1;
		needReset := [false : for int i in 0 .. FB_SIZE-1];
		sendingPoc := 0;
	end
	
	sendCuPix.skip: action ==>
	guard
		skip[pocIndex[sendingPoc & 31]],
		pocDone[sendingPoc & 31],
		numAvailablePic >= numReorderPic 
			|| needReset[0] || needReset[1],
		numAvailablePic > 0
	do
		if DEBUG_DPB then 
			println("Dpb ; skip " + sendingPoc + " (" + pocIndex[sendingPoc & 31] + ")");
		end
		
		isSent[pocIndex[sendingPoc & 31]] := true;
		skip[pocIndex[sendingPoc & 31]] := false;
		sendingPoc := sendingPoc + 1;
		numAvailablePic := numAvailablePic - 1;
	end

//////////////////////////////////////// getMVInfo 0 /////////////////////////////////////////////////////
	getMvInfo.d0.launch.is64: action 
		IsReadOrNewSlice0:[isRead],
		PocRef0:[poc], PredCuSize0:[predCuSize], Mv0:[mv] repeat 2 
		==> 
		RefSample0:[refCu] repeat (64+7)*(64+7)
	guard
		isRead = 1,
		predCuSize = 64,
		computeMvHeightLuma(mv[1], picSize[1], 64) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 64,
		uint(size=8)  refCu[(64+7)*(64+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);

		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 7, 
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d0.launch.is32: action 
		IsReadOrNewSlice0:[isRead],
		PocRef0:[poc], PredCuSize0:[predCuSize], Mv0:[mv] repeat 2 
		==> 
		RefSample0:[refCu] repeat (32+7)*(32+7)
	guard
		isRead = 1,
		predCuSize = 32,
		computeMvHeightLuma(mv[1], picSize[1], 32) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 32,
		uint(size=8)  refCu[(32+7)*(32+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);
		
		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31],
  	      sideMax + 7,
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d0.launch.is16: action 
		IsReadOrNewSlice0:[isRead],
		PocRef0:[poc], PredCuSize0:[predCuSize], Mv0:[mv] repeat 2 
		==> 
		RefSample0:[refCu] repeat (16+7)*(16+7)
	guard
		isRead = 1,
		predCuSize = 16,
		computeMvHeightLuma(mv[1], picSize[1], 16) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 16,
		uint(size=8)  refCu[(16+7)*(16+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);
		
		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 7, 
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d0.launch.is8: action 
		IsReadOrNewSlice0:[isRead],
		PocRef0:[poc], PredCuSize0:[predCuSize], Mv0:[mv] repeat 2 
		==> 
		RefSample0:[refCu] repeat (8+7)*(8+7)
	guard
		isRead = 1,
		predCuSize = 8,
		computeMvHeightLuma(mv[1], picSize[1], 8) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 8,
		uint(size=8)  refCu[(8+7)*(8+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);

		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 7, 
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d0.launch.is4: action 
		IsReadOrNewSlice0:[isRead],
		PocRef0:[poc], PredCuSize0:[predCuSize], Mv0:[mv] repeat 2 
		==> 
		RefSample0:[refCu] repeat (4+7)*(4+7)
	guard
		isRead = 1,
		predCuSize = 4,
		computeMvHeightLuma(mv[1], picSize[1], 4) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 4,
		uint(size=8)  refCu[(4+7)*(4+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);
		
		foreach int y in 0 .. sideMax+7 -1
		do
			foreach int x in 0 .. sideMax+7 -1
			do
				refCu[x+y*(sideMax+7)] := 
					pictureBuffer[pocIndex[poc & 31]][y+mvOffset[1]][x+mvOffset[0]];
			end
		end
		
	end
	
//////////////////////////////////////// getMVInfo 1 /////////////////////////////////////////////////////

	getMvInfo.d1.launch.is64: action 
		IsReadOrNewSlice1:[isRead],
		PocRef1:[poc], PredCuSize1:[predCuSize], Mv1:[mv] repeat 2 
		==> 
		RefSample1:[refCu] repeat (64+7)*(64+7)
	guard
		isRead = 1,
		predCuSize = 64,
		computeMvHeightLuma(mv[1], picSize[1], 64) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 64,
		uint(size=8)  refCu[(64+7)*(64+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);

		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 7, 
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d1.launch.is32: action 
		IsReadOrNewSlice1:[isRead],
		PocRef1:[poc], PredCuSize1:[predCuSize], Mv1:[mv] repeat 2 
		==> 
		RefSample1:[refCu] repeat (32+7)*(32+7)
	guard
		isRead = 1,
		predCuSize = 32,
		computeMvHeightLuma(mv[1], picSize[1], 32) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 32,
		uint(size=8)  refCu[(32+7)*(32+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);
		
		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31],
  	      sideMax + 7,
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d1.launch.is16: action 
		IsReadOrNewSlice1:[isRead],
		PocRef1:[poc], PredCuSize1:[predCuSize], Mv1:[mv] repeat 2 
		==> 
		RefSample1:[refCu] repeat (16+7)*(16+7)
	guard
		isRead = 1,
		predCuSize = 16,
		computeMvHeightLuma(mv[1], picSize[1], 16) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 16,
		uint(size=8)  refCu[(16+7)*(16+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);
		
		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 7, 
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d1.launch.is8: action 
		IsReadOrNewSlice1:[isRead],
		PocRef1:[poc], PredCuSize1:[predCuSize], Mv1:[mv] repeat 2 
		==> 
		RefSample1:[refCu] repeat (8+7)*(8+7)
	guard
		isRead = 1,
		predCuSize = 8,
		computeMvHeightLuma(mv[1], picSize[1], 8) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 8,
		uint(size=8)  refCu[(8+7)*(8+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);

		getmvinfo_dpb_luma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 7, 
  	      mvOffset[0],
  	      mvOffset[1],
  	      DPB_LUM_WIDTH,
  	      DPB_LUM_HEIGHT);
  	      
	end
	
	getMvInfo.d1.launch.is4: action 
		IsReadOrNewSlice1:[isRead],
		PocRef1:[poc], PredCuSize1:[predCuSize], Mv1:[mv] repeat 2 
		==> 
		RefSample1:[refCu] repeat (4+7)*(4+7)
	guard
		isRead = 1,
		predCuSize = 4,
		computeMvHeightLuma(mv[1], picSize[1], 4) <= cuHeightDone[poc & 31]
	var
		int (size=32) mvOffset[2],
		uint(size=7)  sideMax = 4,
		uint(size=8)  refCu[(4+7)*(4+7)]
	do
		computeMvOffsetLuma(mvOffset, mv, picSize, sideMax);
		
		foreach int y in 0 .. sideMax+7 -1
		do
			foreach int x in 0 .. sideMax+7 -1
			do
				refCu[x+y*(sideMax+7)] := 
					pictureBuffer[pocIndex[poc & 31]][y+mvOffset[1]][x+mvOffset[0]];
			end
		end
		
	end

	
//////////////////////////////////////// end getMVInfo  /////////////////////////////////////////////////////

	schedule fsm ManageCu:
		ManageCu (isNewPict.d0        )--> GetRps;

		ManageCu (isNewSlice.d0        )--> GetRps;
		ManageCu (getCuPix.d0.launch   )--> ManageCu;
		ManageCu (getCuPix.d0.done     )--> ManageCu;
		ManageCu (sendCuPix            )--> ManageCu;
		ManageCu (getMvInfo.d0.launch )--> ManageCu;
		
		GetRps (getRps.d0.launch )--> GetRpsPoc;
		GetRps (getRps.d0.done   )--> ManageCu;
		GetRpsPoc (getRpsPoc.d0.launch )--> GetRpsPoc;
		GetRpsPoc (getRpsPoc.d0.done   )--> GetRps;
		
		
		/////////////////////////////////////////////
		
		
		ManageCu (isNewPict.d1        )--> GetRps1;

		ManageCu (isNewSlice.d1        )--> GetRps;
		ManageCu (getCuPix.d1.launch   )--> ManageCu;
		ManageCu (getCuPix.d1.done     )--> ManageCu;
		//ManageCu (sendCuPix            )--> ManageCu;
		ManageCu (getMvInfo.d1.launch )--> ManageCu;
		
		GetRps1 (getRps.d1.launch )--> GetRpsPoc1;
		GetRps1 (getRps.d1.done   )--> ManageCu;
		GetRpsPoc1 (getRpsPoc.d1.launch )--> GetRpsPoc1;
		GetRpsPoc1 (getRpsPoc.d1.done   )--> GetRps1;
	end
	priority
		sendCuPix > getCuPix > getMvInfo > isNewSlice;
		sendCuPix > isNewPict;
		sendCuPix.skip > sendCuPix.launch > sendCuPix.done;
	end
end
