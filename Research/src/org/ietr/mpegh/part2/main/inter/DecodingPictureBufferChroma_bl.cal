/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * This actor is a picture buffer containing all reference pictures. It sends
 *		samples needed for the inter prediction
 * 
 * 
 * @input IsBiPred : Indicates when the current CU is using Bi-prediction.
 * 
 * @input IsReadOrNewSlc : Indicates if samples are asked from the current RPS
 *		or if there is a new picture.
 * 
 * @input Mv : movement vectors of the current CU.
 * 
 * @input PicSize : size of the current picture.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @output PocRef : POC used for the prediction of the current CU.
 * 
 * @input PredCuSize : Size of the largest side of the current CU.
 * 
 * @input Sample : Samples from the Inloop filter. It represents the pixels
 * 		which will be displayed.
 * 
 * 
 * @output Sample : Samples needed for the inter prediction.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
package org.ietr.mpegh.part2.main.inter;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

import org.sc29.wg11.mpegh.part2.main.inter.DecodingPictureBufferFunctions.*;
import org.ietr.mpegh.part2.main.upSampling.UpSamplingFunctions.*;

actor DecodingPictureBufferChroma_bl ()
	uint(size=2)  IsPicSlc,
	uint(size=8)  LcuSizeMax,
	uint(size=1)  IsReadOrNewSlice,
	int (size=32) Mv,
	uint(size=16) PictSize,
	int(size=16)  Poc,
	int (size=16) PocRef,
	uint(size=7)  PredCuSize,
	int (size=16) RpsPoc,
	uint(size=8)  ReorderPics,
	uint(size=8)  Sample,
	uint(size=32) NeedUpsampleCoords
		==>
	uint(size=8)  RefSample,
	uint(size=8)  BlkToEL,
	uint(size=8)  VID,
	uint(size=8)  VID_BL
		:

	uint(size=8)  pictureBuffer[DPB_SIZE][DPB_CHR_HEIGHT][DPB_CHR_WIDTH];
	int (size=16) pocIndex[32];
	int (size=16) pocRef[DPB_SIZE] := [-1 : for int i in 0 .. DPB_SIZE-1];

	int(size=8)  currIdx := -1;
	int(size=8)  lastIdx := -1;
	uint(size=6)  picSizeInCu[2];
	uint(size=16) picSize[2];
	uint(size=6)  xIdx;
	uint(size=6)  yIdx;
	uint          pictNum;
	int           numReorderPic;
	int           numAvailablePic := 0;

	bool          isSent[DPB_SIZE] := [true : for int i in 0 .. DPB_SIZE-1];
	bool          skip[DPB_SIZE] := [false : for int i in 0 .. DPB_SIZE-1];
	bool          isRef[DPB_SIZE];
	uint(size=3)  nbList;
	uint(size=3)  sizeOfList;
	
	bool pocDone[32] := [false : for int i in 0 .. 31];
	int sendingPoc := 0;
	int readingPoc := -1;
	uint sendx := 0;
	uint sendy := 0;
	uint(size=8) lcuSizeMax;
	
	uint(size=8) seqIdOutput := 1;
	uint(size=8) seqIdDecode := 1;
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="getmvinfo_dpb_orcc")
    procedure getmvinfo_dpb_chroma_cal(
  	      uint(size= 8) pictureBufferTmp[DPB_SIZE][DPB_CHR_HEIGHT][DPB_CHR_WIDTH],
  	      uint(size= 8) RefCu[(32 + 3) * (32 + 3)],
  	      uint(size= 3) idx,
  	      uint(size= 8) sideMax, 
  	      int (size=32) xOffset,
  	      int (size=32) yOffset,
  	      uint(size=16) width,
		  uint(size=16) height)
    begin
      foreach int y in 0 .. sideMax - 1
		do
			foreach int x in 0 .. sideMax - 1
			do
				RefCu[x+y*(sideMax)] := pictureBuffer[idx][y+yOffset][x+xOffset];
			end
		end
    end
	
	/** Getting informations from new slice/picture. Updating these informations **/
	isNewSlice: action IsReadOrNewSlice:[isRead], PictSize:[picWidthInPix,
		picHeightInPix], Poc:[poc], LcuSizeMax:[log2LcuSize], IsPicSlc:[isPicSlc] ==>
	guard
		/* Fix me : We should know when there is a new picture */
		isRead = 0,
		isPicSlc = 1
	do	
		lcuSizeMax := 1 << log2LcuSize;
		isRef := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList := 0;
	end
	
	isNewPict: action IsReadOrNewSlice:[isRead], PictSize:[picWidthInPix,
					  picHeightInPix], Poc:[poc], ReorderPics:[noOutputOfPriorPicsFlag, 
					  spsNumReorderPics, picOutputFlag, videoSequenceId] 
					  ,LcuSizeMax:[log2LcuSize], IsPicSlc:[isPicSlc] ==>
	guard
		isRead = 0,
		isPicSlc = 0
	do
		lcuSizeMax := 1 << log2LcuSize;
//		println("Dpb ; Pict num "+pictNum);
		pictNum := pictNum + 1;
		picSizeInCu[0] := (picWidthInPix+lcuSizeMax-1) >> log2LcuSize;
		picSizeInCu[1] := (picHeightInPix+lcuSizeMax-1) >> log2LcuSize;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		xIdx := 0;
		yIdx := 0;
		
		lastIdx := currIdx;
		// Find the next available buffer
		currIdx := 0;
		while isRef[currIdx] or not isSent[currIdx] do
			currIdx := currIdx + 1;
			if currIdx = DPB_SIZE then currIdx := 0; end
		end
		
		readingPoc := poc;
		isRef := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList := 0;
		
		pocDone[readingPoc & 31] := false;
		pocIndex[readingPoc & 31] := currIdx;
		pocRef[currIdx] := readingPoc;
		
		if noOutputOfPriorPicsFlag = 1 then
			// Flush the queue of next displayed frames
			sendingPoc := poc;
			numAvailablePic := 0;
			isSent := [true : for int i in 0 .. DPB_SIZE-1];
			skip := [false : for int i in 0 .. DPB_SIZE-1];
		end
		
		isSent[currIdx] := false;
		
		if picOutputFlag = 1 then
			skip[currIdx] := false;
		else
			skip[currIdx] := true;
		end
		
		// Number of frames needed to display 
		numReorderPic := spsNumReorderPics;
		
		seqIdDecode := videoSequenceId;
		
		if seqIdDecode = seqIdOutput then 
			// Always display the frame with the smallest poc
			if readingPoc < sendingPoc then 
				sendingPoc := readingPoc;
			end
		end
		
	end
	
	isNewPict_lastPict: action IsReadOrNewSlice:[isRead], PictSize:[picWidthInPix,
					  picHeightInPix], Poc:[poc], ReorderPics:[noOutputOfPriorPicsFlag, 
					  spsNumReorderPics, picOutputFlag, videoSequenceId] 
					  ,LcuSizeMax:[log2LcuSize], IsPicSlc:[isPicSlc] ==>
	guard // case stream with only 1 frame
		isRead = 0,
		lastIdx = -1 and videoSequenceId > 1,
		isPicSlc = 0
	do
		sendx := 0;
		sendy := 0;
		lcuSizeMax := 1 << log2LcuSize;
//		println("Dpb ; Pict num "+pictNum);
		pictNum := pictNum + 1;
		picSizeInCu[0] := (picWidthInPix+lcuSizeMax-1) >> log2LcuSize;
		picSizeInCu[1] := (picHeightInPix+lcuSizeMax-1) >> log2LcuSize;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		xIdx := 0;
		yIdx := 0;
		nbList := 0;
		readingPoc := poc;
		isRef := [false: for int i in 0 .. DPB_SIZE - 1];
		nbList := 0;
		
		pocDone[readingPoc & 31] := false;
		pocIndex[readingPoc & 31] := currIdx;
		pocRef[currIdx] := readingPoc;
		
		if noOutputOfPriorPicsFlag = 1 then
			// Flush the queue of next displayed frames
			sendingPoc := poc;
			numAvailablePic := 0;
			isSent := [true : for int i in 0 .. DPB_SIZE-1];
			skip := [false : for int i in 0 .. DPB_SIZE-1];
		end
		
		isSent[currIdx] := false;
		
		if picOutputFlag = 1 then
			skip[currIdx] := false;
		else
			skip[currIdx] := true;
		end
		
		// Number of frames needed to display 
		numReorderPic := spsNumReorderPics;
		
		seqIdDecode := videoSequenceId;
		
		if seqIdDecode = seqIdOutput then 
			// Always display the frame with the smallest poc
			if readingPoc < sendingPoc then 
				sendingPoc := readingPoc;
			end
		end

	end
	
	/** We get all the references from the 5 lists of the Rps
	 * (StCurrentBefore, StCurrentAfter, StFollowing, LtCurrent, LtFollowing)
	 **/
	getRps.launch: action RpsPoc:[numPic]==>
	guard
		nbList < 5
	do
		sizeOfList := numPic;
	end
	
	getRps.done: action ==>
	guard
		nbList = 5
	do
		isRef[currIdx]:= true;
	end

	/** For each we check the index of the reference poc
	 * (in order to not remove them from the Dpb).
	 **/
	getRpsPoc.launch: action RpsPoc:[pocVal] ==>
	guard
		sizeOfList > 0
	do
		foreach int i in 0 .. DPB_SIZE - 1
		do
			if pocRef[i] = pocVal then
				isRef[i] := true;
			end
		end

		sizeOfList := sizeOfList - 1;
	end

	getRpsPoc.done: action ==>
	guard
		sizeOfList = 0
	do
		nbList := nbList + 1;
	end

	/* We get the whole Cu decoded (luma and chroma components) and we save
	 * it in the Dpb (pictureBuffer).
	 */
	getCuPix.launch.x64: action Sample:[samp] repeat 32*32 ==>
	guard
		yIdx < picSizeInCu[1], lcuSizeMax = 64
	do
		copy_cu_dpb_chroma_x64_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_CHR + xIdx*32,
  	      BORDER_SIZE_CHR + yIdx*32,
  	      pocIndex[readingPoc & 31],
  	      DPB_CHR_WIDTH,
  	      DPB_CHR_HEIGHT);
		
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end
	
	getCuPix.launch.x32: action Sample:[samp] repeat 16*16 ==>
	guard
		yIdx < picSizeInCu[1], lcuSizeMax = 32
	do		
		copy_cu_dpb_chroma_x32_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_CHR + xIdx*16,
  	      BORDER_SIZE_CHR + yIdx*16,
  	      pocIndex[readingPoc & 31],
  	      DPB_CHR_WIDTH,
  	      DPB_CHR_HEIGHT);
		
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end
	
	getCuPix.launch.x16: action Sample:[samp] repeat 8*8 ==>
	guard
		yIdx < picSizeInCu[1], lcuSizeMax = 16
	do		
		copy_cu_dpb_chroma_x16_cal(
          samp,
  	      pictureBuffer,
  	      BORDER_SIZE_CHR + xIdx*8,
  	      BORDER_SIZE_CHR + yIdx*8,
  	      pocIndex[readingPoc & 31],
  	      DPB_CHR_WIDTH,
  	      DPB_CHR_HEIGHT);
		
		xIdx := xIdx + 1;
		if(xIdx = picSizeInCu[0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
		end
	end
	
	getCuPix.done: action ==>
	guard
		yIdx = picSizeInCu[1]
	do
		/* Fill in chroma border */
		fillBorder_chroma_cal(
			pictureBuffer,
			pocIndex[readingPoc & 31],
			picSize[0] / 2,
			picSize[1] / 2,
			BORDER_SIZE_CHR);
		
		pocDone[readingPoc & 31] := true;
		numAvailablePic := numAvailablePic + 1;
		yIdx := 0;
	end
	
	sendBL.x32: action ==> VID_BL:[cu] repeat 16*16 //TODO: add other CU sizes 
	guard
		sendy < picSizeInCu[1]
	var
		uint (size=8) cu[16*16]
	do
		foreach int i in 0 .. 15 do	
			foreach int j in 0 .. 15 do
				cu[i*16 + j] := pictureBuffer[pocIndex[readingPoc & 31]][BORDER_SIZE_CHR + sendy * 16+ i][BORDER_SIZE_CHR + sendx * 16 + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendBL_done: action ==>
	guard
		sendy = picSizeInCu[1]
	do
		sendx := 0;
		sendy := 0;
	end
	
	sendCuPix.launch.x64: action ==> VID:[cu] repeat 32*32
	guard
		sendy < picSizeInCu[1],
		(pocDone[sendingPoc & 31]) or (sendingPoc = 0 and (seqIdDecode > 1)),
		numAvailablePic >= numReorderPic || seqIdDecode != seqIdOutput,
		lcuSizeMax = 64
	var
		uint (size=8) cu[32*32]
	do
		foreach int i in 0 .. 31 do	
			foreach int j in 0 .. 31 do
				cu[i*32 + j] := pictureBuffer[pocIndex[sendingPoc & 31]][BORDER_SIZE_CHR + sendy * 32+ i][BORDER_SIZE_CHR + sendx * 32 + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.launch.x32: action ==> VID:[cu] repeat 16*16
	guard
		sendy < picSizeInCu[1],
		(pocDone[sendingPoc & 31]) or (sendingPoc = 0 and (seqIdDecode > 1)),
		numAvailablePic >= numReorderPic || seqIdDecode != seqIdOutput,
		lcuSizeMax = 32
	var
		uint (size=8) cu[16*16]
	do
		foreach int i in 0 .. 15 do	
			foreach int j in 0 .. 15 do
				cu[i*16 + j] := pictureBuffer[pocIndex[sendingPoc & 31]][BORDER_SIZE_CHR + sendy * 16 + i][BORDER_SIZE_CHR + sendx * 16 + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.launch.x16: action ==> VID:[cu] repeat 8*8
	guard
		sendy < picSizeInCu[1],
		(pocDone[sendingPoc & 31]) or (sendingPoc = 0 and (seqIdDecode > 1)),
		numAvailablePic >= numReorderPic || seqIdDecode != seqIdOutput,
		lcuSizeMax = 16
	var
		uint (size=8) cu[8*8]
	do
		foreach int i in 0 .. 7 do	
			foreach int j in 0 .. 7 do
				cu[i*8 + j] := pictureBuffer[pocIndex[sendingPoc & 31]][BORDER_SIZE_CHR + sendy * 8 + i][BORDER_SIZE_CHR + sendx * 8 + j];
			end
		end
			
		sendx := sendx + 1;
		if(sendx = picSizeInCu[0]) then
			sendx := 0;
			sendy := sendy + 1;
		end
	end
	
	sendCuPix.done: action ==>
	guard
		sendy = picSizeInCu[1],
		pocDone[sendingPoc & 31]
	do
		sendx := 0;
		sendy := 0;
		
		isSent[pocIndex[sendingPoc & 31]] := true;
		sendingPoc := sendingPoc + 1;
		numAvailablePic := numAvailablePic - 1;
		
		if seqIdDecode != seqIdOutput then
			// Reset the DPB
			if numAvailablePic = 0 then
				seqIdOutput := seqIdDecode;
				sendingPoc := 0;
			end
		end
	end
	
	sendCuPix.skip: action ==>
	guard
		skip[pocIndex[sendingPoc & 31]]
	do
		isSent[pocIndex[sendingPoc & 31]] := true;
		skip[pocIndex[sendingPoc & 31]] := false;
		sendingPoc := sendingPoc + 1;
		numAvailablePic := numAvailablePic - 1;
	end

	/* We get all the informations needed for sending the reference Cu. We save
	 * these samples in refCu, it will be sent with the actions sendCu.isYxY
	 */
	getMvInfo.is64: action 
		IsReadOrNewSlice:[isRead], PocRef:[poc], PredCuSize:[predCuSize], Mv:[mv] repeat 2 
		==> 
		RefSample:[refCu] repeat (32+3)*(32+3)
	guard
		isRead = 1,
		predCuSize = 64,
		pocDone[poc & 31]
	var
		int (size=32) mvOffChr[2],
		uint(size=7)  sideMax = 32,
		uint(size=8)  refCu[(32+3)*(32+3)]
	do
		computeMvOffsetChroma(mvOffChr, mv, picSize, sideMax);
		
		getmvinfo_dpb_chroma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 3, 
  	      mvOffChr[0],
  	      mvOffChr[1],
  	      DPB_CHR_WIDTH,
  	      DPB_CHR_HEIGHT);
	end
	
	getMvInfo.is32: action 
		IsReadOrNewSlice:[isRead], PocRef:[poc], PredCuSize:[predCuSize], Mv:[mv] repeat 2 
		==> 
		RefSample:[refCu] repeat (16+3)*(16+3)
	guard
		isRead = 1,
		predCuSize = 32,
		pocDone[poc & 31]
	var
		int (size=32) mvOffChr[2],
		uint(size=7)  sideMax = 16,
		uint(size=8)  refCu[(16+3)*(16+3)]
	do
		computeMvOffsetChroma(mvOffChr, mv, picSize, sideMax);
		
		getmvinfo_dpb_chroma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 3, 
  	      mvOffChr[0],
  	      mvOffChr[1],
  	      DPB_CHR_WIDTH,
  	      DPB_CHR_HEIGHT);
	end
	
	getMvInfo.is16: action
		IsReadOrNewSlice:[isRead], PocRef:[poc], PredCuSize:[predCuSize], Mv:[mv] repeat 2 
		==> 
		RefSample:[refCu] repeat (8+3)*(8+3)
	guard
		isRead = 1,
		predCuSize = 16,
		pocDone[poc & 31]
	var
		int (size=32) mvOffChr[2],
		uint(size=7)  sideMax = 8,
		uint(size=8)  refCu[(8+3)*(8+3)]
	do
		computeMvOffsetChroma(mvOffChr, mv, picSize, sideMax);
		
		getmvinfo_dpb_chroma_cal(
  	      pictureBuffer,
  	      refCu,
  	      pocIndex[poc & 31], 
  	      sideMax + 3, 
  	      mvOffChr[0],
  	      mvOffChr[1],
  	      DPB_CHR_WIDTH,
  	      DPB_CHR_HEIGHT);
	end
	
	getMvInfo.is8: action
		IsReadOrNewSlice:[isRead], PocRef:[poc], PredCuSize:[predCuSize], Mv:[mv] repeat 2 
		==> 
		RefSample:[refCu] repeat (4+3)*(4+3)
	guard
		isRead = 1,
		predCuSize = 8,
		pocDone[poc & 31]
	var
		int (size=32) mvOffChr[2],
		uint(size=7)  sideMax = 4,
		uint(size=8)  refCu[(4+3)*(4+3)]
	do
		computeMvOffsetChroma(mvOffChr, mv, picSize, sideMax);
		
		foreach int y in 0 .. sideMax+3 -1
		do
			foreach int x in 0 .. sideMax+3 -1
			do
				refCu[x+y*(sideMax+3)] := 
					pictureBuffer[pocIndex[poc & 31]][y+mvOffChr[1]][x+mvOffChr[0]];
			end
		end
	end
	
	getMvInfo.is4: action
		IsReadOrNewSlice:[isRead], PocRef:[poc], PredCuSize:[predCuSize], Mv:[mv] repeat 2 
		==> 
		RefSample:[refCu] repeat (2+3)*(2+3)
	guard
		isRead = 1,
		predCuSize = 4,
		pocDone[poc & 31]
	var
		int (size=32) mvOffChr[2],
		uint(size=7)  sideMax = 2,
		uint(size=8)  refCu[(2+3)*(2+3)]
	do
		computeMvOffsetChroma(mvOffChr, mv, picSize, sideMax);
		
		foreach int y in 0 .. sideMax+3 -1
		do
			foreach int x in 0 .. sideMax+3 -1
			do
				refCu[x+y*(sideMax+3)] := 
					pictureBuffer[pocIndex[poc & 31]][y+mvOffChr[1]][x+mvOffChr[0]];
			end
		end
	end
	
//	sendToEL: action NeedUpsampleCoords :[x,y] ==> BlkToEL:[buffer] repeat 19*16
//	var
//		uint(size=8) buffer[19*16],
//		uint block_h = 16,
//		uint block_w = 16,
//		uint linesize = 19
////		,
////		int bl_edge_bottom, 
////		int bl_edge_right,
////        int bPbW := ((( ePbW + 1 )*up_filter_inf[2] + up_filter_inf[0]) >> 12) >> 4, /*    FIXME: check if this method is correct  */
////        int bPbH := ((( ePbH + 2 ) *up_filter_inf[3] + up_filter_inf[1]) >> 12) >> 4,
////
////        int bl_x = (( (x0  - sps_pic_conf_win_left_offset) * up_filter_inf[2] + up_filter_inf[0]) >> 12) >> 4,
////        int bl_y = (( (y0  - sps_pic_conf_win_top_offset)  * up_filter_inf[3] + up_filter_inf[1]) >> 12) >> 4,
////        int bl_edge_left   = if (MAX_EDGE - 1 - bl_x ) > 0 then  0 else MAX_EDGE - 1 end,
////        int bl_edge_top    = if (MAX_EDGE - 1 - bl_y ) > 0 then  0 else MAX_EDGE - 1 end
////        int ref_layer_id = nuhLayerID        //int(size=16) tmp0;
//	do
//		// fill refBlock
//		if x >= MAX_EDGE_CR - 1 and (x + MAX_EDGE_CR + block_w) <= picSize[0] then // no neighbours to generate => copy all from frame
//			foreach int i in y .. y+block_w - 1 do
//				foreach int j in (x-3) .. (x+block_w+4) - 1 do
//					buffer[(i-y) * linesize + j - (x-3)]:= pictureBuffer[pocIndex[readingPoc & 31]][i][j];
//				end
//			end
//		else //fill ref block only with block before emulation to fill neighbours
//			foreach int i in y .. y+block_w - 1 do
//				foreach int j in x .. x+block_w - 1 do
//					buffer[(i-y) * linesize + (j - x) + 3]:= pictureBuffer[pocIndex[readingPoc & 31]][i][j];
//				end
//			end
//		// emulate edgeup_h
//			if x < MAX_EDGE_CR - 1 then
//		        foreach int i in 0 .. block_h - 1 do
//		        	foreach int j in 0 .. MAX_EDGE_CR-1 - 1 do
//		            	buffer[j + i * linesize] := buffer[MAX_EDGE_CR-1 + i * linesize];
//		            end
//		        end
//		    end
//		    
//		    if (x + MAX_EDGE_CR + block_w) > picSize[0] then
//		        foreach int i in 0 .. block_h - 1 do
//		        	foreach int j in 0 .. MAX_EDGE_CR-1 do
//		            	buffer[block_w + MAX_EDGE_CR-1 + j + i * linesize] := buffer[block_w -1 + MAX_EDGE_CR-1 + i * linesize]; // linesize = 19, block_w = 16, block_h = 16
//		            end
//		        end
//		    end
//		end
//	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict         )--> GetRps;
		IsNewPict (isNewPict_lastPict)--> GetRps;
		ManageCu  (isNewSlice        )--> GetRps;
		ManageCu  (getCuPix.launch   )--> ManageCu;
		ManageCu  (getCuPix.done     )--> IsNewPict;
		//sendBL    (sendBL			 )--> sendBL;
		//sendBL    (sendBL_done       )--> IsNewPict;
		ManageCu  (sendCuPix         )--> ManageCu;
		ManageCu  (getMvInfo         )--> ManageCu;
		//ManageCu  (sendToEL          )--> ManageCu;
		
		GetRps    (getRps.launch    )--> GetRpsPoc;
		GetRps    (getRps.done      )--> ManageCu;
		GetRpsPoc (getRpsPoc.launch )--> GetRpsPoc;
		GetRpsPoc (getRpsPoc.done   )--> GetRps;
	end
	
	priority 
		sendCuPix > getCuPix > getMvInfo > isNewSlice;
		sendCuPix.skip > sendCuPix.launch > sendCuPix.done;
		isNewPict > isNewPict_lastPict;
	end
end
