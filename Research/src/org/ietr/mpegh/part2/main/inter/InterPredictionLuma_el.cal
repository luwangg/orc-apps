/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/**
 * Decoding process for inter prediction samples
 * 
 * 
 * @input CuMode : mode (Intra, Inter or Skip mode) of all CU sent.
 * 
 * @input CuSize : size of all CU sent.
 * 
 * @input IsBiPredOrLx : Indicates when the current CU is using Bi-prediction.
 * 
 * @input Mv : motion vectors of the current CU.
 * 
 * @input PartMode : Giving the partitioning mode of the current CU.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @input RefList : Reference Lists (L0 and L1) of the current slice.
 * 
 * @input Sample : Samples from the DPB, used for the inter prediction.
 * 
 * @input SliceType : slice type (I, P or B) of the current slice.
 * 
 * @input WeightedPredSe : syntax elements for the weighted prediction decoded
 * 	by the parser.
 * 
 * 
 * @output PredSample : Interpolated samples according to the movement
 *		components given.
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */

package org.ietr.mpegh.part2.main.inter;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.sc29.wg11.mpegh.part2.main.inter.InterFunctions.*;
@DEBUG
actor InterPredictionLuma_el()
	uint(size=16) CUInfo,
	uint(size=2)  IsBiPredOrLx,
	int (size=32) Mv,
	uint(size=4)  PartMode,
	int(size=16) Poc,
	uint(size=3)  RefIdx,
	int (size=16) RefList,
	uint(size=8)  Sample,
	uint(size=2)  SliceType,
	int (size=16) WeightedPredSe // is size correct ?
		==>
	uint(size=8) PredSample
		:

	uint(size=8) SZ_REF_LIST = 16;
	bool refPicListComb = false; /* Fix me !! */

	int(size=16)  currPoc;
	uint(size=2)  listIdx;
	uint(size=7)  iLoop;
	int (size=16) refListX[2][SZ_REF_LIST];
	uint(size=2)  wpIdc;
	uint(size=4)  numRefIdxLxAct[2];
	bool          isBSlice;
	uint(size=4)  refIdxLxAct;
	uint(size=3)  log2WeightDenom;
	int           weight[SZ_REF_LIST][2];
	int           offset[SZ_REF_LIST][2];
	uint(size=3)  numPartDecoded;
	uint(size=3)  numPart;
	uint(size=7)  cuSize[2];
	uint(size=2)  cuMode;
	int logWD;
	int weightCu[2];
	int offsetCu[2];
	uint(size=2)  isBiPredOrLx;
	int (size=4)  refIdxLx[2];
	int (size=32) mvLx[2][2];
	uint(size=2)  numList;
	uint(size=7)  predCuSize;
	int logWDTab[SZ_REF_LIST+1][SZ_REF_LIST+1];
	int weightCuTab[SZ_REF_LIST+1][SZ_REF_LIST+1][2];
	int offsetCuTab[SZ_REF_LIST+1][SZ_REF_LIST+1][2];

	int (size=16) predSamples[2][64*64];

	/* Computing the weighted prediction coefficients (logWd, w0, w1, o0, o1),
	 * according to the picture(s) used for the prediction.
	 */
	procedure computeWeights(int refIdxL0, int refIdxL1)
	var
		int(size=16) pocL0,
		int(size=16) pocL1,
		int          tb,
		int          td,
		int          tx,
		int          weightScalFact,
		int          w0,
		int          w1,
		uint(size=3) idxL0 = refIdxL0+1,
		uint(size=3) idxL1 = refIdxL1+1
	begin
		/* Implicit weighted prediction : we compute the weights thanks the the
		 * poc value of the reference pictures
		 */
		if(wpIdc = 2) then
			if(refIdxL0 >=0 && refIdxL1 >= 0) then
				if(refIdxL0>=0) then
					pocL0 := refListX[0][refIdxL0];
				end
				if(refIdxL1>=0) then
					pocL1 := refListX[1][refIdxL1];
				end
				tb := clip_i32(currPoc- pocL0, -128, 127);
				td := clip_i32(pocL1-pocL0, -128, 127);
				if(td != 0) then
					tx := (16384 + (abs(td)>>1))/td;
					weightScalFact := clip_i32((tb*tx +32)>>6, -1024, 1023);
				end
				if(pocL0 = pocL1 || (weightScalFact>>2)<-64 ||
					(weightScalFact>>2)>128) then
					w0 := 32;
					w1 := 32;
				else
					w0 := 64 - (weightScalFact>>2);
					w1 := weightScalFact>>2;
				end
				logWDTab[idxL0][idxL1] := 5+shift1;
				offsetCuTab[idxL0][idxL1][0] := 0;
				offsetCuTab[idxL0][idxL1][1] := 0;
				weightCuTab[idxL0][idxL1][0] := w0;
				weightCuTab[idxL0][idxL1][1] := w1;
			else
				logWDTab[idxL0][idxL1] := shift1;
				offsetCuTab[idxL0][idxL1][0] := 0;
				offsetCuTab[idxL0][idxL1][1] := 0;
				weightCuTab[idxL0][idxL1][0] := 1;
				weightCuTab[idxL0][idxL1][1] := 1;
			end
			
		/* Explicit weighted prediction : we get the coefficients thanks to the
		 * predWeight table (decoded at the beginning of each slice).
		 */
		elsif (wpIdc = 1) then
			logWDTab[idxL0][idxL1] := log2WeightDenom + shift1;
			if(refIdxL0 >=0) then
				weightCuTab[idxL0][idxL1][0] := weight[refIdxL0][0];
				offsetCuTab[idxL0][idxL1][0] := offset[refIdxL0][0];
			end
			if(refIdxL1 >=0) then
				weightCuTab[idxL0][idxL1][1] := weight[refIdxL1][1];
				offsetCuTab[idxL0][idxL1][1] := offset[refIdxL1][1];
			end
		end
	end

	/* We have a new slice, we will update different values then get the new
	 * refList and weights
	 */
	isNewSlice.notDep: action PartMode:[partMode], Poc:[poc], SliceType:[sliceType],
		WeightedPredSe:[weightPredIdc] ==>
	guard
		partMode = PART_MODE_SLICE_INDEP ||
		partMode = PART_MODE_PICT
	do
		isBSlice := sliceType = B_SLICE;
		currPoc  := poc;
		wpIdc    := weightPredIdc;
		listIdx  := 0;
	end

	isNewSlice.dep: action PartMode:[partMode] ==>
	guard
		partMode = PART_MODE_SLICE_DEP
	end

	/* We have a New Cu in the Slice */
	getPartMode: action PartMode:[partMode] ==>
	guard
		partMode != PART_MODE_SLICE_DEP && partMode != PART_MODE_SLICE_INDEP &&
		partMode != PART_MODE_PICT
	do
		numPart := partModeToNumPart[partMode];
		numPartDecoded := 0;
	end

	/** Getting the size of each reference list  **/
	getSizeRefList.launch: action RefList:[sizeList] ==>
	guard
		listIdx < 2
	do
		numRefIdxLxAct[listIdx] := sizeList;
		iLoop := 0;
	end

	getSizeRefList.done: action ==>
	guard
		listIdx = 2
	end

	/** Getting the poc contained in each reference list **/
	getRefList.launch: action RefList:[refPoc] ==>
	guard
		iLoop < numRefIdxLxAct[listIdx]
	do
		refListX[listIdx][iLoop] := refPoc;
		iLoop := iLoop + 1;
	end

	getRefList.done: action ==>
	guard
		iLoop = numRefIdxLxAct[listIdx]
	do
		listIdx := listIdx + 1;
	end

	/* Getting the syntax elements for the weighted prediction when we have
	 * weighted prediction in explicit mode
	 */
	getWeightDenom.launch: action WeightedPredSe:[weightDenom] repeat 2 ==>
	guard
		wpIdc = 1
	do
		listIdx := 0;
		log2WeightDenom := weightDenom[0];
	end

	getWeightDenom.skip: action ==>
	guard
		wpIdc != 1
	do
		if(wpIdc = 2) then
			foreach int idxL0 in -1 .. numRefIdxLxAct[0]-1
			do
				foreach int idxL1 in -1 .. numRefIdxLxAct[1]-1
				do
					computeWeights(idxL0, idxL1);
				end
			end
		end
	end

	getWeightLX.launch: action ==>
	guard
		listIdx = 0 && (not isBSlice || not refPicListComb) ||
		listIdx = 1 && isBSlice
	do
		iLoop := 0;
		if(listIdx = 0) then
			refIdxLxAct := numRefIdxLxAct[0];
		elsif(not refPicListComb) then
			refIdxLxAct := numRefIdxLxAct[1];
		else
			println(" Actor InterPrediction : we don't manage LC yet");
			while(true) do end
		end
	end

	getWeightLX.skip: action ==>
	guard
		listIdx != 2
	do
		listIdx := listIdx + 1;
	end

	getWeightLX.done: action ==>
	guard
		listIdx = 2
	do
		foreach int idxL0 in -1 .. numRefIdxLxAct[0]-1
		do
			foreach int idxL1 in -1 .. numRefIdxLxAct[1]-1
			do
				computeWeights(idxL0, idxL1);
			end
		end
	end

	getLumaWeightLX.launch: action WeightedPredSe:[lumWeightFlag] ==>
	guard
		iLoop < refIdxLxAct
	do
		weight[iLoop][listIdx] := lumWeightFlag;
		iLoop := iLoop + 1;
	end

	getLumaWeightLX.done: action ==>
	guard
		iLoop = refIdxLxAct
	do
		iLoop := 0;
	end

	getDeltaLumaWeight.launch: action WeightedPredSe:[wpSyntElem] repeat 2 ==>
	guard
		iLoop < refIdxLxAct && weight[iLoop][listIdx] != 0
	do
		weight[iLoop][listIdx] := (1<<log2WeightDenom) + wpSyntElem[0];
		offset[iLoop][listIdx] := wpSyntElem[1];
		iLoop := iLoop + 1;
	end

	getDeltaLumaWeight.skip: action ==>
	guard
		iLoop < refIdxLxAct && weight[iLoop][listIdx] = 0
	do
		weight[iLoop][listIdx] := (1<<log2WeightDenom);
		offset[iLoop][listIdx] := 0;
		iLoop := iLoop + 1;
	end

	getDeltaLumaWeight.done: action ==>
	guard
		iLoop = refIdxLxAct
	do
		iLoop := 0;
		listIdx := listIdx + 1;
	end

	/* Get the size of each part of the current Cu. */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart
	do
		cuMode := cuInfo[0];
		cuSize := [cuInfo[i]: for int i in 3 .. 4];
		predCuSize := max(cuInfo[3], cuInfo[4]);
		numPartDecoded := numPartDecoded + 1;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	/* We launch the InterPrediction code only if we have an
	 * inter prediction :)
	 */
	getCuMode.isNotInter: action ==>
	guard
		not(cuMode = INTER || cuMode = SKIP)
	end

	getCuMode.isInter: action IsBiPredOrLx:[isBiPredOrPredLX] ==>
	guard
		cuMode = INTER || cuMode = SKIP
	do
		isBiPredOrLx := isBiPredOrPredLX;
	end

	/* Getting the prediction components for mono or bi-prediction */
	getRefIdx.monoPred: action RefIdx:[refIndexLx], Mv:[mv] repeat 2 ==>
	guard
		isBiPredOrLx != BI_PRED
	var
		uint idxL0,
		uint idxL1
	do
		if(isBiPredOrLx = PRED_L0) then
			mvLx[0] := [mv[i]:for int i in 0 .. 1];
			mvLx[1] := [0,0];
			refIdxLx := [refIndexLx, -1];
			listIdx := 0;
		else
			mvLx[1] := [mv[i]:for int i in 0 .. 1];
			mvLx[0] := [0,0];
			refIdxLx := [-1, refIndexLx];
			listIdx := 1;
		end
		idxL0 := refIdxLx[0]+1;
		idxL1 := refIdxLx[1]+1;
		
		logWD := logWDTab[idxL0][idxL1];
		foreach int list in 0 .. 1 do
			weightCu[list] := weightCuTab[idxL0][idxL1][list];
			offsetCu[list] := offsetCuTab[idxL0][idxL1][list];
		end
		
		numList := 1;
	end

	getRefIdx.biPred: action RefIdx:[refIndexLx] repeat 2, Mv:[mv] repeat 4 ==>
	guard
		isBiPredOrLx = BI_PRED
	var
		uint idxL0,
		uint idxL1
	do
		mvLx := [[mv[2*i+j]:for uint j in 0 ..1]: for int i in 0 .. 1];
		refIdxLx := [refIndexLx[i]: for uint i in 0 .. 1];
		idxL0 := refIdxLx[0]+1;
		idxL1 := refIdxLx[1]+1;
		logWD := logWDTab[idxL0][idxL1];
		foreach int list in 0 .. 1
		do
			weightCu[list] := weightCuTab[idxL0][idxL1][list];
			offsetCu[list] := offsetCuTab[idxL0][idxL1][list];
		end
		
		listIdx := 0;

		/* If we have the same picture with the same movement vectors we 
		 * can don't need to do the same interpolation twice :)
		 */
		if(refListX[0][refIdxLx[0]] = refListX[1][refIdxLx[1]] &&
			mvLx[0][0] = mvLx[1][0] && mvLx[0][1] = mvLx[1][1] &&
			refIdxLx[0] = refIdxLx[1]) then
			numList := 1;
		else
			numList := 2;
		end
	end

	/* Getting the samples from the DPB and realizing the interpolation. */
	getSamples.launch.is64x64: action Sample:[refSamples] repeat (64+7)*(64+7) ==>
	guard
		listIdx=0 || listIdx=1 && (isBiPredOrLx = BI_PRED || isBiPredOrLx = PRED_L1),
		predCuSize = 64
	do
		interpolateSamples(refSamples, 64+7);
	end

	getSamples.launch.is32x32: action Sample:[refSamples] repeat (32+7)*(32+7)==>
	guard
		listIdx=0 || listIdx=1 && (isBiPredOrLx = BI_PRED || isBiPredOrLx = PRED_L1),
		predCuSize = 32
	do
		interpolateSamples(refSamples, 32+7);
	end

	getSamples.launch.is16x16: action Sample:[refSamples] repeat (16+7)*(16+7) ==>
	guard
		listIdx=0 || listIdx=1 && (isBiPredOrLx = BI_PRED || isBiPredOrLx = PRED_L1),
		predCuSize = 16
	do
		interpolateSamples(refSamples, 16+7);
	end

	getSamples.launch.is8x8: action Sample:[refSamples] repeat (8+7)*(8+7) ==>
	guard
		listIdx=0 || listIdx=1 && (isBiPredOrLx = BI_PRED || isBiPredOrLx = PRED_L1),
		predCuSize = 8
	do
		interpolateSamples(refSamples, 8+7);
	end

	getSamples.launch.is4x4: action Sample:[refSamples] repeat (4+7)*(4+7) ==>
	guard
		listIdx=0 || listIdx=1 && (isBiPredOrLx = BI_PRED || isBiPredOrLx = PRED_L1),
		predCuSize = 4
	do
		interpolateSamples(refSamples, 4+7);
	end
	
	procedure interpolateSamples(uint(size=8) refSamples[(64+7)*(64+7)], uint(size=8) refCuWidth)
	var
		uint maskMv = 3,
		int mvQuartPix[2],
		uint(size=7) puIdxMax[2]
	begin
		if( not (refIdxLx[listIdx] = -1 || listIdx = 1 && numList = 1 &&
			refIdxLx[0]!=-1)) then

			puIdxMax := [cuSize[i]-1:for int i in 0 .. 1];
			mvQuartPix := [mvLx[listIdx][i] & maskMv: for int i in 0 .. 1];
			
			put_hevc_qpel_cal(predSamples, listIdx, refSamples, refCuWidth, 
				puIdxMax[0], puIdxMax[1], mvQuartPix[0], mvQuartPix[1]);
		end
		listIdx := listIdx + 1;
	end
	
	getSamples.done: action ==>
	guard
		listIdx=2 || listIdx=1 && isBiPredOrLx = PRED_L0
	do
		iLoop := 0;
	end
	
	procedure sendSample_weighted_pred_zscan(uint(size=8) dst[64*64], uint(size=8) cuWidth, uint(size=8) cuHeight)
	var
		uint(size=1) rdList = if(isBiPredOrLx = PRED_L1) then 1 else 0 end
	begin
		if(numList = 1) then
			if(wpIdc = 0) then
				put_unweighted_pred_zscan(predSamples, cuWidth-1, cuHeight-1, rdList, dst, 0);
			elsif(isBiPredOrLx != BI_PRED) then
				weighted_pred_zscan (logWD , weightCu, offsetCu, predSamples, cuWidth-1, cuHeight-1, rdList, dst, 0);
			else
				weighted_pred_mono_zscan (logWD , weightCu, offsetCu, predSamples, cuWidth-1, cuHeight-1, dst, 0);
			end
		else
			if(wpIdc = 0) then
				put_weighted_pred_avg_zscan (predSamples, cuWidth-1, cuHeight-1, dst, 0);
			else
				weighted_pred_avg_zscan (logWD, weightCu, offsetCu, predSamples, cuWidth-1, cuHeight-1, dst, 0);
			end
		end
	end
	
	sendCu.launch.is8x8: action ==> PredSample:[dst] repeat 8 * 8
	guard
		cuSize[0] = 8 && cuSize[1] = 8
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, 8 , 8);
	end
	
	sendCu.launch.is8x4: action ==> PredSample:[dst] repeat 8 * 4
	guard
		cuSize[0] = 8 && cuSize[1] = 4 || cuSize[0] = 4 && cuSize[1] = 8
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is16x16: action ==> PredSample:[dst] repeat 16 * 16
	guard
		cuSize[0] = 16 && cuSize[1] = 16
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, 16, 16);
	end
	
	sendCu.launch.is16x12: action ==> PredSample:[dst] repeat 16 * 12
	guard
		cuSize[0] = 16 && cuSize[1] = 12 || cuSize[0] = 12 && cuSize[1] = 16
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is16x8: action ==> PredSample:[dst] repeat 16 * 8
	guard
		cuSize[0] = 16 && cuSize[1] = 8 || cuSize[0] = 8 && cuSize[1] = 16
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is16x4: action ==> PredSample:[dst] repeat 16 * 4
	guard
		cuSize[0] = 16 && cuSize[1] = 4 || cuSize[0] = 4 && cuSize[1] = 16
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is32x32: action ==> PredSample:[dst] repeat 32 * 32
	guard
		cuSize[0] = 32 && cuSize[1] = 32
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, 32, 32);
	end
	
	sendCu.launch.is32x24: action ==> PredSample:[dst] repeat 32 * 24
	guard
		cuSize[0] = 32 && cuSize[1] = 24 || cuSize[0] = 24 && cuSize[1] = 32
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is32x16: action ==> PredSample:[dst] repeat 32 * 16
	guard
		cuSize[0] = 32 && cuSize[1] = 16 || cuSize[0] = 16 && cuSize[1] = 32
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is32x8: action ==> PredSample:[dst] repeat 32 * 8
	guard
		cuSize[0] = 32 && cuSize[1] = 8 || cuSize[0] = 8 && cuSize[1] = 32
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is64x64: action ==> PredSample:[dst] repeat 64 * 64
	guard
		cuSize[0] = 64 && cuSize[1] = 64
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, 64, 64);
	end
	
	sendCu.launch.is64x48: action ==> PredSample:[dst] repeat 64 * 48
	guard
		cuSize[0] = 64 && cuSize[1] = 48 || cuSize[0] = 48 && cuSize[1] = 64
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is64x32: action ==> PredSample:[dst] repeat 64 * 32
	guard
		cuSize[0] = 64 && cuSize[1] = 32 || cuSize[0] = 32 && cuSize[1] = 64
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end
	
	sendCu.launch.is64x16: action ==> PredSample:[dst] repeat 64 * 16
	guard
		cuSize[0] = 64 && cuSize[1] = 16 || cuSize[0] = 16 && cuSize[1] = 64
	var
		uint(size=8) dst[64*64]
	do
	    sendSample_weighted_pred_zscan(dst, cuSize[0], cuSize[1]);
	end

	schedule fsm GetPartMode:
		GetPartMode (isNewSlice.dep    )--> GetPartMode;
		GetPartMode (isNewSlice.notDep )--> GetSizeRefList;
		GetPartMode (getPartMode )--> GetCuInfo;

		GetSizeRefList (getSizeRefList.launch )--> GetRefList;
		GetSizeRefList (getSizeRefList.done   )--> GetWeightDenom;

		GetRefList (getRefList.launch )--> GetRefList;
		GetRefList (getRefList.done   )--> GetSizeRefList;

		GetWeightDenom (getWeightDenom.launch )--> GetWeightLX;
		GetWeightDenom (getWeightDenom.skip   )--> GetPartMode;

		GetWeightLX (getWeightLX.launch )--> GetLumaWeightLX;
		GetWeightLX (getWeightLX.skip   )--> GetWeightLX;
		GetWeightLX (getWeightLX.done   )--> GetPartMode;

		GetLumaWeightLX (getLumaWeightLX.launch )--> GetLumaWeightLX;
		GetLumaWeightLX (getLumaWeightLX.done   )--> GetDeltaLumWtLX;

		GetDeltaLumWtLX (getDeltaLumaWeight.launch )--> GetDeltaLumWtLX;
		GetDeltaLumWtLX (getDeltaLumaWeight.skip   )--> GetDeltaLumWtLX;
		GetDeltaLumWtLX (getDeltaLumaWeight.done   )--> GetWeightLX;

		GetCuInfo (getCuInfo.launch )--> GetCuMode;
		GetCuInfo (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isNotInter )--> GetCuInfo;
		GetCuMode (getCuMode.isInter )--> GetRefIdx;

		GetRefIdx (getRefIdx )--> GetSamples;

		GetSamples (getSamples.launch )--> GetSamples;
		GetSamples (getSamples.done   )--> SendCu;

		SendCu (sendCu.launch )--> GetCuInfo;
	end
	priority
		getWeightLX.launch > getWeightLX.skip >getWeightLX.done;
	end
end