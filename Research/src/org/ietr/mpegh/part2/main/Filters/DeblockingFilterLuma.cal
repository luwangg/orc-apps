/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package org.ietr.mpegh.part2.main.Filters;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

//Pipelined version broken
actor DeblockingFilterLuma()
	uint(size=2)  BsHor,
	uint(size=2)  BsVer,
	bool          DBFDisable,
	uint(size=2)  IsPicSlcLcu,
	uint(size=8)  LcuSizeMax,
	uint(size=16) PicSize,
	int (size=8)  Qp,
	uint(size=8)  SampleIn,
	int (size=8)  SyntaxElem,
	uint(size=16) TilesCoord
		==>
	uint(size=8)  FiltSample
		:

	uint(size=4)  BIT_DEPTH = 8;

	uint(size=8) betaTable[52] =
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  6,  7,  8,  9,
		 10, 11, 12, 13, 14, 15, 16, 17, 18, 20,
		 22, 24, 26, 28, 30 ,32, 34, 36, 38, 40,
		 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		 62, 64];

	uint(size=8) tcTable[54] =
		[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,
		  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,
		  2,  3,  3,  3,  3,  4,  4,  4,  5,  5,
		  6,  6,  7,  8,  9, 10, 11, 13, 14, 16,
		  18, 20, 22, 24];

	int(size=16) iLoop;

	uint(size=16) numTiles;
	uint(size=16) tileIdx;
	uint(size=16) numPartition;
	uint(size=16) tilesBegSamp[MAX_NUM_TILES][2];
	uint(size=16) tilesEndSamp[MAX_NUM_TILES][2];
	uint(size=8)  lcuSizeMax;
	uint(size=8)  log2_lcuSizeMax;
	uint(size=16) picSize[2];
	uint(size=16) picSizeInMb[2];
	uint(size=16) xIdx;
	uint(size=16) yIdx;
	uint(size=16) xAddrVert;
	uint(size=16) yAddrVert;
	int (size=16) xAddrHor;
	int (size=16) yAddrHor;
	uint(size=16) blockSent;
	uint(size=16) pixAddr[2];
	uint(size=9)  blkIdx := 0;
	bool          disDbf := false;

	uint(size=8)  pictureBuffer[PICT_HEIGHT][PICT_WIDTH];
	int (size=8)  qpTab[PICT_HEIGHT/4][PICT_WIDTH/4];
	uint(size=2)  bSTableVert[256];
	uint(size=2)  bSTableHoriz[PICT_HEIGHT/64][PICT_WIDTH/64][256];

	int           betaOffset;
	uint(size=2)  dE;
	bool          dEp;
	bool          dEq;
	int           qPi;
	int           tcOffset;
	uint(size=8)  tc;
	uint(size=16) beta;

	function decisionProcessLumaSamp(uint(size=8) p0, uint(size=8) p3,
		uint(size=8) q0, uint(size=8) q3, int dpq, int beta) --> bool
	:
		(dpq < (beta>>2)) &&
		(abs(p3-p0) + abs(q0-q3))<(beta>>3) &&
		abs(p0-q0)<((5*tc+1)>>1)
	end

	procedure computeNextLcuAddr()
	begin
		xIdx := xIdx + lcuSizeMax;
		if(xIdx >= tilesEndSamp[tileIdx][0]) then
			xIdx := tilesBegSamp[tileIdx][0];
			yIdx := yIdx + lcuSizeMax;
			if(yIdx >= tilesEndSamp[tileIdx][1]) then
				tileIdx := tileIdx + 1;
				xIdx := tilesBegSamp[tileIdx][0];
				yIdx := tilesBegSamp[tileIdx][1];
			end
		end
	end
	
	procedure decisionProcessLumaBlkEdgeBetaTc(uint(size=16) addr[2], bool isVertical, uint(size=8) bS)
	var
		uint(size=16) q0X = (addr[0]/4) & (PICT_WIDTH/4-1),
		uint(size=16) q0Y = addr[1]/4,
		uint(size=16) p0X, uint(size=16) p0Y,
		int Q
	begin
	    if(isVertical) then
			p0X := q0X-1;
			p0Y := q0Y;
		else
			p0X := q0X;
			p0Y := q0Y-1;
		end
		qPi := ((qpTab[q0Y][q0X] + qpTab[p0Y][p0X] + 1)>>1);
		Q := clip_i32(qPi+betaOffset, 0, 51);
		beta := betaTable[Q]<<(BIT_DEPTH - 8);
		Q := clip_i32(qPi + 2*(bS-1) + tcOffset, 0, 53);
		tc := tcTable[Q]<<(BIT_DEPTH - 8);
	end
	
	procedure decisionProcessLumaBlkEdgeBeta(uint(size=16) addr[2], bool isVertical)
	var
		uint(size=16) q0X = (addr[0]/4) & (PICT_WIDTH/4-1),
		uint(size=16) q0Y = addr[1]/4,
		uint(size=16) p0X, uint(size=16) p0Y,
		int Q
	begin
	    if(isVertical) then
			p0X := q0X-1;
			p0Y := q0Y;
		else
			p0X := q0X;
			p0Y := q0Y-1;
		end
		qPi := ((qpTab[q0Y][q0X] + qpTab[p0Y][p0X] + 1)>>1);
		Q := clip_i32(qPi+betaOffset, 0, 51);
		beta := betaTable[Q]<<(BIT_DEPTH - 8);
	end
		
	procedure decisionProcessLumaBlkEdge(uint(size=16) addr[2], bool isVertical, uint(size=16) betaLocal)
	var
		int dp0, int dp3, int dq0, int dq3,
		int dpq0, int dpq3,
		int dp, int dq,
		int d,
		int p0[4], int q0[4],
		int p3[4], int q3[4],
		bool dSam0, bool dSam3
	begin
		if(isVertical) then
			q0 := [pictureBuffer[addr[1]][addr[0]+i]:for int i in 0 .. 3];
			p0 := [pictureBuffer[addr[1]][addr[0]-i]:for int i in 1 .. 4];
			q3 := [pictureBuffer[addr[1]+3][addr[0]+i]:for int i in 0 .. 3];
			p3 := [pictureBuffer[addr[1]+3][addr[0]-i]:for int i in 1 .. 4];
		else
			q0 := [pictureBuffer[addr[1]+i][addr[0]]:for int i in 0 .. 3];
			p0 := [pictureBuffer[addr[1]-i][addr[0]]:for int i in 1 .. 4];
			q3 := [pictureBuffer[addr[1]+i][addr[0]+3]:for int i in 0 .. 3];
			p3 := [pictureBuffer[addr[1]-i][addr[0]+3]:for int i in 1 .. 4];
		end
		dp0 :=abs(p0[2]-2*p0[1]+p0[0]);
		dq0 :=abs(q0[2]-2*q0[1]+q0[0]);
		dp3 :=abs(p3[2]-2*p3[1]+p3[0]);
		dq3 :=abs(q3[2]-2*q3[1]+q3[0]);
		dpq0 := dp0+dq0;
		dpq3 := dp3+dq3;
		dp := dp0+dp3;
		dq := dq0+dq3;
		d  := dpq0 + dpq3;
		if(d<betaLocal) then
			dSam0 := decisionProcessLumaSamp(p0[0], p0[3], q0[0], q0[3],
				2*dpq0, betaLocal);
			dSam3 := decisionProcessLumaSamp(p3[0], p3[3], q3[0], q3[3], 2*dpq3, betaLocal);
	
			dE := 1;
			dEp := false;
			dEq := false;
			if(dSam0 && dSam3) then
				dE := 2;
			end
			if(dp < (betaLocal+(betaLocal>>1))>>3) then
				dEp := true;
			end
			if(dq < (betaLocal+(betaLocal>>1))>>3) then
				dEq := true;
			end
		else
			dE  := 0;
			dEp := false;
			dEq := false;
		end
	end
	
	procedure filterProcessLumaBlkVerticalEdge(uint(size=16) addr[2], uint(size=8) tcLocal)
	var
		uint(size=8) p[4],
		uint(size=8) q[4]
	begin
		if(dE!=0) then
			foreach int y in 0 .. 3
			do
				p := [pictureBuffer[addr[1]+y][addr[0]-i]: for int i in 1 ..4];
				q := [pictureBuffer[addr[1]+y][addr[0]+i]: for int i in 0 .. 3];
				filterProcessLumaSamp(p, q, tcLocal);
				foreach int i in 0 .. 2
				do
					pictureBuffer[addr[1]+y][addr[0]-1-i] := p[i];
					pictureBuffer[addr[1]+y][addr[0]  +i] := q[i];
				end
			end
		end
	end

	procedure filterProcessLumaBlkHorizontalEdge(uint(size=16) addr[2], uint(size=8) tcLocal)
	var
		uint(size=8) p[4],
		uint(size=8) q[4]
	begin
		if(dE!=0) then
			foreach int x in 0 .. 3
			do
				p := [pictureBuffer[addr[1]-i][addr[0]+x]: for int i in 1 ..4];
				q := [pictureBuffer[addr[1]+i][addr[0]+x]: for int i in 0 .. 3];
				filterProcessLumaSamp(p, q, tcLocal);
				foreach int i in 0 .. 2
				do
					pictureBuffer[addr[1]-1-i][addr[0]+x] := p[i];
					pictureBuffer[addr[1]  +i][addr[0]+x] := q[i];
				end
			end
		end
	end
	
	procedure filterProcessLumaBlkVertical(int idxBlk)
	var
	  uint(size=16) blkAddr[2],
	  uint(size=16) blkAddr0[2],
	  int betaTab[2], 
	  int tcTab[2],
	  int offset,
	  /* no_p and no_q won't be constant 0 if pcm and
		pcmLoopFilterDisableFlag are active. */
	  uint(size=8) no_p[2] = [0 : for int i in 0 .. 1],
	  uint(size=8) no_q[2] = [0 : for int i in 0 .. 1],
	  uint(size=2) bS0 = bSTableVert[idxBlk],
	  uint(size=2) bS1 = bSTableVert[idxBlk + 2]
	begin
	
	    if (bS0 != 0 or bS1 != 0) then
	    
	      zScanToAbsCoord(idxBlk, blkAddr);
		  blkAddr0[0] := blkAddr[0] + xAddrVert;
          blkAddr0[1] := blkAddr[1] + yAddrVert;
	
	      /* Tc and Beta calculation */
	   
	      /* First edge */
	      if (bS0 != 0) then
	        blkAddr[0] := blkAddr0[0];
		    blkAddr[1] := blkAddr0[1];
		    decisionProcessLumaBlkEdgeBetaTc(blkAddr, true, bS0);
		    betaTab[0] := beta;
		    tcTab[0] := tc;
		  else
		    tcTab[0] := 0;
	      end
	  
	      /* Second edge */
	      if (bS1 != 0) then
		    blkAddr[0] := blkAddr0[0];
		    blkAddr[1] := blkAddr0[1] + 4;
		    decisionProcessLumaBlkEdgeBetaTc(blkAddr, true, bS1);
		    betaTab[1] := beta;
		    tcTab[1] := tc;
		  else
		    tcTab[1] := 0;
	      end
		
	      /* Filtering 2 edges */
	      if (tcTab[0] != 0 || 
	        tcTab[1] != 0) then
	    
	      /* Compute only beta */
	      
	      if (bS0 = 0) then
		    blkAddr[0] := blkAddr0[0];
		    blkAddr[1] := blkAddr0[1];
		    decisionProcessLumaBlkEdgeBeta(blkAddr, true);
		    betaTab[0] := beta;
	      end
	      
	      if (bS1 = 0) then
		    blkAddr[0] := blkAddr0[0];
		    blkAddr[1] := blkAddr0[1] + 4;
		    decisionProcessLumaBlkEdgeBeta(blkAddr, true);
		    betaTab[1] := beta;
	      end
	      
	      offset := 0 * (4096 * 2048) + blkAddr0[1] * 4096 + blkAddr0[0];
		  filterProcessLumaEdgeVertical(pictureBuffer, offset, 4096, betaTab, tcTab, no_p, no_q, blkAddr0, idxBlk);
	    end
	  end
	end
	
	@optimize_c(condition="defined(OPENHEVC_ENABLE)", name="hevc_v_loop_filter_luma_orcc")
    procedure filterProcessLumaEdgeVertical(uint(size=8) pix[2048][4096], int offset, int stride, int betaTab[2], int tcTab[2], uint(size=8) no_p[2], uint(size=8) no_q[2], uint(size=16) blkAddr0[2], int idxBlk)
	var
	  uint(size=16) blkAddr[2]
	begin
	  /* Filtering first edge */
	  if (bSTableVert[idxBlk] != 0) then
		blkAddr[0] := blkAddr0[0];
		blkAddr[1] := blkAddr0[1];
		decisionProcessLumaBlkEdge(blkAddr, true, betaTab[0]);
		filterProcessLumaBlkVerticalEdge(blkAddr, tcTab[0]);
	  end

	  /* Filtering second edge */
	  if (bSTableVert[idxBlk + 2] != 0) then
	    blkAddr[0] := blkAddr0[0];
		blkAddr[1] := blkAddr0[1] + 4;
		decisionProcessLumaBlkEdge(blkAddr, true, betaTab[1]);
		filterProcessLumaBlkVerticalEdge(blkAddr, tcTab[1]);
	  end
	end

    procedure filterProcessLumaBlkHorizontal(int idxBlk)
	var
	  uint(size=16) blkAddr[2],
	  uint(size=16) blkAddr0[2],
	  int betaTab[2], 
	  int tcTab[2],
	  int offset,
	  /* no_p and no_q won't be constant 0 if pcm and
		pcmLoopFilterDisableFlag are active. */
	  uint(size=8) no_p[2] = [0 : for int i in 0 .. 1],
	  uint(size=8) no_q[2] = [0 : for int i in 0 .. 1],
	  uint(size=2) bS0 = bSTableHoriz[yAddrHor >> log2_lcuSizeMax][xAddrHor >> log2_lcuSizeMax][idxBlk],
	  uint(size=2) bS1 = bSTableHoriz[yAddrHor >> log2_lcuSizeMax][xAddrHor >> log2_lcuSizeMax][idxBlk + 1]
	begin
	
	    if (bS0 != 0 or bS1 != 0) then
	    
	      zScanToAbsCoord(idxBlk, blkAddr);
		  blkAddr0[0] := blkAddr[0] + xAddrHor;
          blkAddr0[1] := blkAddr[1] + yAddrHor;
	    
	    /* Tc and Beta calculation */
	   
	    /* First edge */
	      if (bS0 != 0) then
	        blkAddr[0] := blkAddr0[0];
            blkAddr[1] := blkAddr0[1];
		    decisionProcessLumaBlkEdgeBetaTc(blkAddr, false, bS0);
          betaTab[0] := beta;
		  tcTab[0] := tc;
		else
		  tcTab[0] := 0;
		end

	    /* Second edge */
	      if (bS1 != 0) then
		    blkAddr[0] := blkAddr0[0] + 4;
		    blkAddr[1] := blkAddr0[1];
		    decisionProcessLumaBlkEdgeBetaTc(blkAddr, false, bS1);
          betaTab[1] := beta;
		  tcTab[1] := tc;
		else
		  tcTab[1] := 0;
		end
		
	    /* Filtering 2 edges */
	      if (tcTab[0] != 0 || 
	        tcTab[1] != 0) then
	    	
	    	/* Compute only beta */
	    	
	    	if (bS0 = 0) then
		      blkAddr[0] := blkAddr0[0];
		      blkAddr[1] := blkAddr0[1];
		      decisionProcessLumaBlkEdgeBeta(blkAddr, false);
		      betaTab[0] := beta;
	        end
	      
	        if (bS1 = 0) then
		      blkAddr[0] := blkAddr0[0] + 4;
		      blkAddr[1] := blkAddr0[1];
		      decisionProcessLumaBlkEdgeBeta(blkAddr, false);
		      betaTab[1] := beta;
	      end
	      
	      offset := 0 * (4096 * 2048) + blkAddr0[1] * 4096 + blkAddr0[0];
		  filterProcessLumaEdgeHorizontal(pictureBuffer, offset, 4096, betaTab, tcTab, no_p, no_q, blkAddr0, idxBlk);
	    end
	  end
	end
	
	@optimize_c(condition="defined(OPENHEVC_ENABLE)", name="hevc_h_loop_filter_luma_orcc")
    procedure filterProcessLumaEdgeHorizontal(uint(size=8) pix[2048][4096], int offset, int stride, int betaTab[2], int tcTab[2], uint(size=8) no_p[2], uint(size=8) no_q[2], uint(size=16) blkAddr0[2], int idxBlk)
	var
	  uint(size=16) blkAddr[2]
	begin
	  /* Filtering first edge */
	  if (bSTableHoriz[yAddrHor >> log2_lcuSizeMax][xAddrHor >> log2_lcuSizeMax][idxBlk] != 0) then
		blkAddr[0] := blkAddr0[0];
		blkAddr[1] := blkAddr0[1];
		decisionProcessLumaBlkEdge(blkAddr, false, betaTab[0]);
		filterProcessLumaBlkHorizontalEdge(blkAddr, tcTab[0]);
	  end

	  /* Filtering second edge */
	  if (bSTableHoriz[yAddrHor >> log2_lcuSizeMax][xAddrHor >> log2_lcuSizeMax][idxBlk + 1] != 0) then
	    blkAddr[0] := blkAddr0[0] + 4;
		blkAddr[1] := blkAddr0[1];
		decisionProcessLumaBlkEdge(blkAddr, false, betaTab[1]);
		filterProcessLumaBlkHorizontalEdge(blkAddr, tcTab[1]);
	  end
	end
	
	procedure filterProcessLumaSamp(uint(size=8) p[4], uint(size=8) q[4], uint(size=8) tcLocal)
	var
		uint(size=8) p0=p[0], uint(size=8) p1=p[1], uint(size=8) p2=p[2],
		uint(size=8) q0=q[0], uint(size=8) q1=q[1], uint(size=8) q2=q[2],
		uint(size=8) p3=p[3], uint(size=8) q3=q[3],
		int delta, int deltaP, int deltaQ
	begin
		if(dE=2) then
			p[0] := clip_i32((p2+2*p1+2*p0+2*q0+q1+4)>>3, p0-2*tcLocal, p0+2*tcLocal);
			p[1] := clip_i32((p2+p1+p0+q0+2)>>2, p1-2*tcLocal, p1+2*tcLocal);
			p[2] := clip_i32((2*p3+3*p2+p1+p0+q0+4)>>3, p2-2*tcLocal, p2+2*tcLocal);
			q[0] := clip_i32((p1+2*p0+2*q0+2*q1+q2+4)>>3, q0-2*tcLocal, q0+2*tcLocal);
			q[1] := clip_i32((p0+q0+q1+q2+2)>>2, q1-2*tcLocal, q1+2*tcLocal);
			q[2] := clip_i32((p0+q0+q1+3*q2+2*q3+4)>>3, q2-2*tcLocal, q2+2*tcLocal);
		else
			delta := (9*(q0-p0)-3*(q1-p1)+8)>>4;
			if(abs(delta)<10*tcLocal) then
				delta := clip_i32(delta, -tcLocal, tcLocal);
				p[0] := clip_i32(p0+delta, 0, 255);
				q[0] := clip_i32(q0-delta, 0, 255);
				if(dEp) then
					deltaP := clip_i32( ((((p2+p0+1)>>1)-p1+delta)>>1), -(tcLocal>>1), tcLocal>>1);
					p[1] := clip_i32(p1+deltaP, 0, 255);
				end
				if(dEq) then
					deltaQ := clip_i32(((((q2+q0+1)>>1)-q1-delta)>>1), -(tcLocal>>1), tcLocal>>1);
					q[1] := clip_i32(q1+deltaQ, 0, 255);
				end
			end
		end
		// There should be the code for reverting filtering if pcm and
		// pcmLoopFilterDisableFlag is active.
	end
	
	procedure filterHorEdges()
	var
	  int lumaPartMax = (numPartition >> 2) - 1
	begin
		foreach int idxBlk in 0 .. lumaPartMax
		do
		  filterProcessLumaBlkHorizontal(idxBlk << 2);
	    end
	end

	isNewSlc: action IsPicSlcLcu:[isNewPicSlcLcu], PicSize:[picWidthInPix,
		picHeightInPix], LcuSizeMax:[log2_lcuSz], DBFDisable:[disableFlag],
		SyntaxElem:[betaOff, tcOff, qpUOff, qpVOff] ==>
	guard
		isNewPicSlcLcu = NEW_SLC
	do
		disDbf := disableFlag;
		betaOffset := betaOff;
		tcOffset := tcOff;
	end

	isNewPict: action IsPicSlcLcu:[isNewPicSlcLcu], PicSize:[picWidthInPix,
		picHeightInPix], LcuSizeMax:[log2_lcuSz], DBFDisable:[disableFlag],
		SyntaxElem:[betaOff, tcOff, qpUOff, qpVOff] ==>
	guard
		isNewPicSlcLcu = NEW_PIC
	do
		log2_lcuSizeMax := log2_lcuSz;
		lcuSizeMax := 1 << log2_lcuSizeMax;
		numPartition := (lcuSizeMax * lcuSizeMax) / 16;
		disDbf := disableFlag;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;
		picSizeInMb[0] := (picSize[0] + lcuSizeMax-1)/lcuSizeMax;
		picSizeInMb[1] := (picSize[1] + lcuSizeMax-1)/lcuSizeMax;
		/*lastXIdx := 0;
		lastYIdx := 0;*/
		xIdx := 0;
		yIdx := 0;
		xAddrHor := -1;
		tileIdx := 0;
		betaOffset := betaOff;
		tcOffset := tcOff;
	end

	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBegSamp[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEndSamp[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	getCuPix.launch.pict.x64: action  IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 64*64 ==>
	guard
		tileIdx < numTiles && yIdx < picSize[1]-lcuSizeMax && xIdx < picSize[0]-lcuSizeMax && isLcu = NEW_LCU,
		lcuSizeMax = 64
	do
		foreach int y in 0 .. 63
		do
			foreach int x in 0 .. 63
			do
				pictureBuffer[yIdx + y][xIdx + x] := samp[64*y+x];
			end
		end
		xAddrVert := xIdx;
		yAddrVert := yIdx;
		blkIdx := 0;
	end
	
	getCuPix.launch.pict.x32: action  IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 32*32 ==>
	guard
		tileIdx < numTiles && yIdx < picSize[1]-lcuSizeMax && xIdx < picSize[0]-lcuSizeMax && isLcu = NEW_LCU,
		lcuSizeMax = 32
	do
		foreach int y in 0 .. 31
		do
			foreach int x in 0 .. 31
			do
				pictureBuffer[yIdx + y][xIdx + x] := samp[32*y+x];
			end
		end
		xAddrVert := xIdx;
		yAddrVert := yIdx;
		blkIdx := 0;
	end
	
	getCuPix.launch.pict.x16: action  IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 16*16 ==>
	guard
		tileIdx < numTiles && yIdx < picSize[1]-lcuSizeMax && xIdx < picSize[0]-lcuSizeMax && isLcu = NEW_LCU,
		lcuSizeMax = 16
	do
		foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				pictureBuffer[yIdx + y][xIdx + x] := samp[16*y+x];
			end
		end
		xAddrVert := xIdx;
		yAddrVert := yIdx;
		blkIdx := 0;
	end

getCuPix.launch.getPart.isHorVer: action BsVer:[bsVer], BsHor:[bsHor], Qp:[qp] ==>
    guard
		blkIdx < numPartition && (blkIdx & 0x03) = 0
	var
		uint(size=16) coord[2] 	
	do
		//saveRasterScanCu(samp);
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;

		zScanToAbsCoord(blkIdx, coord);
		coord[0] := xIdx + coord[0];
		coord[1] := yIdx + coord[1];
		qpTab[coord[1]>>2][coord[0]>>2] := qp;

		bSTableVert[blkIdx] := bsVer;
		bSTableHoriz[yIdx >> log2_lcuSizeMax][xIdx >> log2_lcuSizeMax][blkIdx] := bsHor;

		blkIdx := blkIdx + 1;
	end

    getCuPix.launch.getPart.isHor: action BsHor:[bsHor], Qp:[qp] ==>
	guard
		blkIdx < numPartition && (blkIdx & 0x03) < 2
	var
		uint(size=16) coord[2] 	
	do
		// saveRasterScanCu(samp);

		zScanToAbsCoord(blkIdx, coord);
		coord[0] := xIdx + coord[0];
		coord[1] := yIdx + coord[1];
		qpTab[coord[1]>>2][coord[0]>>2] := qp;

		bSTableHoriz[yIdx >> log2_lcuSizeMax][xIdx >> log2_lcuSizeMax][blkIdx] := bsHor;

		blkIdx := blkIdx + 1;
	end
	
	getCuPix.launch.getPart.isVer: action BsVer:[bsVer], Qp:[qp] ==>
	guard
		blkIdx < numPartition && (blkIdx & 0x01) = 0
	var
		uint(size=16) coord[2] 	
	do
		// saveRasterScanCu(samp);

		zScanToAbsCoord(blkIdx, coord);
		coord[0] := xIdx + coord[0];
		coord[1] := yIdx + coord[1];
		qpTab[coord[1]>>2][coord[0]>>2] := qp;

		bSTableVert[blkIdx] := bsVer;

		blkIdx := blkIdx + 1;
	end
	
	getCuPix.launch.getPart.qp: action Qp:[qp] ==>
	guard
		blkIdx < numPartition && (blkIdx & 0x03) = 3
	var
		uint(size=16) coord[2] 	
	do
		// saveRasterScanCu(samp);

		zScanToAbsCoord(blkIdx, coord);
		coord[0] := xIdx + coord[0];
		coord[1] := yIdx + coord[1];
		qpTab[coord[1]>>2][coord[0]>>2] := qp;

		blkIdx := blkIdx + 1;
	end

	getCuPix.launch.getPartDone: action ==>
	guard
		blkIdx = numPartition
	do
		computeNextLcuAddr();
	end

	getCuPix.launch.lastColOrRow.vert.x64: action IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 64*64 ==>
	guard
		(xIdx >= picSize[0]-lcuSizeMax || yIdx >= picSize[1]-lcuSizeMax) && isLcu = NEW_LCU,
		lcuSizeMax = 64
	do
		foreach int y in 0 .. 63
		do
			foreach int x in 0 .. 63
			do
				pictureBuffer[yIdx + y][xIdx + x] := samp[64*y+x];
			end
		end
		
		xAddrVert := xIdx;
		yAddrVert := yIdx;

		blkIdx := 0;
		zScanToAbsCoord(0, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end
	
	getCuPix.launch.lastColOrRow.vert.x32: action IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 32*32 ==>
	guard
		(xIdx >= picSize[0]-lcuSizeMax || yIdx >= picSize[1]-lcuSizeMax) && isLcu = NEW_LCU,
		lcuSizeMax = 32
	do
		foreach int y in 0 .. 31
		do
			foreach int x in 0 .. 31
			do
				pictureBuffer[yIdx + y][xIdx + x] := samp[32*y+x];
			end
		end
		
		xAddrVert := xIdx;
		yAddrVert := yIdx;

        blkIdx := 0;
		zScanToAbsCoord(0, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

    getCuPix.launch.lastColOrRow.vert.x16: action IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 16*16 ==>
	guard
		(xIdx >= picSize[0]-lcuSizeMax || yIdx >= picSize[1]-lcuSizeMax) && isLcu = NEW_LCU,
		lcuSizeMax = 16
	do
		foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				pictureBuffer[yIdx + y][xIdx + x] := samp[16*y+x];
			end
		end
		
		xAddrVert := xIdx;
		yAddrVert := yIdx;

        blkIdx := 0;
		zScanToAbsCoord(0, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBlk.launch.isHorVer: action  BsHor:[bsHor], BsVer:[bsVer], Qp:[qp] ==>
    guard
		blkIdx < numPartition && (blkIdx & 0x03) = 0 && pixAddr[0] < picSize[0] && pixAddr[1] < picSize[1]
    do
        qpTab[pixAddr[1]/4][(pixAddr[0] & PICT_WIDTH-1) >>2] := qp;
		bSTableVert[blkIdx] := bsVer;
		bSTableHoriz[yAddrVert >> log2_lcuSizeMax][xAddrVert >> log2_lcuSizeMax][blkIdx] := bsHor;
		
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

    getBlk.launch.isHor: action  BsHor:[bsHor], Qp:[qp] ==>
	guard
		blkIdx < numPartition && (blkIdx & 0x03) < 2 && pixAddr[0] < picSize[0] && pixAddr[1] < picSize[1]
	do		
		qpTab[pixAddr[1]/4][(pixAddr[0] & PICT_WIDTH-1) >>2] := qp;
		bSTableHoriz[yAddrVert >> log2_lcuSizeMax][xAddrVert >> log2_lcuSizeMax][blkIdx] := bsHor;
		
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end
	
	getBlk.launch.isVer: action  BsVer:[bsVer], Qp:[qp] ==>
	guard
		blkIdx < numPartition && (blkIdx & 0x01) = 0 && pixAddr[0] < picSize[0] && pixAddr[1] < picSize[1]
	do		
		qpTab[pixAddr[1]/4][(pixAddr[0] & PICT_WIDTH-1) >>2] := qp;
		bSTableVert[blkIdx] := bsVer;
		
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end
	
	getBlk.launch.qp: action  Qp:[qp] ==>
	guard
		blkIdx < numPartition && (blkIdx & 0x03) = 3 && pixAddr[0] < picSize[0] && pixAddr[1] < picSize[1]
	do
		qpTab[pixAddr[1]/4][(pixAddr[0] & PICT_WIDTH-1) >>2] := qp;
		
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBlk.skip.vertEdge: action ==>
	guard
		blkIdx < numPartition,
		pixAddr[0] >= picSize[0] || pixAddr[1] >= picSize[1]
	do
		bSTableVert[blkIdx] := 0;
		bSTableHoriz[yAddrVert >> log2_lcuSizeMax][xAddrVert >> log2_lcuSizeMax][blkIdx] := 0;
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBlk.done: action ==>
	guard
		blkIdx = numPartition
	do
		computeNextLcuAddr();
	end

	getCuPix.done: action ==>
	guard
		tileIdx = numTiles
	do
		blockSent := 0;
		xIdx := 0;
		yIdx := 0;
		tileIdx := 0;
	end

	filterEdges: action ==>
	var
	  int lumaPartMax = (numPartition >> 2) - 1
	do
		if(not disDbf) then
			foreach int idxBlk in 0 .. lumaPartMax
			do
			  filterProcessLumaBlkVertical(idxBlk << 2);
		    end
			if(xAddrVert > 0) then
				xAddrHor := xAddrVert - lcuSizeMax;
				yAddrHor := yAddrVert;
				filterHorEdges();
			end
			if(xAddrVert + lcuSizeMax >= picSize[0]) then
				xAddrHor := xAddrVert;
				filterHorEdges();
			end
		end
		xAddrHor := xAddrVert;
		yAddrHor := yAddrVert;
	end

	sendSamples.launch.x64: action ==> FiltSample:[filtSamp] repeat 64 * 64
	guard
		tileIdx < numTiles && blockSent < picSizeInMb[0] * picSizeInMb[1],
		lcuSizeMax = 64
	var
		uint(size=8) filtSamp[64 * 64]
	do
		foreach int y in 0 .. 63
		do
			foreach int x in 0 .. 63
			do
				filtSamp[y * 64 + x] := pictureBuffer[yIdx + y][xIdx + x];
			end
		end
		blockSent := blockSent + 1;
		computeNextLcuAddr();
	end

	sendSamples.launch.x32: action ==> FiltSample:[filtSamp] repeat 32 * 32
	guard
		tileIdx < numTiles && blockSent < picSizeInMb[0] * picSizeInMb[1],
		lcuSizeMax = 32
	var
		uint(size=8) filtSamp[32 * 32]
	do
		foreach int y in 0 .. 31
		do
			foreach int x in 0 .. 31
			do
				filtSamp[y * 32 + x] := pictureBuffer[yIdx + y][xIdx + x];
			end
		end
		blockSent := blockSent + 1;
		computeNextLcuAddr();
	end
	
	sendSamples.launch.x16: action ==> FiltSample:[filtSamp] repeat 16 * 16
	guard
		tileIdx < numTiles && blockSent < picSizeInMb[0] * picSizeInMb[1],
		lcuSizeMax = 16
	var
		uint(size=8) filtSamp[16 * 16]
	do
		foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				filtSamp[y * 16 + x] := pictureBuffer[yIdx + y][xIdx + x];
			end
		end
		blockSent := blockSent + 1;
		computeNextLcuAddr();
	end

	sendSamples.done: action ==>
	guard
		blockSent = picSizeInMb[0] * picSizeInMb[1]
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict )--> GetNumTiles;

		GetCuPix  (isNewSlc                          )--> GetNumTiles;
		GetCuPix  (getCuPix.launch.pict              )--> GetPartition;
		GetCuPix  (getCuPix.launch.lastColOrRow.vert )--> GetBlk;
		GetCuPix  (getCuPix.done                     )--> SendSamples;

		GetPartition (getCuPix.launch.getPart     )--> GetPartition;
		GetPartition (getCuPix.launch.getPartDone )--> FilterEdges;

		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetCuPix;

		GetBlk (getBlk.launch )--> GetBlk;
		GetBlk (getBlk.skip   )--> GetBlk;
		GetBlk (getBlk.done   )--> FilterEdges;

		FilterEdges (filterEdges  )--> GetCuPix;

		SendSamples (sendSamples.launch )--> SendSamples;
		SendSamples (sendSamples.done   )--> IsNewPict;
	end
end
