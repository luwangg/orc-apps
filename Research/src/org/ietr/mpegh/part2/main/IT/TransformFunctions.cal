package org.ietr.mpegh.part2.main.IT;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.main.IT.CommonConstant.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

unit TransformFunctions : 

	int MAX_TR_DYNAMIC_RANGE = 15; // Maximum transform dynamic range (excluding sign bit)
	int BIT_DEPTH = 8; // assuming 8bits for samples
	
	function clip_i16(int(size=32) value)
				-->
			int(size=16) :
		clip_i32(value, -32768, 32767)
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_8_sse4")
	procedure transform_4x4_skip(int(size=16) dst[4*4], int(size=16) coeff[4*4], int stride)
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 2,
		int offset = (1 << (shift -1))	
	begin
		dst := [(coeff[i] + offset) >> shift: for int i in 0 .. 15];
	end
	
	procedure tr_4x4_luma_1d(int(size=16) src[4*4], int(size=16) dst[4*4], int(size=8) shift)
	var
		int(size=16) add = 1 << (shift-1),
		int c0, int c1,	int c2,	int c3
	begin
		foreach int i in 0 .. 3
		do
			c0 := src[  i] + src[ 8+i];
	    	c1 := src[8+i] + src[12+i];
	    	c2 := src[  i] - src[12+i];
	    	c3 := 74 * src[4+i];
		    
		    dst[4*i+0] := clip_i16((29 * c0 + 55 * c1 + c3               + add) >> shift);
		    dst[4*i+1] := clip_i16((55 * c2 - 29 * c1 + c3               + add) >> shift);
		    dst[4*i+2] := clip_i16((74 * (src[i] - src[8+i] + src[12+i]) + add) >> shift);
		    dst[4*i+3] := clip_i16((55 * c0 + 29 * c2 - c3               + add) >> shift);
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_4x4_luma_8_sse4")
	procedure transform_4x4_luma(int(size=16) dst[4*4], int(size=16) coeff[4*4], int stride)
	var
		int(size=16) block[4*4]
	begin
		tr_4x4_luma_1d(coeff, block, 7);
		tr_4x4_luma_1d(block, dst, 12);
	end
	
	procedure tr_4x4_1d(int(size=16) src[4*4], int(size=16) dst[4*4], int shift)
 	var    
 		int e0, int e1, int o0, int o1,
		int add = 1 << (shift - 1)
	begin
		foreach int i in 0 .. 3 do
			e0 := src[i+4*0] * g_aiT4[0][0] + src[i+4*2] * g_aiT4[2][0];
			e1 := src[i+4*0] * g_aiT4[0][1] + src[i+4*2] * g_aiT4[2][1];        
			o0 := src[i+4*1] * g_aiT4[1][0] + src[i+4*3] * g_aiT4[3][0];
			o1 := src[i+4*1] * g_aiT4[1][1] + src[i+4*3] * g_aiT4[3][1];                      
			
			dst[4*i+0] := (e0 + o0 + add) >> shift;
			dst[4*i+1] := (e1 + o1 + add) >> shift;
			dst[4*i+2] := (e1 - o1 + add) >> shift;
			dst[4*i+3] := (e0 - o0 + add) >> shift;
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_4x4_8_sse4")
	procedure transform_4x4(int(size=16) dst[4*4], int(size=16) coeff[4*4], int stride)
	var
		int(size=16) block[4*4]
	begin
		tr_4x4_1d(coeff, block, 7);
		tr_4x4_1d(block, dst, 12);
	end
	
	// @optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_skip_8_sse")
	procedure transform_8x8_skip(int(size=16) dst[8*8], int(size=16) coeff[8*8], int stride)
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 3,
		int offset = (1 << (shift -1))
	begin
		dst := [(coeff[i] + offset) >> shift: for int i in 0 .. 63];
	end
	
	procedure tr_8x8_1d(int(size=16) src[8*8], int(size=16) dst[8*8], int shift)
	var
		int e0, int e1, int o0, int o1,
		int e_8[4], int o_8[4],
		int add = 1 << (shift - 1)
	begin
		foreach int i in 0 .. 7 do
			e0 := src[i+8*0] * g_aiT8[0][0] + src[i+8*4] * g_aiT8[4][0];
			e1 := src[i+8*0] * g_aiT8[0][1] + src[i+8*4] * g_aiT8[4][1];
			o0 := src[i+8*2] * g_aiT8[2][0] + src[i+8*6] * g_aiT8[6][0];
			o1 := src[i+8*2] * g_aiT8[2][1] + src[i+8*6] * g_aiT8[6][1];
			
			e_8[0] := e0 + o0;
			e_8[1] := e1 + o1;
			e_8[2] := e1 - o1;
			e_8[3] := e0 - o0;
			
			foreach int k in 0 .. 3 do
				o_8[k] := 0;
				foreach int j in 0 .. 3 do
					o_8[k] := o_8[k] + src[i+8*(2*j+1)] * g_aiT8[2*j+1][k];
				end
			end
			
			foreach int j in 0 .. 3 do
				dst[8*i+ j  ] := (e_8[j]   + o_8[j]   + add) >> shift;
				dst[8*i+ j+4] := (e_8[3-j] - o_8[3-j] + add) >> shift;
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_8x8_8_sse4")
	procedure transform_8x8(int(size=16) dst[8*8], int(size=16) coeff[8*8], int stride)
	var
		int(size=16) block[8*8]
	begin
		tr_8x8_1d(coeff, block, 7);
		tr_8x8_1d(block, dst, 12);
	end
	
	// @optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_skip_8_sse4")
	procedure transform_16x16_skip(int(size=16) dst[16*16], int(size=16) coeff[16*16], int stride)
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 4,
		int offset = (1 << (shift -1))
	begin
		dst := [(coeff[i] + offset) >> shift: for int i in 0 .. 255];
	end

	procedure tr_16x16_1d(int(size=16) src[16*16], int(size=16) dst[16*16], int(size=8) shift)
	var
		int e0, int e1, int o0, int o1,
		int e_8[4], int o_8[4],
		int e_16[8], int o_16[8],
   		int add = 1 << (shift - 1)
	begin
		foreach int i in 0 .. 15
		do
			e0 := src[i+16*0] * g_aiT16[0][0] + src[i+16*8]  * g_aiT16[8][0];
			e1 := src[i+16*0] * g_aiT16[0][1] + src[i+16*8]  * g_aiT16[8][1];
			o0 := src[i+16*4] * g_aiT16[4][0] + src[i+16*12] * g_aiT16[12][0];
			o1 := src[i+16*4] * g_aiT16[4][1] + src[i+16*12] * g_aiT16[12][1];
			
			e_8[0] := e0 + o0;
			e_8[1] := e1 + o1;
			e_8[2] := e1 - o1;
			e_8[3] := e0 - o0;
			
			foreach int k in 0 .. 3 do
				o_8[k] := 0;
				foreach int j in 0 .. 3 do
					o_8[k] := o_8[k] + src[i+16*(4*j+2)] * g_aiT16[4*j+2][k];
				end
			end
			
			foreach int j in 0 .. 3 do
				e_16[j  ] := e_8[j]   + o_8[j];
				e_16[j+4] := e_8[3-j] - o_8[3-j];
			end
			
			foreach int k in 0 .. 7 do
				o_16[k] := 0;
				foreach int j in 0 .. 7 do
					o_16[k] := o_16[k] + src[i+16*(2*j+1)] * g_aiT16[2*j+1][k];
				end
			end
			
			foreach int j in 0 .. 7 do
				dst[16*i+ j  ] := (e_16[  j] + o_16[  j] + add) >> shift;
				dst[16*i+ j+8] := (e_16[7-j] - o_16[7-j] + add) >> shift;
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_16x16_8_sse4")
	procedure transform_16x16(int(size=16) dst[16*16], int(size=16) coeff[16*16], int stride)
	var
		int(size=16) block[16*16]
	begin
		tr_16x16_1d(coeff, block, 7);
		tr_16x16_1d(block, dst, 12);
	end
	
	//@optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_skip_8_sse4")
	procedure transform_32x32_skip(int(size=16) dst[32*32], int(size=16) coeff[32*32], int stride)
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 5,
		int offset = (1 << (shift -1))
	begin
		dst := [(coeff[i] + offset) >> shift: for int i in 0 .. 1023];
	end	

	procedure tr_32x32_1d(int(size=16) src[32*32], int(size=16) dst[32*32], int(size=8) shift)
	var
		int e0, int e1, int o0, int o1,
		int e_8[4], int o_8[4],
		int e_16[8], int o_16[8],
		int e_32[16], int o_32[16],
		int add = 1 << (shift - 1)
	begin
		foreach int i in 0 .. 31
		do  
			e0 := src[i+32*0] * g_aiT32[0][0] + src[i+32*16] * g_aiT32[16][0];
			e1 := src[i+32*0] * g_aiT32[0][1] + src[i+32*16] * g_aiT32[16][1];
			o0 := src[i+32*8] * g_aiT32[8][0] + src[i+32*24] * g_aiT32[24][0];
			o1 := src[i+32*8] * g_aiT32[8][1] + src[i+32*24] * g_aiT32[24][1];
			
			e_8[0] := e0 + o0;
			e_8[1] := e1 + o1;
			e_8[2] := e1 - o1;
			e_8[3] := e0 - o0;
			
			foreach int k in 0 .. 3 do
				o_8[k] := 0;
				foreach int j in 0 .. 3 do
					o_8[k] := o_8[k] + src[i+32*(8*j+4)] * g_aiT32[8*j+4][k];
				end
			end
			
			foreach int j in 0 .. 3 do
				e_16[j  ] := e_8[j]   + o_8[j];
				e_16[j+4] := e_8[3-j] - o_8[3-j];
			end
			
			foreach int k in 0 .. 7 do
				o_16[k] := 0;
				foreach int j in 0 .. 7 do
					o_16[k] := o_16[k] + src[i+32*(4*j+2)] * g_aiT32[4*j+2][k];
				end
			end
			
			foreach int j in 0 .. 7 do
				e_32[j  ] := e_16[j]   + o_16[  j];
				e_32[j+8] := e_16[7-j] - o_16[7-j];
			end
			
			foreach int k in 0 .. 15 do
				o_32[k] := 0;
				foreach int j in 0 .. 15 do
					o_32[k] := o_32[k] + src[i+32*(2*j+1)] * g_aiT32[2*j+1][k];
				end
			end
			
			foreach int j in 0 .. 15 do
				dst[32*i+ j   ] := (e_32[  j]  + o_32[  j]  + add) >> shift;
				dst[32*i+ j+16] := (e_32[15-j] - o_32[15-j] + add) >> shift;
			end
		end
	end
		
	@optimize_c(condition="defined(SSE_ENABLE)", name="ff_hevc_transform_32x32_8_sse4")
	procedure transform_32x32(int(size=16) dst[32*32], int(size=16) coeff[32*32], int stride)
	var
		int(size=16) block[32*32]
	begin
		tr_32x32_1d(coeff, block, 7);
		tr_32x32_1d(block, dst, 12);
	end
	
	
	/* ZScan */
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_4_2_zscan_sse")
	procedure transform_4x4_2_skip_zscan(int(size=16) dst[4*4], int(size=16) coeff[4*4])
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 2,
		int offset = (1 << (shift -1)),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp	
	begin
		foreach int i in 0 .. 3
		do
		  zScanIdxTmp := ((i & 1) << 1) + (i >> 1) * 8;
		  foreach int j in 0 .. 3
		  do
		    zScanIdx := zScanIdxTmp + (j & 1) + ((j >> 1) << 2);
		    dst[zScanIdx] := (coeff[(i * 4) + j] + offset) >> shift;
		  end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_8_4_zscan_sse")
	procedure transform_8x8_4_skip_zscan(int(size=16) dst[8*8], int(size=16) coeff[8*8])
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 3,
		int offset = (1 << (shift -1)),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
	    foreach int i in 0 .. 7 do
	      zScanIdxTmp := (i & 3) * 4 + (i & 4) * 8 + (i & 8) * 16 + (i & 16) * 32;
	      foreach int j in 0 .. 7 do
	        zScanIdx := zScanIdxTmp + (j & 3) + (j & 4) * 4 + (j & 8) * 8 + (j & 16) * 16;
		    dst[zScanIdx] := (coeff[i] + offset) >> shift;
		  end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_8_2_zscan_sse")
	procedure transform_8x8_2_skip_zscan(int(size=16) dst[8*8], int(size=16) coeff[8*8])
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 3,
		int offset = (1 << (shift -1)),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
	    foreach int i in 0 .. 7 do
	      zScanIdxTmp := (i & 1) * 2 + (i & 2) * 4 + (i & 4) * 8 + (i & 8) * 16;
	      foreach int j in 0 .. 7 do
	        zScanIdx := zScanIdxTmp + (j & 1) + (j & 2) * 2 + (j & 4) * 4 + (j & 8) * 8;
		    dst[zScanIdx] := (coeff[i] + offset) >> shift;
		  end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_16_4_zscan_sse")
	procedure transform_16x16_4_skip_zscan(int(size=16) dst[16*16], int(size=16) coeff[16*16])
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 4,
		int offset = (1 << (shift -1)),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
	    foreach int i in 0 .. 15 do
	      zScanIdxTmp := (i & 3) * 4 + (i & 4) * 8 + (i & 8) * 16 + (i & 16) * 32;
		  foreach int j in 0 .. 15 do
		    zScanIdx := zScanIdxTmp + (j & 3) + (j & 4) * 4 + (j & 8) * 8 + (j & 16) * 16;
		    dst[zScanIdx] := (coeff[i] + offset) >> shift;
		  end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_16_2_zscan_sse")
	procedure transform_16x16_2_skip_zscan(int(size=16) dst[16*16], int(size=16) coeff[16*16])
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 4,
		int offset = (1 << (shift -1)),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
	    foreach int i in 0 .. 15 do
	      zScanIdxTmp := (i & 1) * 2 + (i & 2) * 4 + (i & 4) * 8 + (i & 8) * 16;
		  foreach int j in 0 .. 15 do
		    zScanIdx := zScanIdxTmp + (j & 1) + (j & 2) * 2 + (j & 4) * 4 + (j & 8) * 8;
		    dst[zScanIdx] := (coeff[i] + offset) >> shift;
		  end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_skip_32_4_zscan_sse")
	procedure transform_32x32_skip_zscan(int(size=16) dst[32*32], int(size=16) coeff[32*32])
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 5,
		int offset = (1 << (shift -1)),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
	    foreach int i in 0 .. 31 do 
	      zScanIdxTmp := (i & 3) * 4 + (i & 4) * 8 + (i & 8) * 16 + (i & 16) * 32;
	      foreach int j in 0 .. 31 do
	        zScanIdx := zScanIdxTmp + (j & 3) + (j & 4) * 4 + (j & 8) * 8 + (j & 16) * 16;
		    dst[zScanIdx] := (coeff[i] + offset) >> shift;
		  end
		end
	end
	
	procedure tr_4x4_1d_zscan(int(size=16) src[4*4], int(size=16) dst[4*4], int shift, int stride, uint(size=6) offset)
 	var    
 		int e0, int e1, int o0, int o1,
		int add = 1 << (shift - 1),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
		foreach int i in 0 .. 3 do
		    zScanIdxTmp := offset + ((i & ((stride << 1) - 1)) << stride) + (i >> stride) * (4 << stride);
		    
			e0 := src[i+4*0] * g_aiT4[0][0] + src[i+4*2] * g_aiT4[2][0];
			e1 := src[i+4*0] * g_aiT4[0][1] + src[i+4*2] * g_aiT4[2][1];        
			o0 := src[i+4*1] * g_aiT4[1][0] + src[i+4*3] * g_aiT4[3][0];
			o1 := src[i+4*1] * g_aiT4[1][1] + src[i+4*3] * g_aiT4[3][1];                      
			
			zScanIdx := zScanIdxTmp;
			dst[zScanIdx] := (e0 + o0 + add) >> shift;
			
			zScanIdx := zScanIdxTmp + (1 & ((stride << 1) - 1));
			dst[zScanIdx] := (e1 + o1 + add) >> shift;
			
			zScanIdx := zScanIdxTmp + (2 & ((stride << 1) - 1)) + ((2 >> stride) << (stride << 1));
			dst[zScanIdx] := (e1 - o1 + add) >> shift;
			
			zScanIdx := zScanIdxTmp + (3 & ((stride << 1) - 1)) + ((3 >> stride) << (stride << 1));
			dst[zScanIdx] := (e0 - o0 + add) >> shift;
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_4x4_8_zscan_sse4")
	procedure transform_4x4_zscan(int(size=16) dst[4*4], int(size=16) coeff[4*4], int stride, uint(size=6) offset)
	var
		int(size=16) block[4*4]
	begin
		tr_4x4_1d(coeff, block, 7);
		tr_4x4_1d_zscan(block, dst, 12, stride, offset);
	end
	
	procedure tr_8x8_1d_zscan(int(size=16) src[8*8], int(size=16) dst[8*8], int shift, int stride)
	var
		int e0, int e1, int o0, int o1,
		int e_8[4], int o_8[4],
		int add = 1 << (shift - 1),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
		foreach int i in 0 .. 7 do
		    zScanIdxTmp := (i & (stride - 1)) * stride + (i & stride) * (stride << 1) + (i & (stride << 1)) * (stride << 2) + (i & (stride << 2)) * (stride << 3);
		    
			e0 := src[i+8*0] * g_aiT8[0][0] + src[i+8*4] * g_aiT8[4][0];
			e1 := src[i+8*0] * g_aiT8[0][1] + src[i+8*4] * g_aiT8[4][1];
			o0 := src[i+8*2] * g_aiT8[2][0] + src[i+8*6] * g_aiT8[6][0];
			o1 := src[i+8*2] * g_aiT8[2][1] + src[i+8*6] * g_aiT8[6][1];
			
			e_8[0] := e0 + o0;
			e_8[1] := e1 + o1;
			e_8[2] := e1 - o1;
			e_8[3] := e0 - o0;
			
			foreach int k in 0 .. 3 do
				o_8[k] := 0;
				foreach int j in 0 .. 3 do
					o_8[k] := o_8[k] + src[i+8*(2*j+1)] * g_aiT8[2*j+1][k];
				end
			end
			
			foreach int j in 0 .. 3 do
			    zScanIdx := zScanIdxTmp + (j & (stride - 1)) + (j & stride) * stride + (j & (stride << 1)) * (stride << 1) + (j & (stride << 2)) * (stride << 2);
				dst[zScanIdx] := (e_8[  j] + o_8[  j] + add) >> shift;
				zScanIdx := zScanIdxTmp + ((j + 4) & (stride - 1)) + ((j + 4) & stride) * stride + ((j + 4) & (stride << 1)) * (stride << 1) + ((j + 4) & (stride << 2)) * (stride << 2);
				dst[zScanIdx] := (e_8[3-j] - o_8[3-j] + add) >> shift;
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_8x8_8_zscan_sse4")
	procedure transform_8x8_zscan(int(size=16) dst[8*8], int(size=16) coeff[8*8], int stride)
	var
		int(size=16) block[8*8]
	begin
		tr_8x8_1d(coeff, block, 7);
		tr_8x8_1d_zscan(block, dst, 12, stride);
	end
	
	procedure tr_16x16_1d_zscan(int(size=16) src[16*16], int(size=16) dst[16*16], int(size=8) shift, int stride)
	var
		int e0, int e1, int o0, int o1,
		int e_8[4], int o_8[4],
		int e_16[8], int o_16[8],
   		int add = 1 << (shift - 1),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
		foreach int i in 0 .. 15
		do
		    zScanIdxTmp := (i & (stride - 1)) * stride + (i & stride) * (stride << 1) + (i & (stride << 1)) * (stride << 2) + (i & (stride << 2)) * (stride << 3);
		    
			e0 := src[i+16*0] * g_aiT16[0][0] + src[i+16*8]  * g_aiT16[8][0];
			e1 := src[i+16*0] * g_aiT16[0][1] + src[i+16*8]  * g_aiT16[8][1];
			o0 := src[i+16*4] * g_aiT16[4][0] + src[i+16*12] * g_aiT16[12][0];
			o1 := src[i+16*4] * g_aiT16[4][1] + src[i+16*12] * g_aiT16[12][1];
			
			e_8[0] := e0 + o0;
			e_8[1] := e1 + o1;
			e_8[2] := e1 - o1;
			e_8[3] := e0 - o0;
			
			foreach int k in 0 .. 3 do
				o_8[k] := 0;
				foreach int j in 0 .. 3 do
					o_8[k] := o_8[k] + src[i+16*(4*j+2)] * g_aiT16[4*j+2][k];
				end
			end
			
			foreach int j in 0 .. 3 do
				e_16[j  ] := e_8[j]   + o_8[j];
				e_16[j+4] := e_8[3-j] - o_8[3-j];
			end
			
			foreach int k in 0 .. 7 do
				o_16[k] := 0;
				foreach int j in 0 .. 7 do
					o_16[k] := o_16[k] + src[i+16*(2*j+1)] * g_aiT16[2*j+1][k];
				end
			end
			
			foreach int j in 0 .. 7 do
				zScanIdx := zScanIdxTmp + (j & (stride - 1)) + (j & stride) * stride + (j & (stride << 1)) * (stride << 1) + (j & (stride << 2)) * (stride << 2);
				dst[zScanIdx] := (e_16[  j] + o_16[  j] + add) >> shift;
				zScanIdx := zScanIdxTmp + ((j + 8) & (stride - 1)) + ((j + 8) & stride) * stride + ((j + 8) & (stride << 1)) * (stride << 1) + ((j + 8) & (stride << 2)) * (stride << 2);
				dst[zScanIdx] := (e_16[7-j] - o_16[7-j] + add) >> shift;
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_16x16_8_zscan_sse4")
	procedure transform_16x16_zscan(int(size=16) dst[16*16], int(size=16) coeff[16*16], int stride)
	var
		int(size=16) block[16*16]
	begin
		tr_16x16_1d(coeff, block, 7);
		tr_16x16_1d_zscan(block, dst, 12, stride);
	end
	
	procedure tr_32x32_1d_zscan(int(size=16) src[32*32], int(size=16) dst[32*32], int(size=8) shift, int stride)
	var
		int e0, int e1, int o0, int o1,
		int e_8[4], int o_8[4],
		int e_16[8], int o_16[8],
		int e_32[16], int o_32[16],
		int add = 1 << (shift - 1),
		uint(size=16) zScanIdx,
	    uint(size=16) zScanIdxTmp
	begin
		foreach int i in 0 .. 31
		do
		    zScanIdxTmp := (i & (stride - 1)) * stride + (i & stride) * (stride << 1) + (i & (stride << 1)) * (stride << 2) + (i & (stride << 2)) * (stride << 3);
		    
			e0 := src[i+32*0] * g_aiT32[0][0] + src[i+32*16] * g_aiT32[16][0];
			e1 := src[i+32*0] * g_aiT32[0][1] + src[i+32*16] * g_aiT32[16][1];
			o0 := src[i+32*8] * g_aiT32[8][0] + src[i+32*24] * g_aiT32[24][0];
			o1 := src[i+32*8] * g_aiT32[8][1] + src[i+32*24] * g_aiT32[24][1];
			
			e_8[0] := e0 + o0;
			e_8[1] := e1 + o1;
			e_8[2] := e1 - o1;
			e_8[3] := e0 - o0;
			
			foreach int k in 0 .. 3 do
				o_8[k] := 0;
				foreach int j in 0 .. 3 do
					o_8[k] := o_8[k] + src[i+32*(8*j+4)] * g_aiT32[8*j+4][k];
				end
			end
			
			foreach int j in 0 .. 3 do
				e_16[j  ] := e_8[j]   + o_8[j];
				e_16[j+4] := e_8[3-j] - o_8[3-j];
			end
			
			foreach int k in 0 .. 7 do
				o_16[k] := 0;
				foreach int j in 0 .. 7 do
					o_16[k] := o_16[k] + src[i+32*(4*j+2)] * g_aiT32[4*j+2][k];
				end
			end
			
			foreach int j in 0 .. 7 do
				e_32[j  ] := e_16[j]   + o_16[  j];
				e_32[j+8] := e_16[7-j] - o_16[7-j];
			end
			
			foreach int k in 0 .. 15 do
				o_32[k] := 0;
				foreach int j in 0 .. 15 do
					o_32[k] := o_32[k] + src[i+32*(2*j+1)] * g_aiT32[2*j+1][k];
				end
			end
			
			foreach int j in 0 .. 15 do
			    zScanIdx := zScanIdxTmp + (j & (stride - 1)) + (j & stride) * stride + (j & (stride << 1)) * (stride << 1) + (j & (stride << 2)) * (stride << 2);
				dst[zScanIdx] := (e_32[  j]  + o_32[  j]  + add) >> shift;
				zScanIdx := zScanIdxTmp + ((j + 16) & (stride - 1)) + ((j + 16) & stride) * stride + ((j + 16) & (stride << 1)) * (stride << 1) + ((j + 16) & (stride << 2)) * (stride << 2);
				dst[zScanIdx] := (e_32[15-j] - o_32[15-j] + add) >> shift;
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="ff_hevc_transform_32x32_8_zscan_sse4")
	procedure transform_32x32_zscan(int(size=16) dst[32*32], int(size=16) coeff[32*32], int stride)
	var
		int(size=16) block[32*32]
	begin
		tr_32x32_1d(coeff, block, 7);
		tr_32x32_1d_zscan(block, dst, 12, stride);
	end
	
end
