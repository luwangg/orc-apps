// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 
// modified by: Damien de Saint Jorre <damien.desaintjorre@epfl.ch>

package org.ietr.mpegh.part2.main.IT;

import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.ietr.mpegh.part2.main.IT.TransformFunctions.*;

actor IT_yuv()
	int(size=8)  Size,                                          
	int(size=16) Coeff
		==>                                    
	int(size=16)  Block_y 
		:
	
 	uint(size=2) cIdx := 0;
 	uint(size=3) blk4x4Idx := 0;

	procedure incIdx(int tuSize)
	begin
		if(tuSize = 4 and cIdx = 0) then
			blk4x4Idx := blk4x4Idx + 1;
			if(blk4x4Idx = 4) then
				blk4x4Idx := 0;
				cIdx := cIdx + 1;
			end
		else
			cIdx := cIdx + 1;
		end
	end

	getCoeff.isLuma.is4x4: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 4*4
			==>
		Block_y:[blockY] repeat 4*4
	guard
		cIdx = 0 and sizeOfTU = 4 and RCskip = 0
	var
		int(size=8) tuSize = 4,
		int(size=16) blockY[4*4]
	do
		if(transfSkipFlag = 1) then
		    transform_4x4_skip(blockY, coeff, 4);
		elsif(isDST = 1) then
			transform_4x4_luma(blockY, coeff, 2);
		else
			transform_4x4(blockY, coeff, 2);
		end

		incIdx(tuSize);
	end
	
	getCoeff.isChromaU.is4x4: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 4*4
			==>
		
	guard
		cIdx = 1 and sizeOfTU = 4 and RCskip = 0
	var
		int(size=8) tuSize = 4,
		int(size=16) blockU[4*4]
	do
		if(transfSkipFlag = 1) then
			transform_4x4_2_skip_zscan(blockU, coeff);
		else
			transform_4x4_zscan(blockU, coeff, 1, 0);
		end

		incIdx(tuSize);
	end
	
	getCoeff.isChromaV.is4x4: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 4*4
			==>
		
	guard
		cIdx = 2 and sizeOfTU = 4 and RCskip = 0
	var
		int(size=16) blockV[4*4]
	do
		if(transfSkipFlag = 1) then
			transform_4x4_2_skip_zscan(blockV, coeff);
		else
			transform_4x4_zscan(blockV, coeff, 1, 0);
		end

        cIdx := 0;
	end

	getCoeff.isLuma.is4x4.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		Block_y:[blockY] repeat 4*4
	guard
		cIdx = 0 and sizeOfTU = 4 and RCskip != 0
	var
		int(size=8) tuSize = 4,
		int(size=16) blockY[4*4]
	do
		foreach int i in 0 .. 15
		do
		  blockY[i] := 0;
		end
		
		incIdx(tuSize);
	end
	
	getCoeff.isChromaU.is4x4.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		
	guard
		cIdx = 1 and sizeOfTU = 4 and RCskip != 0
	var
		int(size=8) tuSize = 4,
		int(size=16) blockU[4*4]
	do
		blockU := [0: for int i in 0 .. 15];
		
		incIdx(tuSize);
	end
	
	getCoeff.isChromaV.is4x4.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		
	guard
		cIdx = 2 and sizeOfTU = 4 and RCskip != 0
	var
		int(size=16) blockV[4*4]
	do
		
		blockV := [0: for int i in 0 .. 15];
		
		cIdx := 0;
	end

	getCoeff.isLuma.is8x8: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 8*8
			==>
		Block_y:[blockY] repeat 8*8
	guard
		cIdx = 0 and sizeOfTU = 8 and RCskip = 0
	var
		int(size=8) tuSize = 8,
		int(size=16) blockY[8*8]
	do
		if(transfSkipFlag = 1) then
			transform_8x8_4_skip_zscan(blockY, coeff);
		else
			transform_8x8_zscan(blockY, coeff, 4);
		end

		incIdx(tuSize);
	end
	
	getCoeff.isChromaU.is8x8: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 8*8
			==>
		
	guard
		cIdx = 1 and sizeOfTU = 8 and RCskip = 0
	var
		int(size=8) tuSize = 8,
		int(size=16) blockU[8*8]
	do
		if(transfSkipFlag = 1) then
			transform_8x8_2_skip_zscan(blockU, coeff);
		else
			transform_8x8_zscan(blockU, coeff, 2);
		end

		incIdx(tuSize);
	end
	
	getCoeff.isChromaV.is8x8: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 8*8
			==>
		
	guard
		cIdx = 2 and sizeOfTU = 8 and RCskip = 0
	var
		int(size=16) blockV[8*8]
	do
		if(transfSkipFlag = 1) then
			transform_8x8_2_skip_zscan(blockV, coeff);
		else
			transform_8x8_zscan(blockV, coeff, 1);
		end
		
		cIdx := 0;
	end

	getCoeff.isLuma.is8x8.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		Block_y:[blockY] repeat 8*8
	guard
		cIdx = 0 and sizeOfTU = 8 and RCskip != 0
	var
		int(size=8) tuSize = 8,
		int(size=16) blockY[8*8]
	do
		blockY := [0: for int i in 0 .. 63];
		
		incIdx(tuSize);
	end
	
	getCoeff.isChromaU.is8x8.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		
	guard
		cIdx = 1 and sizeOfTU = 8 and RCskip != 0
	var
		int(size=8) tuSize = 8,
		int(size=16) blockU[8*8]
	do
		blockU := [0: for int i in 0 .. 63];
		
		incIdx(tuSize);
	end
	
	getCoeff.isChromaV.is8x8.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		
	guard
		cIdx = 2 and sizeOfTU = 8 and RCskip != 0
	var
		int(size=16) blockV[8*8]
	do
		blockV := [0: for int i in 0 .. 63];
		
		cIdx := 0;
	end

	getCoeff.isLuma.is16x16: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 16*16
			==>
		Block_y:[blockY] repeat 16*16
	guard
		cIdx = 0 and sizeOfTU = 16 and RCskip = 0
	var
		int(size=8) tuSize = 16,
		int(size=16) blockY[16*16]
	do
		if(transfSkipFlag = 1) then
			transform_16x16_4_skip_zscan(blockY, coeff);
		else
			transform_16x16_zscan(blockY, coeff, 4);
		end

		incIdx(tuSize);
	end
	
	getCoeff.isChromaU.is16x16: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 16*16
			==>
		
	guard
		cIdx = 1 and sizeOfTU = 16 and RCskip = 0
	var
		int(size=8) tuSize = 16,
		int(size=16) blockU[16*16]
	do
		if(transfSkipFlag = 1) then
			transform_16x16_2_skip_zscan(blockU, coeff);
		else
			transform_16x16_zscan(blockU, coeff, 2);
		end

		incIdx(tuSize);
	end
	
	getCoeff.isChromaV.is16x16: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 16*16
			==>
		
	guard
		cIdx = 2 and sizeOfTU = 16 and RCskip = 0
	var
		int(size=16) blockV[16*16]
	do
		if(transfSkipFlag = 1) then
			transform_16x16_2_skip_zscan(blockV, coeff);
		else
			transform_16x16_zscan(blockV, coeff, 2);
		end
		
		cIdx := 0;
	end

	getCoeff.isLuma.is16x16.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		Block_y:[blockY] repeat 16*16
	guard
		cIdx = 0 and sizeOfTU = 16 and RCskip != 0
	var
		int(size=8) tuSize = 16,
		int(size=16) blockY[16*16]
	do
		blockY := [0: for int i in 0 .. 255];
		
		incIdx(tuSize);
	end
	
	getCoeff.isChromaU.is16x16.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		
	guard
		cIdx = 1 and sizeOfTU = 16 and RCskip != 0
	var
		int(size=8) tuSize = 16,
		int(size=16) blockU[16*16]
	do
		blockU := [0: for int i in 0 .. 255];
		
		incIdx(tuSize);
	end
	
	getCoeff.isChromaV.is16x16.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		
	guard
		cIdx = 2 and sizeOfTU = 16 and RCskip != 0
	var
		int(size=16) blockV[16*16]
	do
		blockV := [0: for int i in 0 .. 255];
		
		cIdx := 0;
	end

	/* cIdx will be 0 */
	getCoeff.is32x32: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff],
		Coeff:[coeff] repeat 32*32
			==>
		Block_y:[blockY] repeat 32*32
	guard
		sizeOfTU = 32 and RCskip = 0
	var
		int(size=8) tuSize = 32,
		int(size=16) blockY[32*32]
	do
		if(transfSkipFlag = 1) then
			transform_32x32_skip_zscan(blockY, coeff);
		else
			transform_32x32_zscan(blockY, coeff, 4);
		end
		
		incIdx(tuSize);
	end

	getCoeff.is32x32.skip: action
		Size:[sizeOfTU, RCskip, isDST, transfSkipFlag, slcQp, rcCIdx, qpOff]
			==>
		Block_y:[blockY] repeat 32*32
	guard
		sizeOfTU = 32 and RCskip != 0
	var
	    int(size=16) blockY[32*32]
	do
		blockY := [0: for int i in 0 .. 1023];
		incIdx(32);
	end

	getCoeff_is64x64: action
		Size:[param] repeat 7*3
			==>
		Block_y:[[0: for int i in 0 .. 4095]] repeat 4096
	guard
		param[0] = 64
	end

	schedule fsm GetCoeff:
		GetCoeff  (getCoeff         )--> GetCoeff;
		GetCoeff  (getCoeff_is64x64 )--> GetCoeff;
	end
end
