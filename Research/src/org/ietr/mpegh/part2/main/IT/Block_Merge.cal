// Authors: Eduardo Juarez, Wei Jianguo and Ren Rong <eduardo.juarez@upm.es> of UPM (Spain) 

package org.ietr.mpegh.part2.main.IT;  

actor Block_Merge() int(size=8)   Size,                                          
                   int(size=16)  Block_in
                   ==>                                    
                   int(size=16)  Block_y 
                   :
	 int(size=16) CoeffY[1024];
	 int(size=16) CoeffU[256];
	 int(size=16) CoeffV[256];
	uint(size= 8) block4x4Idx := 0;
	uint(size= 8) nbBlock4x4;
	uint(size= 16) scan16x16_UV_offset[4] = [0,  8, 16 * 8, (16 * 8) +  8]; 
	uint(size= 16) scan8x8_UV_offset[4]   = [0,  4, 16 * 4, (16 * 4) +  4]; 
	uint(size= 16) scan4x4_UV_offset[4]   = [0,  2, 16 * 2, (16 * 2) +  2]; 
	uint(size= 16) scan16x16_Y_offset[4]  = [0, 16, 32 * 16, (32 * 16) + 16]; 
	uint(size= 16) scan8x8_Y_offset[4]    = [0,  8, 32 * 8, (32 * 8) +  8]; 
	uint(size= 16) scan4x4_Y_offset[4]    = [0,  4, 32 * 4, (32 * 4) +  4]; 
	
/* 	procedure print_block(int(size=8) sizeOfTU, int(size= 7) RCskip, uint(size=4) eText)
	begin
 		if RCskip = 1 then
			println("gotoPredictionUnit.goto1");
		end
		if RCskip = 2 then
			println("skipResidualCoding");
		end
		println("Merger ACTION: merge_"+sizeOfTU+"x"+sizeOfTU+" : "+if eText = 0 then "Y" elsif eText = 1 then "U" else "V" end);
    	println("------------------------");
    	println("sizeOfTU = "+sizeOfTU);
	end
	
	procedure print_block4x4(int(size=8) sizeOfTU, int(size=16) coeff[16], int(size= 7) RCskip, uint(size=4) eText)
	begin
 		if eText = 0 then
		print_block(sizeOfTU, RCskip, eText);
    	foreach int i in 0 .. sizeOfTU*sizeOfTU - 1 do
      		println("res    = "+coeff[i]);
    	end
    	println("------------------------");
		end
	end	
	procedure print_block8x8(int(size=8) sizeOfTU, int(size=16) coeff[64], int(size= 7) RCskip, uint(size=4) eText)
	begin
 		if eText = 0 then
		print_block(sizeOfTU, RCskip, eText);
    	foreach int i in 0 .. sizeOfTU*sizeOfTU - 1 do
      		println("res    = "+coeff[i]);
    	end
    	println("------------------------");
    	end
	end	
	procedure print_block16x16(int(size=8) sizeOfTU, int(size=16) coeff[256], int(size= 7) RCskip, uint(size=4) eText)
	begin
 		if eText = 0 then
		print_block(sizeOfTU, RCskip, eText);
    	foreach int i in 0 .. sizeOfTU*sizeOfTU - 1 do
      		println("res    = "+coeff[i]);
    	end
    	println("------------------------");
    	end
	end	
	procedure print_block32x32(int(size=8) sizeOfTU, int(size=16) coeff[1024], int(size= 7) RCskip, uint(size=4) eText)
	begin
 		if eText = 0 then
		print_block(sizeOfTU, RCskip, eText);
    	foreach int i in 0 .. sizeOfTU*sizeOfTU - 1 do
      		println("res    = "+coeff[i]);
    	end
    	println("------------------------");
    	end
	end	
	procedure print_block64x64(int(size=8) sizeOfTU, int(size=16) coeff[4096], int(size= 7) RCskip, uint(size=4) eText)
	begin
 		if eText = 0 then
		print_block(sizeOfTU, RCskip, eText);
    	foreach int i in 0 .. sizeOfTU*sizeOfTU - 1do
      		println("res    = "+coeff[i]);
    	end
    	println("------------------------");
    	end
	end

	*/
	/*************************************************************************
	 * Y block 4x4
	 ************************************************************************/
	merge_Y_loop.block4x4: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	         			 		Block_in: [ coeff ] repeat 4*4
	                 	 		==>
	guard
 		sizeOfTU = 4 and block4x4Idx != 3
 	var
 		int(size= 16) offset := 0
	do
		offset := scan4x4_Y_offset[block4x4Idx];			
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffY[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 32 + offset;
		end
		block4x4Idx := block4x4Idx + 1;
//		print_block4x4(sizeOfTU, coeff, RCskip, 0);
	end
	merge_Y.block4x4: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	         			 		Block_in: [ coeff ] repeat 4*4
	                 	 		==>
	guard
		sizeOfTU = 4 and block4x4Idx = 3
 	var
 		int(size= 16) offset := 0
	do
		offset := scan4x4_Y_offset[block4x4Idx];			
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffY[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 32 + offset;
		end
		block4x4Idx := 0;
		nbBlock4x4  := 4;	
//		print_block4x4(sizeOfTU, coeff, RCskip, 0);		
	end
	/*************************************************************************
	 * Y block 8x8
	 ************************************************************************/
	merge_Y.block8x8: action 	Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                   			Block_in: [ coeff ] repeat 8*8 
	                  			==>
	guard
		sizeOfTU = 8
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffY[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 32 + offset;
		end
		nbBlock4x4 := 4;
//		print_block8x8(sizeOfTU, coeff, RCskip, 0);
	end
	/*************************************************************************
	 * Y block 16x16
	 ************************************************************************/
	merge_Y.block16x16: action	Size: 	  [ sizeOfTU, RCskip,isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    		Block_in: [ coeff ] repeat 16*16 
	                    		==>
	guard
		sizeOfTU = 16 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffY[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 32 + offset;
		end
		nbBlock4x4 := 16;
//		print_block16x16(sizeOfTU, coeff, RCskip, 0);
	end	
	/*************************************************************************
	 * Y block 32x32
	 ************************************************************************/	
	merge_Y.block32x32: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    		Block_in: [ coeff ] repeat 32*32 
	                    		==>
	guard
		sizeOfTU = 32 
	do
		foreach int i in 0 .. 1023 do
			CoeffY[i] := coeff[i];
		end
		nbBlock4x4 := 64;
//		print_block32x32(sizeOfTU, coeff, RCskip, 0);
	end	
	/*************************************************************************
	 * Y block 64x64
	 ************************************************************************/	
	merge_Y_64x64: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    		Block_in: [ coeff ] repeat 64*64 
	                    		==>
	                    		Block_y: [ coeff ] repeat 64*64
	guard
		sizeOfTU = 64 
	do
//		print_block64x64(sizeOfTU, coeff, RCskip, 0);	
	end	

	merge_U_64x64: action 	Size:	  [ tmp ] repeat 14, // U & V
	                    		Block_in: [ coeff ] repeat 32*32 
	                    		==>
	                    		//Block_u: [ coeff ] repeat 32*32
	do
//		print_block64x64(tmp[0], coeff, tmp[1], 1);	
	end	
	
	merge_V_64x64: action 		Block_in: [ coeff ] repeat 32*32 
	                    		==>
	                    		//Block_v: [ coeff ] repeat 32*32
	do
//		print_block64x64(tmp[0], coeff, tmp[1], 1);	
	end	

	/*************************************************************************
	 * U block 4x4
	 ************************************************************************/
	merge_U.block4x4: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                 	 		Block_in: [ coeff ] repeat 4*4
	                 	 		==>
	guard
		sizeOfTU = 4 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffU[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 16 + offset;
		end
//		print_block4x4(sizeOfTU, coeff, RCskip, 1);		
	end
	/*************************************************************************
	 * V block 4x4
	 ************************************************************************/	
	merge_V.block4x4: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                 	 		Block_in: [ coeff ] repeat 4*4
	                 	 		==>
	guard
		sizeOfTU = 4 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffV[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 16 + offset;
		end
//		print_block4x4(sizeOfTU, coeff, RCskip, 2);				
	end
	/*************************************************************************
	 * U block 8x8
	 ************************************************************************/
	merge_U.block8x8: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                 	 		Block_in: [ coeff ] repeat 8*8
	                 	 		==>
	guard
		sizeOfTU = 8 
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffU[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 16 + offset;
		end
//		print_block8x8(sizeOfTU, coeff, RCskip, 1);
	end
	/*************************************************************************
	 * V block 8x8
	 ************************************************************************/	
	merge_V.block8x8: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                 	 		Block_in: [ coeff ] repeat 8*8
	                 	 		==>
	guard
		sizeOfTU = 8
	var
		int(size= 16) offset := 0
	do
		foreach int i in 0 .. sizeOfTU-1 do
			foreach int j in 0 .. sizeOfTU-1 do
				CoeffV[offset + j] := coeff[i*sizeOfTU + j];
			end
			offset := 16 + offset;
		end
//		print_block8x8(sizeOfTU, coeff, RCskip, 2);
	end	
	/*************************************************************************
	 * U block 16x16
	 ************************************************************************/
	merge_U.block16x16: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                 	 		Block_in: [ coeff ] repeat 16*16
	                 	 		==>
	guard
		sizeOfTU = 16 
	do
		foreach int i in 0 .. 255 do
			CoeffU[i] := coeff[i];
		end
//		print_block16x16(sizeOfTU, coeff, RCskip, 1);
	end
	/*************************************************************************
	 * V block 16x16
	 ************************************************************************/	
	merge_V.block16x16: action 	Size:	  [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                 	 		Block_in: [ coeff ] repeat 16*16
	                 	 		==>
	guard
		sizeOfTU = 16
	do
		foreach int i in 0 .. 255 do
			CoeffV[i] := coeff[i];
		end
//		print_block16x16(sizeOfTU, coeff, RCskip, 2);
	end	
	/*************************************************************************
	 * output_Y
	 ************************************************************************/	
	output_Y : action ==> Block_y:[ coeff ] repeat 16
	guard
		block4x4Idx != nbBlock4x4
    var
    	 int(size=16) coeff[16],
		 int(size=16) offset := 0
	do
		offset:= scan4x4_Y_offset[block4x4Idx & 3] + scan8x8_Y_offset[(block4x4Idx>>2) & 3] + scan16x16_Y_offset[(block4x4Idx>>4) & 3];
		foreach int i in 0 .. 3 do
			foreach int j in 0 .. 3 do
				coeff[(i<<2) + j] := CoeffY[offset + j];
			end
			offset := 32 + offset;			
		end
	end	
	/*************************************************************************
	 * output_done
	 ************************************************************************/	
	output_done : action ==>
	guard
		block4x4Idx = nbBlock4x4 
	do
		block4x4Idx := 0;
	end
	/*************************************************************************
	 * output_U
	 ************************************************************************/	
	output_U : action ==> //Block_u: [ coeff ] repeat 4
    var
    	 int(size=16) coeff[4],
		 int(size=16) offset := 0
	do
		offset := scan4x4_UV_offset[block4x4Idx & 3] + scan8x8_UV_offset[(block4x4Idx>>2) & 3] + scan16x16_UV_offset[(block4x4Idx>>4) & 3];
		foreach int i in 0 .. 1 do
			foreach int j in 0 .. 1 do
				coeff[(i<<1) + j] := CoeffU[offset + j];
			end
			offset := 16 + offset;			
		end
	end	
	/*************************************************************************
	 * output_V
	 ************************************************************************/	
	output_V : action ==> //Block_v: [ coeff ] repeat 4
    var
    	 int(size=16) coeff[4],
		 int(size=16) offset := 0
	do
		offset := scan4x4_UV_offset[block4x4Idx & 3] + scan8x8_UV_offset[(block4x4Idx>>2) & 3] + scan16x16_UV_offset[(block4x4Idx>>4) & 3];
		foreach int i in 0 .. 1 do
			foreach int j in 0 .. 1 do
				coeff[(i<<1) + j] := CoeffV[offset + j];
			end
			offset := 16 + offset;			
		end
		block4x4Idx := block4x4Idx + 1; 		
	end	
	/*************************************************************************
	 * schedule
	 ************************************************************************/	
	schedule fsm merge_Y:
		merge_Y   ( merge_Y_loop  )--> merge_Y;
		merge_Y   ( merge_Y       )--> merge_U;
		merge_Y   ( merge_Y_64x64 )--> zero_U;
		zero_U   ( merge_U_64x64)--> zero_V;
		zero_V   ( merge_V_64x64)--> merge_Y;
		merge_U   ( merge_U       )--> merge_V;
		merge_V   ( merge_V       )--> output_Y;
		output_Y  ( output_Y      )--> output_U;
		output_U  ( output_U      )--> output_V;
		output_V  ( output_V      )--> output_Y;
		output_Y  ( output_done   )--> merge_Y;
	end	
end
