/********************************************************************************

This software module was originally developed by 
khaled JERBI (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
 

*****************************************************************************/
package org.sc29.wg11.mpegh.part2.common;

import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import std.video.Display.*;
import std.util.Math.*;

actor MD5SplitInfo(uint(size=8) BLK_SIDE)
    uint(size=8)  Byte,
    uint(size=16) PictSize
    ==>
    uint(size=64) Length,
    uint(size= 8) DataOut
    :

    uint(size=8)  pictureBufferY[MAX_WIDTH * MAX_HEIGHT];
    uint(size=8)  pictureBufferU[MAX_WIDTH * MAX_HEIGHT / 4];
    uint(size=8)  pictureBufferV[MAX_WIDTH * MAX_HEIGHT / 4];
    int (size=32) pictureSizeInMb;
    int (size=32) nbBlockGot;
    uint(size=2)  chromaComponent;
    uint(size=16) pictureWidthLuma;
    uint(size=16) cropPicWthLuma;
    uint(size=16) cropPicHghtLuma;
    uint(size=12) xIdxLuma;
    uint(size=12) yIdxLuma;
    uint(size=12) xIdxChroma;
    uint(size=32) yIdxChroma;
    uint(size=14) xMin;
    uint(size=14) xMax;
    uint(size=14) yMin;
    uint(size=14) yMax;
    
    uint(size=64) lumaSize;
    uint(size=64) chromaSize;
    uint(size=64) idx;
    
   getPictureSize: action  PictSize:[picWidthInPix, picHeightInPix]
                            ==>
                            Length:[lumaSize, chromaSize, chromaSize]
    var
        uint(size=16) picWidth  = (picWidthInPix  + BLK_SIDE-1)/BLK_SIDE,
        uint(size=16) picHeight = (picHeightInPix + BLK_SIDE-1)/BLK_SIDE
    do  
        lumaSize          := picWidthInPix * picHeightInPix;
        chromaSize        := lumaSize >> 2;
        pictureWidthLuma  := picWidth * BLK_SIDE;
        pictureSizeInMb   := picWidth * picHeight;
        xMin := 0;
        xMax := picWidthInPix-1;
        yMin := 0;
        yMax := picHeightInPix-1;
        cropPicWthLuma  := xMax - xMin + 1;
        cropPicHghtLuma := yMax - yMin + 1;
        nbBlockGot := 0;
        xIdxLuma   := 0;
        yIdxLuma   := 0;
        xIdxChroma := 0;
        yIdxChroma := 0;
    end

 getPixValue.launch.Luma.blk16x16: action Byte :[Bytes] repeat 256 ==>
    guard
        nbBlockGot < pictureSizeInMb,
        BLK_SIDE = 16
    var
        uint(size=14) xIdxMin = max(xIdxLuma, xMin),
        uint(size=14) xIdxMax = min(xIdxLuma + BLK_SIDE-1, xMax),
        uint(size=14) yIdxMin = max(yIdxLuma, yMin),
        uint(size=14) yIdxMax = min(yIdxLuma + BLK_SIDE-1, yMax)
    do

        nbBlockGot := nbBlockGot + 1;
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferY[(y-yMin)*cropPicWthLuma+x-xMin]
                    := Bytes[(y-yIdxLuma)*BLK_SIDE + x-xIdxLuma];
            end
        end
        xIdxLuma := xIdxLuma + BLK_SIDE;
        chromaComponent := 0;
    end

    getPixValue.launch.Luma.blk64x64: action Byte :[Bytes] repeat 4096 ==>
    guard
        nbBlockGot < pictureSizeInMb,
        BLK_SIDE = 64
    var
        uint(size=14) xIdxMin = max(xIdxLuma, xMin),
        uint(size=14) xIdxMax = min(xIdxLuma + BLK_SIDE-1, xMax),
        uint(size=14) yIdxMin = max(yIdxLuma, yMin),
        uint(size=14) yIdxMax = min(yIdxLuma + BLK_SIDE-1, yMax)
    do

        nbBlockGot := nbBlockGot + 1;
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                pictureBufferY[(y-yMin)*cropPicWthLuma+x-xMin]
                    := Bytes[(y-yIdxLuma)*BLK_SIDE + x-xIdxLuma];
            end
        end
        xIdxLuma := xIdxLuma + BLK_SIDE;
        chromaComponent := 0;
    end

    getPixValue.launch.Chroma.blk16x16: action Byte :[Bytes] repeat 64 ==>
    guard
        BLK_SIDE = 16
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (BLK_SIDE>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (BLK_SIDE>>1)-1, yMax/2),
        bool bCondition = chromaComponent=0
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                if(bCondition)then
                    pictureBufferU[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                        Bytes[(y-yIdxChroma)*(BLK_SIDE>>1) + x-xIdxChroma];
                else
                    pictureBufferV[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                        Bytes[(y-yIdxChroma)*(BLK_SIDE>>1) + x-xIdxChroma];
                end
            end
        end
        if chromaComponent != 0 then
            xIdxChroma := xIdxChroma + (BLK_SIDE>>1);
            if xIdxLuma = pictureWidthLuma then
                xIdxLuma   := 0;
                xIdxChroma := 0;
                yIdxLuma   := yIdxLuma + BLK_SIDE;
                yIdxChroma := yIdxChroma + (BLK_SIDE>>1);
            end
        end
        chromaComponent := 1;
    end

    getPixValue.launch.Chroma.blk64x64: action Byte :[Bytes] repeat 1024 ==>
    guard
        BLK_SIDE = 64
    var
        uint(size=14) xIdxMin = max(xIdxChroma, xMin/2),
        uint(size=14) xIdxMax = min(xIdxChroma + (BLK_SIDE>>1)-1, xMax/2),
        uint(size=14) yIdxMin = max(yIdxChroma, yMin/2),
        uint(size=14) yIdxMax = min(yIdxChroma + (BLK_SIDE>>1)-1, yMax/2),
        bool bCondition = chromaComponent=0
	do
        foreach int y in yIdxMin .. yIdxMax
        do
            foreach int x in xIdxMin .. xIdxMax
            do
                if(bCondition)then
                    pictureBufferU[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                        Bytes[(y-yIdxChroma)*(BLK_SIDE>>1) + x-xIdxChroma];
                else
                    pictureBufferV[(y-yMin/2)*cropPicWthLuma/2 + x-xMin/2] :=
                        Bytes[(y-yIdxChroma)*(BLK_SIDE>>1) + x-xIdxChroma];
                end
            end
        end
        if chromaComponent != 0 then
            xIdxChroma := xIdxChroma + (BLK_SIDE>>1);
            if xIdxLuma = pictureWidthLuma then
                xIdxLuma   := 0;
                xIdxChroma := 0;
                yIdxLuma   := yIdxLuma + BLK_SIDE;
                yIdxChroma := yIdxChroma + (BLK_SIDE>>1);
            end
        end
        chromaComponent := 1;
    end

    initOutputLoop: action ==>
    guard
        nbBlockGot >= pictureSizeInMb
    do
        idx := 0;
    end
    
    outputLoop.Y_loop : action ==> DataOut:[pictureBufferY[tmp]]
    guard
        idx < lumaSize
    var uint(size=64) tmp = idx
    do
        idx := idx + 1;
    end
    outputLoop.Y_endLoop : action ==>
    guard
        idx = lumaSize
    do
        idx := 0;
    end
    outputLoop.U_loop : action ==> DataOut:[pictureBufferU[tmp]]
    guard
        idx < chromaSize
    var uint(size=64) tmp = idx
    do
        idx := idx + 1;
    end
    outputLoop.U_endLoop : action ==>
    guard
        idx = chromaSize
    do
        idx := 0;
    end
    outputLoop.V_loop : action ==> DataOut:[pictureBufferV[tmp]]
    guard
        idx < chromaSize
    var uint(size=64) tmp = idx
    do
        idx := idx + 1;
    end
    outputLoop.V_endLoop : action ==>
    guard
        idx = chromaSize
    do
        idx := 0;
    end
    
    schedule fsm GetPictureSize:
        GetPictureSize  (getPictureSize            )--> GetLumaBlock;
        
        GetLumaBlock    (getPixValue.launch.Luma   )--> GetChroma1Block;
        GetLumaBlock    (initOutputLoop            )--> outputLoopY;
        
        GetChroma1Block (getPixValue.launch.Chroma )--> GetChroma2Block;
        GetChroma2Block (getPixValue.launch.Chroma )--> GetLumaBlock;
        
        outputLoopY     (outputLoop.Y_loop         )--> outputLoopY;
        outputLoopY     (outputLoop.Y_endLoop      )--> outputLoopU;
        
        outputLoopU     (outputLoop.U_loop         )--> outputLoopU;
        outputLoopU     (outputLoop.U_endLoop      )--> outputLoopV;
        
        outputLoopV     (outputLoop.V_loop         )--> outputLoopV;
        outputLoopV     (outputLoop.V_endLoop      )--> GetPictureSize;
    end

    priority
        getPixValue > initOutputLoop;
    end
end