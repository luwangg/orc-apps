/********************************************************************************

This software module was originally developed by 
khaled JERBI (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
 

*****************************************************************************/

// Author: khaled JERBI

/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package org.sc29.wg11.mpegh.part2.common;
import  org.sc29.wg11.common.BitstreamReadUtils.*;


actor padding () uint(size=64) LENGTH, uint(size=8) DATA ==> uint (size=8) OUT, uint NEWLENGTH:

	uint(size=64) length;
	uint(size=64) new_len;
	uint(size=64) counter:=0;
	
	computeNewLength: action LENGTH:[len] ==> NEWLENGTH:[new_len]
	do
	    length  := len;
		new_len := (length << 3) + 1;
		while ((new_len & 511)!=448) do
			new_len := new_len + 1;
		end
		new_len := new_len >> 3;
		
		// directSend: nb of bytes to send before the appearance of padding bits
		// remainSend: nb of bytes to send with padding bits
		// directSend:= length >> 6; // >>6 equivalent to div 64 when 64 = 512 / 8
		// remainSend:= length & 63;
		// zeroSend  : nb of O bytes to send after the 128 (10000000) byte
		// zeroSend  := new_len - (length + 1)
	end
	
	copyData: action DATA:[i] ==> OUT:[i]
	do
        counter := counter +1;
	end
	
	endCopy: action ==> OUT:[128] // padding "10000000"
	guard 
		counter = length
	do
		counter := 0;
	end
	
	zeroPadding: action ==> OUT:[0]
	do
		counter := counter + 1;
	end
	
	endZeroPadding: action ==> OUT:[chunkedLength] repeat 8
	guard
		counter = (new_len+8)-(length + 9) // new + 8 bytes to get in bits a multiple of 512 // length + 1 (128) + 8 (64 bits for the length)
	var
		uint(size= 8) chunkedLength[8],
		uint(size=64) length_tmp = length<<3
	do
		 counter := 0; // reset counter
         //send length of 64 bits in a set of 8 bytes
         chunkedLength [7] := (length_tmp >> 56) & 255;
         chunkedLength [6] := (length_tmp >> 48) & 255;
         chunkedLength [5] := (length_tmp >> 40) & 255;
         chunkedLength [4] := (length_tmp >> 32) & 255;
         chunkedLength [3] := (length_tmp >> 24) & 255;
         chunkedLength [2] := (length_tmp >> 16) & 255;
         chunkedLength [1] := (length_tmp >>  8) & 255;
         chunkedLength [0] := (length_tmp >>  0) & 255;
	end
	
	schedule fsm initLength:
		initLength ( computeNewLength ) --> copy;
		copy       ( copyData         ) --> copy;
		copy       ( endCopy          ) --> padding;
		padding    ( zeroPadding      ) --> padding;
		padding    ( endZeroPadding   ) --> initLength;
	end
	
	priority
		endCopy>copyData;
		endZeroPadding>zeroPadding;
	end
end