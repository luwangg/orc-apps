/********************************************************************************

This software module was originally developed by 
Gildas Cocherel and khaled JERBI (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
 

*****************************************************************************/
/******************************************************************************
 * Definition of CabacContextFunction
 *****************************************************************************/
package org.sc29.wg11.mpegh.part2.common;

import  std.util.Math.*;
import  org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import  org.sc29.wg11.mpegh.part2.common.CabacContextConstantHEVC.*;
import  org.sc29.wg11.mpegh.part2.common.CabacContextTableHEVC.*;

unit CabacContextFunctionHEVC :

	/*************************************************************************
	 * ContextInit
	 *************************************************************************/
	procedure contextInit(uint(size=8) qp, uint(size=8) sliceType, uint(size=9) ctxTable[NB_MAX_SE][NB_MAX_NUM_CTX], uint(size= 1) cabac_init_flag)
	var
		uint(size= 8) qp_clip3 = clip_i32(qp, 0, 51),
		uint(size= 8) initValue,
		 int(size= 8) slope,
		 int(size= 8) offset,
		uint(size= 8) initState,
		uint(size= 8) mpState,
		uint(size= 8) pStateIdx,
		uint(size= 8) sliceType_i := sliceType
	begin
		if cabac_init_flag = 1 then
			if sliceType = P_SLICE then
				sliceType_i := B_SLICE;
			elsif  sliceType = B_SLICE then
				sliceType_i := P_SLICE;
			end
		end
		foreach uint(size=8) i in 0 .. NB_MAX_SE-1 do
			foreach uint(size=8) j in 0 .. NUM_SE_CONTEXT_INDEX[i]-1 do
				initValue	:= InitContextIndex[i][sliceType_i][j];
				slope		:= (initValue>>4)*5 - 45;
				offset		:= ((initValue & 15) << 3) - 16;
				initState   := clip_i32( ((qp_clip3*slope)>>4)+offset, 1, 126);
				mpState		:= if initState >= 64 then 1 else 0 end;
				pStateIdx	:= if initState >= 64 then initState - 64 else 63 - initState end;
				ctxTable[i][j] := (pStateIdx<<1) + mpState;
				if i = NB_MAX_SE then
					println(" initValue = "+initValue+" slope = "+slope+" offset = "+offset+" state = "+initState+" mps = "+mpState+" ucState = "+ctxTable[i][j]);
				end
			end	
		end
	end
	/*************************************************************************
	 * getCtx_SPLIT_CODING_UNIT_FLAG
	 *************************************************************************/
	function context_93311_SKIP_CU_FLAG(
		uint(size= 8) depthSubPart,
		bool		  availableA,
		uint(size= 8) depthSubPartA,
		bool		   availableB,
		uint(size= 8) depthSubPartB
	) --> uint(size=2)
	var
		uint(size=1) condTermA = if depthSubPartA > depthSubPart and availableA = true then 1 else 0 end,
		uint(size=1) condTermB = if depthSubPartB > depthSubPart and availableB = true then 1 else 0 end
	:
		condTermA + condTermB
	end
	/*************************************************************************
	 * Context_92312
	 *************************************************************************/
	uint(size=8) LASTCTX[28] = [
	 	0,  1,  2,  3,  4,  5,  6,  7,  8,  2,  6,  7,  8,  8,
	 	9,  9,  2,  2, 10, 11, 12, 12, 13, 13, 14, 14,  2,  2
	 	];
	function context_93312(
		uint(size=8) binIdx,
		uint(size=8) log2TrafoSize,
		uint(size=8) cIdx
	) --> uint(size=8) 
	var
		uint(size=8) ctx_offset = if cIdx = 0 then 3 * (log2TrafoSize - 2)  + ((log2TrafoSize - 1) >> 2) else 15 end,
		uint(size=8) ctx_shift  = if cIdx = 0 then (log2TrafoSize + 1) >> 2 else log2TrafoSize - 2 end
	:
		(binIdx >> ctx_shift) + ctx_offset
	end
	/*************************************************************************
	 * Context_93313
	 *************************************************************************/
	procedure context_93313(
		uint(size= 1) coded_sub_block_flag[8][8],
		uint(size=16) xS,
		uint(size=16) yS,
		uint(size= 8) cIdx,
		uint(size= 8) log2TrafoSize,
		uint(size= 9) ctxIdx[1]
	)
	var
		uint(size=8) csbfCtx := 0,
		uint(size=8) trafoSize = (1 << (log2TrafoSize - 2))-1
	begin	
//		println(" get93313_ctxInc("+xS+", "+yS+", "+cIdx+", "+(1 << log2TrafoSize)+", "+(1 << log2TrafoSize)+")");
		
		if xS < trafoSize then
			csbfCtx := coded_sub_block_flag[ xS + 1 ][ yS ];
		end
		if yS < trafoSize then
			csbfCtx := csbfCtx + coded_sub_block_flag[ xS ][ yS + 1 ];
		end
		ctxIdx[0] := min(csbfCtx,1) + if cIdx = 0 then 0 else 2 end;
	end
	/*************************************************************************
	 * Context_93314
	 *************************************************************************/
	uint(size=8) ctxInMap[16] = [
		0, 1, 4, 5, 2, 3, 4, 5, 6, 6, 8, 8, 7, 7, 8, 8
		];
	procedure context_93314(
		uint(size= 1) coded_sub_block_flag[8][8],
		uint(size=16) xC,
		uint(size=16) yC,
		uint(size= 8) cIdx,
		uint(size= 8) log2TrafoSize,
		uint(size= 8) scanIdx,		
		uint(size= 9) ctxIdx[1]
	)
	var
		uint(size=16) xS = xC >> 2,
		uint(size=16) yS = yC >> 2,		
		uint(size= 8) xP = xC & 3,
		uint(size= 8) yP = yC & 3,		
		uint(size= 8) sigCtx,
		uint(size= 8) prevCsbf := 0,
		uint(size= 8) trafoSize = ((1 << log2TrafoSize) - 1)>>2
	begin
//		println(" get93314_ctxInc( "+xC+", "+yC+", "+cIdx+", "+log2TrafoSize+", "+if scanIdx = SCAN_ZIGZAG then SCAN_DIAG else scanIdx end+")");
//		println(" get93314_ctxInc( "+xC+", "+yC+", "+log2TrafoSize+", "+if scanIdx = SCAN_ZIGZAG then SCAN_DIAG else scanIdx end+")");
		if xC + yC = 0 then
			sigCtx := 0;
		elsif log2TrafoSize = 2 then
			sigCtx := ctxInMap[(yC<<2) + xC];
		else
			if xS < trafoSize then
				prevCsbf := prevCsbf + coded_sub_block_flag[ xS + 1 ][ yS ];
			end
			if yS < trafoSize then
				prevCsbf := prevCsbf + (coded_sub_block_flag[ xS ][ yS + 1 ] << 1);
			end
			if prevCsbf = 0 then
				sigCtx := if xP + yP = 0 then 2 elsif xP + yP < 3 then 1 else 0 end;
			elsif prevCsbf = 1 then
				sigCtx := if yP = 0 then 2 elsif yP = 1 then 1 else 0 end;
			elsif prevCsbf = 2 then
				sigCtx := if xP = 0 then 2 elsif xP = 1 then 1 else 0 end;
			else
				sigCtx := 2;
			end
			if cIdx = 0 then
				if xS + yS > 0 then
					sigCtx := sigCtx + 3;
				end
				if log2TrafoSize = 3 then
					sigCtx := sigCtx + if scanIdx = 0 then 9 else 15 end;
				else
					sigCtx := sigCtx + 21;
				end
			else
				if log2TrafoSize = 3 then
					sigCtx := sigCtx + 9;
				else
					sigCtx := sigCtx + 12;
				end
			end
		end
		if cIdx = 0 then
			ctxIdx[0] := sigCtx;
		else
			ctxIdx[0] := 27 + sigCtx;
		end
	end
	/*************************************************************************
	 * Context_93315
	 *************************************************************************/
	procedure context_93315(
		uint(size= 8) cIdx,
		 int(size= 8) i,
		bool          first_elem,
		bool          first_subset,
		uint(size= 8) ctxSet[1],
		uint(size= 8) greater1Ctx[1],
		uint(size= 9) ctxIdxInc[1]
	)
	begin
//		println(" get93315_ctxInc("+cIdx+", "+i+", "+first_elem+", "+first_subset+", "+ctxSet[0]+")");	
	    if first_elem = true then
        	ctxSet[0] := if i > 0 and cIdx = 0 then 2 else 0 end;

        	if first_subset = false and greater1Ctx[0] = 0 then
            	ctxSet[0] := ctxSet[0] + 1;
            end
        	greater1Ctx[0] := 1;
    	end
//		println("ctxSet = "+ctxSet[0]+" : lastGreater1Ctx = "+greater1Ctx[0]);
    	ctxIdxInc[0] := (ctxSet[0] << 2) + greater1Ctx[0];
    	if cIdx > 0 then
        	ctxIdxInc[0] := ctxIdxInc[0] + 16;
		end
	end
end