/********************************************************************************

This software module was originally developed by 
Gildas Cocherel and khaled JERBI (IETR/INSA of Rennes), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards. 

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

IETR/INSA of Rennes grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that IETR/INSA of Rennes
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

IETR/INSA of Rennes retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
 

*****************************************************************************/
/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package org.sc29.wg11.mpegh.part2.common;

unit CommonConstantHEVC :
    /**************************************************************************
     * GLOBAL
     *************************************************************************/
	int PICT_WIDTH        = 4096;
	int PICT_HEIGHT       = 2048;
	int PICT_WIDTH_POW_2  = 4096;
	int PICT_HEIGHT_POW_2 = 2048;
	int MASK_WIDTH_POW_2  = PICT_WIDTH_POW_2-1;
	int MASK_HEIGHT_POW_2 = PICT_HEIGHT_POW_2-1;

	uint(size=16) NEIGHB_TAB_SZ   = PICT_WIDTH + PICT_HEIGHT + 1;

	uint(size=16) MAX_NUM_TILES                 = 128;
	uint(size=16) MAX_NUM_SLICES                = 128;
	
    int(size=16) MIN_INT16                      = -32768;

    uint(size= 4) MIN_CTB_SIZE_Y                =  8;
 	uint(size= 8) MAX_TU_SIZE					= 32;         // maximum allowable size of CU
 	
	uint(size=16) MAX_PICT_WIDTH_IN_CU          = PICT_WIDTH / MIN_CTB_SIZE_Y;
	uint(size=16) MAX_PICT_HEIGHT_IN_CU         = PICT_HEIGHT / MIN_CTB_SIZE_Y;

 	uint(size= 8) BLW_WIDTH_MAX					= 64;
	uint(size= 8) BLW_HEIGHT_MAX				= 64;
	uint(size= 4) MAX_NUM_REF					=  4;

	uint(size=2) LUMA_COMP   = 1;
	uint(size=2) CHROMA_COMP = 2;
	uint(size=2) ALL_COMP    = 3;
	/**************************************************************************
	 * SliceType
 	 *************************************************************************/
	 uint(size= 2) B_SLICE						=  0;
	 uint(size= 2) P_SLICE						=  1;
	 uint(size= 2) I_SLICE						=  2;
    /**************************************************************************
     * SAO
     *************************************************************************/
	uint(size= 2) SAO_NO_MERGE                  =  0;
    uint(size= 2) SAO_MERGE_LEFT                =  1;
    uint(size= 2) SAO_MERGE_UP                  =  2;
	/**************************************************************************
	 * ChromaFormat
 	 *************************************************************************/
	 uint(size= 2) CHROMA_400					=  0;
	 uint(size= 2) CHROMA_420					=  1;
	 uint(size= 2) CHROMA_422					=  2;
	 uint(size= 2) CHROMA_444					=  3;
	/**************************************************************************
	 * PartSize
 	 *************************************************************************/
	uint(size= 4) PART_2Nx2N					=  0;
	uint(size= 4) PART_2NxN						=  1;
	uint(size= 4) PART_Nx2N						=  2;
	uint(size= 4) PART_NxN						=  3;
	uint(size= 4) PART_2NxnU					=  4;
	uint(size= 4) PART_2NxnD					=  5;
	uint(size= 4) PART_nLx2N					=  6;
	uint(size= 4) PART_nRx2N					=  7;
    uint(size= 4) PART_MODE_PICT                =  8;
    uint(size= 4) PART_MODE_SLICE_DEP           =  9;
    uint(size= 4) PART_MODE_SLICE_INDEP         = 10;
    uint(size= 4) PART_MODE_IN_SAMP             = 11;
	uint(size= 4) PART_NONE						= 15;
	/**************************************************************************
	 * PredMode
 	 *************************************************************************/	
    uint(size= 5) INTER                         =  0;
    uint(size= 5) INTRA                         =  1;
    uint(size= 5) SKIP                          =  2;
    uint(size= 5) NO_IN_SAMP                    =  4;
    uint(size= 5) IN_SAMP                       =  8;
    uint(size= 5) OTHER                         = 16;
    /**************************************************************************
	 * TextType
 	 *************************************************************************/
	uint(size= 4) TEXT_LUMA						=  0; ///< luma
	uint(size= 4) TEXT_CHROMA_U					=  1; ///< chroma U
	uint(size= 4) TEXT_CHROMA_V					=  2; ///< chroma V
	/**************************************************************************
	 * RefPicList
 	 *************************************************************************/
 	uint(size=3) ST_CURR_BEF                    =  0;
    uint(size=3) ST_CURR_AFT                    =  1;
    uint(size=3) ST_FOLL                        =  2;
    uint(size=3) LT_CURR                        =  3;
    uint(size=3) LT_FOLL                        =  4;
	/**************************************************************************
	 * COEFF_SCAN_TYPE
 	 *************************************************************************/
 	uint(size= 2) SCAN_ZIGZAG 					=  0; ///< typical zigzag scan
 	uint(size= 2) SCAN_HOR						=  1; ///< horizontal first scan
 	uint(size= 2) SCAN_VER						=  2; ///< vertical first scan
 	uint(size= 2) SCAN_DIAG				        =  3; ///< up-right diagonal scan
	/**************************************************************************
	 * INTER_PRED_IDC
 	 *************************************************************************/
    uint(size=2) PRED_L0                        = 0;
    uint(size=2) PRED_L1                        = 1;
    uint(size=2) BI_PRED                        = 2;
    /**************************************************************************
     * LUMA_INTRA_PRED_MODE
     *************************************************************************/
 	uint(size= 8) INTRA_PLANAR					=  0;
 	uint(size= 8) INTRA_DC						=  1;
 	uint(size= 8) INTRA_ANGULAR_26				= 26;
 

	uint(size=2) NEW_PIC = 0;
	uint(size=2) NEW_SLC = 1;
	uint(size=2) NEW_LCU = 2;

 	uint(size=3) partModeToNumPart[8] = [1, 2, 2, 4, 2, 2, 2, 2];
 	
 	uint(size= 8) default_scaling_list_intra[64] = [
    16, 16, 16, 16, 17, 18, 21, 24,
    16, 16, 16, 16, 17, 19, 22, 25,
    16, 16, 17, 18, 20, 22, 25, 29,
    16, 16, 18, 21, 24, 27, 31, 36,
    17, 17, 20, 24, 30, 35, 41, 47,
    18, 19, 22, 27, 35, 44, 54, 65,
    21, 22, 25, 31, 41, 54, 70, 88,
    24, 25, 29,36, 47, 65, 88, 115];

	uint(size= 8) default_scaling_list_inter[64] = [
    16, 16, 16, 16, 17, 18, 20, 24,
    16, 16, 16, 17, 18, 20, 24, 25,
    16, 16, 17, 18, 20, 24, 25, 28,
    16, 17, 18, 20, 24, 25, 28, 33,
    17, 18, 20, 24, 25, 28, 33, 41,
    18, 20, 24, 25, 28, 33, 41, 54,
    20, 24, 25, 28, 33, 41, 54, 71,
    24, 25, 28, 33, 41, 54, 71, 91];
    
    uint(size= 8) hevc_diag_scan4x4_x[16] = [
    0, 0, 1, 0,
    1, 2, 0, 1,
    2, 3, 1, 2,
    3, 2, 3, 3];

 	int(size= 8) hevc_diag_scan4x4_y[16] = [
    0, 1, 0, 2,
    1, 0, 3, 2,
    1, 0, 3, 2,
    1, 3, 2, 3];
    
    int(size= 8) hevc_diag_scan8x8_x[64] = [
    0, 0, 1, 0,
    1, 2, 0, 1,
    2, 3, 0, 1,
    2, 3, 4, 0,
    1, 2, 3, 4,
    5, 0, 1, 2,
    3, 4, 5, 6,
    0, 1, 2, 3,
    4, 5, 6, 7,
    1, 2, 3, 4,
    5, 6, 7, 2,
    3, 4, 5, 6,
    7, 3, 4, 5,
    6, 7, 4, 5,
    6, 7, 5, 6,
    7, 6, 7, 7];

	int(size= 8) hevc_diag_scan8x8_y[64] = [
    0, 1, 0, 2,
    1, 0, 3, 2,
    1, 0, 4, 3,
    2, 1, 0, 5,
    4, 3, 2, 1,
    0, 6, 5, 4,
    3, 2, 1, 0,
    7, 6, 5, 4,
    3, 2, 1, 0,
    7, 6, 5, 4,
    3, 2, 1, 7,
    6, 5, 4, 3,
    2, 7, 6, 5,
    4, 3, 7, 6,
    5, 4, 7, 6,
    5, 7, 6, 7];
    
    uint(size= 8) horiz_scan8x8_inv[8][8] = [
      [  0,  1,  2,  3, 16, 17, 18, 19 ],
      [  4,  5,  6,  7, 20, 21, 22, 23 ],
      [  8,  9, 10, 11, 24, 25, 26, 27 ],
      [ 12, 13, 14, 15, 28, 29, 30, 31 ],
      [ 32, 33, 34, 35, 48, 49, 50, 51 ],
      [ 36, 37, 38, 39, 52, 53, 54, 55 ],
      [ 40, 41, 42, 43, 56, 57, 58, 59 ],
      [ 44, 45, 46, 47, 60, 61, 62, 63 ]
    ];

    uint(size= 8)  diag_scan8x8_inv[8][8] = [
      [  0,  2,  5,  9, 14, 20, 27, 35 ],
      [  1,  4,  8, 13, 19, 26, 34, 42 ],
      [  3,  7, 12, 18, 25, 33, 41, 48 ],
      [  6, 11, 17, 24, 32, 40, 47, 53 ],
      [ 10, 16, 23, 31, 39, 46, 52, 57 ],
      [ 15, 22, 30, 38, 45, 51, 56, 60 ],
      [ 21, 29, 37, 44, 50, 55, 59, 62 ],
      [ 28, 36, 43, 49, 54, 58, 61, 63 ]
    ];

    uint(size= 8) diag_scan4x4_inv[4][4] = [
      [ 0,  2,  5,  9 ],
      [ 1,  4,  8, 12 ],
      [ 3,  7, 11, 14 ],
      [ 6, 10, 13, 15 ]
    ];

    uint(size= 8) diag_scan2x2_inv[2][2] = [
      [ 0, 2 ],
      [ 1, 3 ]
    ];
    
    uint(size= 8) rem6[51 + 2 * 6 + 1] = [
            0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2,
            3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5,
            0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3];

    uint(size= 8) div6[51 + 2 * 6 + 1] = [
            0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3,  3,  3,
            3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,  6,  6,
            7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10];
            
    /* coord[0] = (rasterIdx & 1) * 4 + (rasterIdx & 4)* 2 + (rasterIdx & 16) + ((rasterIdx >> 1) & 32) */
    uint(size= 8) ZscanToAbsCoord0[257] = [
      0,    4,    0,    4,    8,   12,    8,   12, 
      0,    4,    0,    4,    8,   12,    8,   12, 
     16,   20,   16,   20,   24,   28,   24,   28, 
     16,   20,   16,   20,   24,   28,   24,   28, 
      0,    4,    0,    4,    8,   12,    8,   12, 
      0,    4,    0,    4,    8,   12,    8,   12, 
     16,   20,   16,   20,   24,   28,   24,   28, 
     16,   20,   16,   20,   24,   28,   24,   28, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     48,   52,   48,   52,   56,   60,   56,   60, 
     48,   52,   48,   52,   56,   60,   56,   60, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     48,   52,   48,   52,   56,   60,   56,   60, 
     48,   52,   48,   52,   56,   60,   56,   60, 
      0,    4,    0,    4,    8,   12,    8,   12, 
      0,    4,    0,    4,    8,   12,    8,   12, 
     16,   20,   16,   20,   24,   28,   24,   28, 
     16,   20,   16,   20,   24,   28,   24,   28, 
      0,    4,    0,    4,    8,   12,    8,   12, 
      0,    4,    0,    4,    8,   12,    8,   12, 
     16,   20,   16,   20,   24,   28,   24,   28, 
     16,   20,   16,   20,   24,   28,   24,   28, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     48,   52,   48,   52,   56,   60,   56,   60, 
     48,   52,   48,   52,   56,   60,   56,   60, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     32,   36,   32,   36,   40,   44,   40,   44, 
     48,   52,   48,   52,   56,   60,   56,   60, 
     48,   52,   48,   52,   56,   60,   56,   60,
     0];

   /* coord[1] = (rasterIdx & 2) * 2 + (rasterIdx & 8) + ((rasterIdx >> 1) & 16) + ((rasterIdx >> 2) & 32); */
   uint(size= 8) ZscanToAbsCoord1[257] = [
     0,    0,    4,    4,    0,    0,    4,    4, 
     8,    8,   12,   12,    8,    8,   12,   12, 
     0,    0,    4,    4,    0,    0,    4,    4, 
     8,    8,   12,   12,    8,    8,   12,   12, 
    16,   16,   20,   20,   16,   16,   20,   20, 
    24,   24,   28,   28,   24,   24,   28,   28, 
    16,   16,   20,   20,   16,   16,   20,   20, 
    24,   24,   28,   28,   24,   24,   28,   28, 
     0,    0,    4,    4,    0,    0,    4,    4, 
     8,    8,   12,   12,    8,    8,   12,   12, 
     0,    0,    4,    4,    0,    0,    4,    4, 
     8,    8,   12,   12,    8,    8,   12,   12, 
    16,   16,   20,   20,   16,   16,   20,   20, 
    24,   24,   28,   28,   24,   24,   28,   28, 
    16,   16,   20,   20,   16,   16,   20,   20, 
    24,   24,   28,   28,   24,   24,   28,   28, 
    32,   32,   36,   36,   32,   32,   36,   36, 
    40,   40,   44,   44,   40,   40,   44,   44, 
    32,   32,   36,   36,   32,   32,   36,   36, 
    40,   40,   44,   44,   40,   40,   44,   44, 
    48,   48,   52,   52,   48,   48,   52,   52, 
    56,   56,   60,   60,   56,   56,   60,   60, 
    48,   48,   52,   52,   48,   48,   52,   52, 
    56,   56,   60,   60,   56,   56,   60,   60, 
    32,   32,   36,   36,   32,   32,   36,   36, 
    40,   40,   44,   44,   40,   40,   44,   44, 
    32,   32,   36,   36,   32,   32,   36,   36, 
    40,   40,   44,   44,   40,   40,   44,   44, 
    48,   48,   52,   52,   48,   48,   52,   52, 
    56,   56,   60,   60,   56,   56,   60,   60, 
    48,   48,   52,   52,   48,   48,   52,   52, 
    56,   56,   60,   60,   56,   56,   60,   60,
    0];
  
  /* (addr[0] & 1) + (addr[0] & 2) * 2 + (addr[0] & 4) * 4 + (addr[0] & 8) * 8 + 
     (addr[1] & 1) * 2 + (addr[1] & 2) * 4 + (addr[1] & 4) * 8 + (addr[1] & 8) * 16 */
  uint(size= 8) absCoordInBlkToZScanTable[16][16] =
  [
    [  0,   1,   4,   5,  16,  17,  20,  21,  64,  65,  68,  69,  80,  81,  84,  85],
    [  2,   3,   6,   7,  18,  19,  22,  23,  66,  67,  70,  71,  82,  83,  86,  87],
    [  8,   9,  12,  13,  24,  25,  28,  29,  72,  73,  76,  77,  88,  89,  92,  93],
    [ 10,  11,  14,  15,  26,  27,  30,  31,  74,  75,  78,  79,  90,  91,  94,  95],
    [ 32,  33,  36,  37,  48,  49,  52,  53,  96,  97, 100, 101, 112, 113, 116, 117],
    [ 34,  35,  38,  39,  50,  51,  54,  55,  98,  99, 102, 103, 114, 115, 118, 119],
    [ 40,  41,  44,  45,  56,  57,  60,  61, 104, 105, 108, 109, 120, 121, 124, 125],
    [ 42,  43,  46,  47,  58,  59,  62,  63, 106, 107, 110, 111, 122, 123, 126, 127],
    [128, 129, 132, 133, 144, 145, 148, 149, 192, 193, 196, 197, 208, 209, 212, 213],
    [130, 131, 134, 135, 146, 147, 150, 151, 194, 195, 198, 199, 210, 211, 214, 215],
    [136, 137, 140, 141, 152, 153, 156, 157, 200, 201, 204, 205, 216, 217, 220, 221],
    [138, 139, 142, 143, 154, 155, 158, 159, 202, 203, 206, 207, 218, 219, 222, 223],
    [160, 161, 164, 165, 176, 177, 180, 181, 224, 225, 228, 229, 240, 241, 244, 245],
    [162, 163, 166, 167, 178, 179, 182, 183, 226, 227, 230, 231, 242, 243, 246, 247],
    [168, 169, 172, 173, 184, 185, 188, 189, 232, 233, 236, 237, 248, 249, 252, 253],
    [170, 171, 174, 175, 186, 187, 190, 191, 234, 235, 238, 239, 250, 251, 254, 255]
  ];
  
  uint(size= 8) absCoordInBlkToZScanTable2[8][16] =
  [
    [  0,   1,   2,   3,   8,   9,  10,  11,  32,  33,  34,  35,  40,  41,  42,  43],
    [  4,   5,   6,   7,  12,  13,  14,  15,  36,  37,  38,  39,  44,  45,  46,  47],
    [ 16,  17,  18,  19,  24,  25,  26,  27,  48,  49,  50,  51,  56,  57,  58,  59],
    [ 20,  21,  22,  23,  28,  29,  30,  31,  52,  53,  54,  55,  60,  61,  62,  63],
    [ 64,  65,  66,  67,  72,  73,  74,  75,  96,  97,  98,  99, 104, 105, 106, 107],
    [ 68,  69,  70,  71,  76,  77,  78,  79, 100, 101, 102, 103, 108, 109, 110, 111],
    [ 80,  81,  82,  83,  88,  89,  90,  91, 112, 113, 114, 115, 120, 121, 122, 123],
    [ 84,  85,  86,  87,  92,  93,  94,  95, 116, 117, 118, 119, 124, 125, 126, 127]
  ];
  
  uint(size = 8) absCoordInBlkToZScanTable3[16][8] =
  [
    [  0,   2,   8,  10,  32,  34,  40,  42],
    [  1,   3,   9,  11,  33,  35,  41,  43],
    [  4,   6,  12,  14,  36,  38,  44,  46],
    [  5,   7,  13,  15,  37,  39,  45,  47],
    [ 16,  18,  24,  26,  48,  50,  56,  58],
    [ 17,  19,  25,  27,  49,  51,  57,  59],
    [ 20,  22,  28,  30,  52,  54,  60,  62],
    [ 21,  23,  29,  31,  53,  55,  61,  63],
    [ 64,  66,  72,  74,  96,  98, 104, 106],
    [ 65,  67,  73,  75,  97,  99, 105, 107],
    [ 68,  70,  76,  78, 100, 102, 108, 110],
    [ 69,  71,  77,  79, 101, 103, 109, 111],
    [ 80,  82,  88,  90, 112, 114, 120, 122],
    [ 81,  83,  89,  91, 113, 115, 121, 123],
    [ 84,  86,  92,  94, 116, 118, 124, 126],
    [ 85,  87,  93,  95, 117, 119, 125, 127]
  ];
  
    /**************************************************************************
     * rasterScanToAbsCoord
     *************************************************************************/
	procedure zScanToAbsCoord(uint(size=16) rasterIdx, uint(size=16) coord[2])
    begin
        coord[0] := ZscanToAbsCoord0[rasterIdx];
        coord[1] := ZscanToAbsCoord1[rasterIdx];
    end

    /**************************************************************************
     * absCoordToRasterScan
     *************************************************************************/
	function absCoordToZScan(uint(size=16) addr[2]) --> uint(size=16)
	var
		uint(size=16) addrBlk[2] = [addr[0]>>2, addr[1]>>2]
	:
         absCoordInBlkToZScanTable[addrBlk[1]][addrBlk[0]]
	end

    function absCoordToZScan2(uint(size=16) addr[2]) --> uint(size=16)
	var
		uint(size=16) addrBlk[2] = [addr[0]>>2, addr[1]>>3]
	:
         absCoordInBlkToZScanTable2[addrBlk[1]][addrBlk[0]]
	end
	
	function absCoordToZScan3(uint(size=16) addr[2]) --> uint(size=16)
	var
		uint(size=16) addrBlk[2] = [addr[0]>>3, addr[1]>>2]
	:
         absCoordInBlkToZScanTable3[addrBlk[1]][addrBlk[0]]
	end
  
    function absCoordInBlkToZScan(uint(size=16) addr[2]) --> uint(size=16)
    :
         absCoordInBlkToZScanTable[addr[1]][addr[0]]
    end

    function absCoordInBlkToZScan2(uint(size=16) addr[2]) --> uint(size=16)
    :
         absCoordInBlkToZScanTable2[addr[1]][addr[0]]
    end
    
    function absCoordInBlkToZScan3(uint(size=16) addr[2]) --> uint(size=16)
    :
         absCoordInBlkToZScanTable3[addr[1]][addr[0]]
    end
end