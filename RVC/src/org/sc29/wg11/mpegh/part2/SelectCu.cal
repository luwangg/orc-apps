/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/
 
 
/**
 * Decoding process for intra blocks.
 * 
 * 
 * @input CUInfo : Informations related to the current CU
 *        (size, address and mode : INTRA,INTER,...).
 * 
 * @input InterSample : Pixel's value from the Inter-prediction CU.
 * 
 * @input IntraSample : Pixel's value from the Intra-prediction CU.
 * 
 * @input PartMode : Giving the partitioning mode of the current CU.
 * 
 * @input ResidualSample : Residual values for the current CU.
 * 
 * 
 * @output Sample : Pixel's value before inLoop filter.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
 
package org.sc29.wg11.mpegh.part2;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

actor SelectCu()
	uint(size=16) CUInfo,
	uint(size=8)  InterSample,
	uint(size=8)  IntraSample,
	uint(size=4)  PartMode,
	int (size=9)  ResidualSample
		==>
	uint(size=8) Sample
		:

	uint(size=16) PU_SIZE_TO_NB_BLK_TO_CLIP[17] =
		[0, 1, 4, 4, 16, 16, 16, 16, 64, 64, 64,
			64, 64, 64, 64, 64, 256];

	uint(size=8)  SCU_SIZE = 16+2*4;
	uint(size=4)  numPart;
	uint(size=3)  numPartDecoded;

	uint(size=8)  predSamp[64 * 64 + 2 * 32 * 32];
	bool          sampGot[512];
	uint(size=16)  nbBlkToClip;
	uint(size=5)  cuMode;
	uint(size=4)  partMode;

	uint(size=7)  cuSize[4][2];
	uint(size=5)  cuOff[4][2] := [[0,0],[0,0],[0,0],[0,0]];
	uint(size=7)  cuWidth;
	uint(size=9)  nbBlk;
	uint(size=9)  idxBlk;
	uint(size=9)  idxBlkInterpred;

	uint(size=7)  xIdx;
	uint(size=7)  yIdx;

	initialize ==>
	do
		sampGot := [false: for int i in 0 .. 511];
	end

	isNewSlice: action PartMode:[partModeVal] ==>
	guard
		partModeVal = PART_MODE_SLICE_DEP || partModeVal = PART_MODE_SLICE_INDEP ||
		partModeVal = PART_MODE_PICT
	end

	getPartMode: action PartMode:[partModeVal] ==>
	guard
		partModeVal != PART_MODE_SLICE_DEP && partModeVal != PART_MODE_SLICE_INDEP &&
		partModeVal != PART_MODE_PICT
	do
		partMode := partModeVal;
		numPart := partModeToNumPart[partModeVal];
		numPartDecoded := 0;
	end

	/* Getting informations of the next CU. */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart && numPart != 2
	do
		cuMode  := cuInfo[0];
		cuWidth := cuInfo[3];
		nbBlkToClip := PU_SIZE_TO_NB_BLK_TO_CLIP[cuWidth >> 2];
		nbBlk   := nbBlkToClip;
		idxBlk  := 0;
		cuSize  := [[cuInfo[i]/4:for int i in 3 .. 4]:for int j in 0 .. 3];
		cuOff[0] := [0:for int i in 0 .. 1];
	end

	/* Getting informations of the next CU when there are two part.
	 * Get twice informations in order to have all the informations concerning
	 * this CU.
	 */
	getCuInfo.launch.numPart2: action CUInfo:[cuInfo] repeat 10 ==>
	guard
		numPartDecoded < numPart && numPart = 2
	do
		cuMode := cuInfo[0];
		cuSize  := [[cuInfo[i+5*j]/4:for uint i in 3 .. 4]:
			for uint j in 0 .. 1];
		cuWidth := max(cuInfo[3], cuInfo[4]);
		nbBlk   := cuWidth*cuWidth/16;
		idxBlk  := 0;
		nbBlkToClip := PU_SIZE_TO_NB_BLK_TO_CLIP[min(cuInfo[3], cuInfo[4]) >> 2];
		if(partMode=PART_2NxN || partMode=PART_2NxnU ||
			partMode=PART_2NxnD) then
			cuOff[1][0] := 0;
			cuOff[1][1] := cuInfo[4]/4;
		else
			cuOff[1][0] := cuInfo[3]/4;
			cuOff[1][1] := 0;
		end
		numPartDecoded := 0;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	/** Checking type of prediction.  **/
	getCuMode.isIntra: action ==>
	guard
		cuMode = INTRA
	do
		numPartDecoded := numPartDecoded + 1;
	end

	getCuMode.isInter: action ==>
	guard
		cuMode = INTER || cuMode = SKIP
	do
		xIdx := 0;
		yIdx := 0;
		idxBlkInterpred := 0;
	end

	getCuMode.isOther: action ==>
	guard
		cuMode = OTHER
	do
		numPartDecoded := numPartDecoded + 1;
	end

	/* Getting samples from intraPrediction */
	getCuSample.isIntra: action IntraSample:[intraSample] repeat SCU_SIZE,
		ResidualSample:[resSample] repeat SCU_SIZE
		==> Sample:[sample] repeat SCU_SIZE
	var
		uint(size=8) sample[SCU_SIZE]
	do
		foreach uint sampIdx in 0 .. SCU_SIZE-1
		do
			sample[sampIdx] :=
				clip_i32(intraSample[sampIdx]+resSample[sampIdx], 0, 255);
		end
		idxBlk := idxBlk + 1;
	end

	/* Getting prediction samples from interPrediction */
	getCuSample.isInter: action InterSample:[interSample] repeat SCU_SIZE ==>
	guard
		idxBlkInterpred < nbBlk
	var
		uint(size=16) blkAddr[2],
		/* Offset is not null when numPart = 2 and partIdx = 1. */
		uint xOff = cuOff[numPartDecoded][0],
		uint yOff = cuOff[numPartDecoded][1],
		uint blkIdx
	do
		blkAddr := [xIdx+xOff, yIdx+yOff];
		blkIdx := absCoordInBlkToZScan(blkAddr);
		foreach int i in 0 .. SCU_SIZE-1
		do
			predSamp[24*blkIdx + i] := interSample[i];
		end
		sampGot[blkIdx] := true;

		/* Computing the location of the next block (it's sent in ZScan order instead of RasterScan. */
		xIdx := xIdx + 1;
		if(xIdx = cuSize[numPartDecoded][0]) then
			xIdx := 0;
			yIdx := yIdx + 1;
			if(yIdx = cuSize[numPartDecoded][1]) then
				yIdx := 0;
				numPartDecoded := numPartDecoded + 1;
			end
		end

		idxBlkInterpred := idxBlkInterpred + 1;
	end

	chekNbBlkToClip.is1: action ==>
	guard
		nbBlkToClip = 1
	end

	chekNbBlkToClip.is4: action ==>
	guard
		nbBlkToClip = 4
	end

	chekNbBlkToClip.is16: action ==>
	guard
		nbBlkToClip = 16
	end

	chekNbBlkToClip.is64: action ==>
	guard
		nbBlkToClip = 64
	end

	chekNbBlkToClip.is256: action ==>
	guard
		nbBlkToClip = 256
	end

	/* Getting the residual part for interPrediction then computing the
	 * result.
	 */
	getInterRes.get1Blk: action ResidualSample:[resSample] repeat SCU_SIZE
		==> Sample:[sample] repeat SCU_SIZE
	guard
		sampGot[idxBlk]
	var
		uint(size=8)  sample[SCU_SIZE]
	do
		foreach int i in 0 .. SCU_SIZE-1
		do
			sample[i] := clip_i32(predSamp[24*idxBlk + i] +
						resSample[i], 0, 255);
		end
		idxBlk := idxBlk + 1;
	end

	/* Getting the residual part for interPrediction then computing the
	 * result.
	 */
	getInterRes.get4Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 4
		==> Sample:[sample] repeat SCU_SIZE * 4
	guard
		sampGot[idxBlk + 3]
	var
		uint (size=8)  sample[SCU_SIZE * 4]
	do
		foreach int i in 0 .. SCU_SIZE * 4 - 1
		do
			sample[i] := clip_i32(predSamp[24*idxBlk + i] +
						resSample[i], 0, 255);
		end
		idxBlk := idxBlk + 4;
	end

	/* Getting the residual part for interPrediction then computing the
	 * result.
	 */
	getInterRes.get16Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 16
		==> Sample:[sample] repeat SCU_SIZE * 16
	guard
		sampGot[idxBlk + 15]
	var
		uint (size=8)   sample[SCU_SIZE * 16]
	do
		foreach int i in 0 .. SCU_SIZE * 16 - 1
		do
			sample[i] := clip_i32(predSamp[24*idxBlk + i] +
						resSample[i], 0, 255);
		end
		idxBlk := idxBlk + 16;
	end

	/* Getting the residual part for interPrediction then computing the
	 * result.
	 */
	getInterRes.get64Blk: action ResidualSample:[resSample] repeat SCU_SIZE * 64
		==> Sample:[sample] repeat SCU_SIZE * 64
	guard
		sampGot[idxBlk + 63]
	var
		uint (size=8)   sample[SCU_SIZE * 64]
	do
		foreach int i in 0 .. SCU_SIZE * 64 - 1
		do
			sample[i] := clip_i32(predSamp[24*idxBlk + i] +
						resSample[i], 0, 255);
		end
		idxBlk := idxBlk + 64;
	end

	getCuSample.done: action ==>
	guard
		idxBlk = nbBlk
	do
		idxBlk := 0;	
		foreach int i in 0 .. nbBlk - 1
		do
			sampGot[i] := false;
		end
	end

	schedule fsm GetPartMode:
		GetPartMode (isNewSlice       )--> GetPartMode;
		GetPartMode (getPartMode      )--> GetCuInfo;

		GetCuInfo   (getCuInfo.launch )--> GetCuMode;
		GetCuInfo   (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isIntra )--> GetCuSampleIntra;
		GetCuMode (getCuMode.isInter )--> CheckNbBlkToClip;
		GetCuMode (getCuMode.isOther )--> GetCuInfo;

		GetCuSampleIntra (getCuSample.isIntra )--> GetCuSampleIntra;
		GetCuSampleIntra (getCuSample.done    )--> GetCuInfo;


		CheckNbBlkToClip (chekNbBlkToClip.is1   )--> GetCuSampleInter1Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is4   )--> GetCuSampleInter4Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is16  )--> GetCuSampleInter16Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is64  )--> GetCuSampleInter64Blk;
		CheckNbBlkToClip (chekNbBlkToClip.is256 )--> GetCuSampleInter256Blk;

		GetCuSampleInter1Blk (getCuSample.isInter )--> GetCuSampleInter1Blk;
		GetCuSampleInter1Blk (getInterRes.get1Blk )--> GetCuSampleInter1Blk;
		GetCuSampleInter1Blk (getCuSample.done    )--> GetCuInfo;

		GetCuSampleInter4Blk (getCuSample.isInter    )--> GetCuSampleInter4Blk;
		GetCuSampleInter4Blk (getInterRes.get4Blk )--> GetCuSampleInter4Blk;
		GetCuSampleInter4Blk (getCuSample.done       )--> GetCuInfo;

		GetCuSampleInter16Blk (getCuSample.isInter    )--> GetCuSampleInter16Blk;
		GetCuSampleInter16Blk (getInterRes.get16Blk )--> GetCuSampleInter16Blk;
		GetCuSampleInter16Blk (getCuSample.done       )--> GetCuInfo;

		GetCuSampleInter64Blk (getCuSample.isInter    )--> GetCuSampleInter64Blk;
		GetCuSampleInter64Blk (getInterRes.get64Blk )--> GetCuSampleInter64Blk;
		GetCuSampleInter64Blk (getCuSample.done       )--> GetCuInfo;

		GetCuSampleInter256Blk (getCuSample.isInter    )--> GetCuSampleInter256Blk;
		GetCuSampleInter256Blk (getInterRes.get64Blk )--> GetCuSampleInter256Blk;
		GetCuSampleInter256Blk (getCuSample.done       )--> GetCuInfo;
	end
	priority
		getCuSample.done > getCuSample.isIntra;
		getCuSample.done > getInterRes > getCuSample.isInter;
		chekNbBlkToClip.is64 > chekNbBlkToClip.is16  > chekNbBlkToClip.is4;
		chekNbBlkToClip.is4  > chekNbBlkToClip.is256 > chekNbBlkToClip.is1;
	end
end