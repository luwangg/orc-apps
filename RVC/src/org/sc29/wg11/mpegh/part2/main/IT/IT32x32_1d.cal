/********************************************************************************

This software module was originally developed by 
Eduardo Juarez, Wei Jianguo and Ren Rong, 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

UPM grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that UPM
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, UPM
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

UPM retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/
// Modified by: Junaid Jameel Ahmad (EPFL)

package org.sc29.wg11.mpegh.part2.main.IT;

import org.sc29.wg11.mpegh.part2.main.IT.CommonConstant.*;
import std.util.Math.*;

actor IT32x32_1d (uint(size=8) SHIFT) int(size=16) Src, uint(size=8) BitDepth
                    ==> 
                    int(size=16) Dst
                    :
                  
  action Src:[ src ] repeat 1024, BitDepth:[ bitDepth ]
         ==> 
         Dst:[ dst ] repeat 1024
  var
   List(type:int(size=32), size=2   ) evenEvenEvenEven,
   List(type:int(size=32), size=2   ) evenEvenEvenOdd,  
   List(type:int(size=32), size=4   ) evenEvenEven,
   List(type:int(size=32), size=4   ) evenEvenOdd,
   List(type:int(size=32), size=8   ) evenEven,
   List(type:int(size=32), size=8   ) evenOdd,
   List(type:int(size=32), size=16  ) even,
   List(type:int(size=32), size=16  ) odd,
   List(type:int(size=16), size=1024) dst,
   uint(size=8) shift = SHIFT - (if(SHIFT = 12) then bitDepth - 8 else 0 end),
   int rnd_factor = 1 << (shift - 1)
  do
  	foreach int i in 0 .. 31 do
	    evenEvenEvenEven := [( src[i*32+0] * g_aiT32[0][0] ) + ( src[i*32+16] * g_aiT32[16][0] ),
	                         ( src[i*32+0] * g_aiT32[0][1] ) + ( src[i*32+16] * g_aiT32[16][1] )
	                        ];
	                      
	    evenEvenEvenOdd  := [( src[i*32+8] * g_aiT32[8][0] ) + ( src[i*32+24] * g_aiT32[24][0] ),
	                         ( src[i*32+8] * g_aiT32[8][1] ) + ( src[i*32+24] * g_aiT32[24][1] )
	                        ]; 
	
	    evenEvenEven := [ evenEvenEvenEven[0] + evenEvenEvenOdd[0],
	                      evenEvenEvenEven[1] + evenEvenEvenOdd[1],                                  
	                      evenEvenEvenEven[1] - evenEvenEvenOdd[1],
	                      evenEvenEvenEven[0] - evenEvenEvenOdd[0]
	                    ];   
	
	    evenEvenOdd  := [ ( src[i*32+4] * g_aiT32[4][j] ) + ( src[i*32+12] * g_aiT32[12][j] ) + ( src[i*32+20] * g_aiT32[20][j] ) + ( src[i*32+28] * g_aiT32[28][j] )
	    	              : for int j in 0 .. 3
	                    ];                     
	                    
	    evenEven := [ evenEvenEven[0] + evenEvenOdd[0],
	                  evenEvenEven[1] + evenEvenOdd[1],
	                  evenEvenEven[2] + evenEvenOdd[2],
	                  evenEvenEven[3] + evenEvenOdd[3],
	                  evenEvenEven[3] - evenEvenOdd[3],
	                  evenEvenEven[2] - evenEvenOdd[2],                                    
	                  evenEvenEven[1] - evenEvenOdd[1],
	                  evenEvenEven[0] - evenEvenOdd[0]
	                ];                                        
	
	    evenOdd  := [( src[i*32+2]  * g_aiT32[2] [j] ) + ( src[i*32+6]  * g_aiT32[6] [j] ) + ( src[i*32+10] * g_aiT32[10][j] ) + ( src[i*32+14] * g_aiT32[14][j] ) +
	    	         ( src[i*32+18] * g_aiT32[18][j] ) + ( src[i*32+22] * g_aiT32[22][j] ) + ( src[i*32+26] * g_aiT32[26][j] ) + ( src[i*32+30] * g_aiT32[30][j] )
	    	         : for int j in 0 .. 7
	    	        ];
	                 
	    even := [ evenEven[0] + evenOdd[0],
	    	      evenEven[1] + evenOdd[1],
	    	      evenEven[2] + evenOdd[2],
	    	      evenEven[3] + evenOdd[3],
	    	      evenEven[4] + evenOdd[4],
	    	      evenEven[5] + evenOdd[5],
	    	      evenEven[6] + evenOdd[6],
	    	      evenEven[7] + evenOdd[7],
	    	      evenEven[7] - evenOdd[7],
	    	      evenEven[6] - evenOdd[6],
	    	      evenEven[5] - evenOdd[5],
	    	      evenEven[4] - evenOdd[4],    	      
	    	      evenEven[3] - evenOdd[3],
	    	      evenEven[2] - evenOdd[2],
	    	      evenEven[1] - evenOdd[1],
	    	      evenEven[0] - evenOdd[0]
	            ];                       
	       
	    odd  := [( src[i*32+1]  * g_aiT32[1] [j] ) + ( src[i*32+3]  * g_aiT32[3] [j] ) + ( src[i*32+5]  * g_aiT32[5] [j] ) + ( src[i*32+7]  * g_aiT32[7] [j] ) +
	    	     ( src[i*32+9]  * g_aiT32[9] [j] ) + ( src[i*32+11] * g_aiT32[11][j] ) + ( src[i*32+13] * g_aiT32[13][j] ) + ( src[i*32+15] * g_aiT32[15][j] ) +
	    	     ( src[i*32+17] * g_aiT32[17][j] ) + ( src[i*32+19] * g_aiT32[19][j] ) + ( src[i*32+21] * g_aiT32[21][j] ) + ( src[i*32+23] * g_aiT32[23][j] ) +
	    	     ( src[i*32+25] * g_aiT32[25][j] ) + ( src[i*32+27] * g_aiT32[27][j] ) + ( src[i*32+29] * g_aiT32[29][j] ) + ( src[i*32+31] * g_aiT32[31][j] )
	    	     : for int j in 0 .. 15
	    	    ];
	         
	    dst[i*32+0 ] := clip_i32((even[0] + odd[0] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+1 ] := clip_i32((even[1] + odd[1] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+2 ] := clip_i32((even[2] + odd[2] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+3 ] := clip_i32((even[3] + odd[3] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+4 ] := clip_i32((even[4] + odd[4] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+5 ] := clip_i32((even[5] + odd[5] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+6 ] := clip_i32((even[6] + odd[6] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+7 ] := clip_i32((even[7] + odd[7] + rnd_factor ) >> shift, -32768, 32767 );	    
	    dst[i*32+8 ] := clip_i32((even[8] + odd[8] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+9 ] := clip_i32((even[9] + odd[9] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+10] := clip_i32((even[10] + odd[10] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+11] := clip_i32((even[11] + odd[11] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+12] := clip_i32((even[12] + odd[12] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+13] := clip_i32((even[13] + odd[13] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+14] := clip_i32((even[14] + odd[14] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+15] := clip_i32((even[15] + odd[15] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+16] := clip_i32((even[15] - odd[15] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+17] := clip_i32((even[14] - odd[14] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+18] := clip_i32((even[13] - odd[13] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+19] := clip_i32((even[12] - odd[12] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+20] := clip_i32((even[11] - odd[11] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+21] := clip_i32((even[10] - odd[10] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+22] := clip_i32((even[9] - odd[9] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+23] := clip_i32((even[8] - odd[8] + rnd_factor ) >> shift, -32768, 32767 );	    
	    dst[i*32+24] := clip_i32((even[7] - odd[7] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+25] := clip_i32((even[6] - odd[6] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+26] := clip_i32((even[5] - odd[5] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+27] := clip_i32((even[4] - odd[4] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+28] := clip_i32((even[3] - odd[3] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+29] := clip_i32((even[2] - odd[2] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+30] := clip_i32((even[1] - odd[1] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*32+31] := clip_i32((even[0] - odd[0] + rnd_factor ) >> shift, -32768, 32767 );
	 end
  end

end
