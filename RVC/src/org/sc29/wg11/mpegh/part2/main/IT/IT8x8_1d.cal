/********************************************************************************

This software module was originally developed by 
Eduardo Juarez, Wei Jianguo and Ren Rong, 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

UPM grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that UPM
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, UPM
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

UPM retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/
// Modified by: Junaid Jameel Ahmad (EPFL)

package org.sc29.wg11.mpegh.part2.main.IT;

import org.sc29.wg11.mpegh.part2.main.IT.CommonConstant.*;
import std.util.Math.*;

actor IT8x8_1d (uint(size=8) SHIFT) int(size=16) Src, uint(size=8) BitDepth
                  ==> 
                  int(size=16) Dst
                  :

  action Src:[ src ] repeat 64, BitDepth:[ bitDepth ]
         ==> 
         Dst:[ dst ] repeat 64
  var
   List(type:int(size=32), size=2 ) evenEven,
   List(type:int(size=32), size=2 ) evenOdd,
   List(type:int(size=32), size=4 ) even,
   List(type:int(size=32), size=4 ) odd,
   List(type:int(size=16), size=64) dst,
   uint(size=8) shift = SHIFT - (if(SHIFT = 12) then bitDepth - 8 else 0 end),
   int rnd_factor = 1 << (shift - 1)
  do
  	foreach int i in 0 .. 7 do
	    evenEven := [( src[i*8] * g_aiT8[0][0] ) + ( src[i*8+4] * g_aiT8[4][0] ),
	                 ( src[i*8] * g_aiT8[0][1] ) + ( src[i*8+4] * g_aiT8[4][1] )
	                ];  
	                 
	    evenOdd  := [( src[i*8+2] * g_aiT8[2][0] ) + ( src[i*8+6] * g_aiT8[6][0] ),
	                 ( src[i*8+2] * g_aiT8[2][1] ) + ( src[i*8+6] * g_aiT8[6][1] )
	                ]; 
	                
	    even     := [ evenEven[0] + evenOdd[0],
	                  evenEven[1] + evenOdd[1],
	                  evenEven[1] - evenOdd[1],
	                  evenEven[0] - evenOdd[0]
	                ];                           
	         
	    odd  := [( src[i*8+1] * g_aiT8[1][0] ) + ( src[i*8+3] * g_aiT8[3][0] ) + ( src[i*8+5] * g_aiT8[5][0] ) + ( src[i*8+7] * g_aiT8[7][0] ),
	             ( src[i*8+1] * g_aiT8[1][1] ) + ( src[i*8+3] * g_aiT8[3][1] ) + ( src[i*8+5] * g_aiT8[5][1] ) + ( src[i*8+7] * g_aiT8[7][1] ),
	             ( src[i*8+1] * g_aiT8[1][2] ) + ( src[i*8+3] * g_aiT8[3][2] ) + ( src[i*8+5] * g_aiT8[5][2] ) + ( src[i*8+7] * g_aiT8[7][2] ),
	             ( src[i*8+1] * g_aiT8[1][3] ) + ( src[i*8+3] * g_aiT8[3][3] ) + ( src[i*8+5] * g_aiT8[5][3] ) + ( src[i*8+7] * g_aiT8[7][3] )
	            ];
	
	    dst[i*8+0] := clip_i32((even[0] + odd[0] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+1] := clip_i32((even[1] + odd[1] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+2] := clip_i32((even[2] + odd[2] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+3] := clip_i32((even[3] + odd[3] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+4] := clip_i32((even[3] - odd[3] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+5] := clip_i32((even[2] - odd[2] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+6] := clip_i32((even[1] - odd[1] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*8+7] := clip_i32((even[0] - odd[0] + rnd_factor ) >> shift, -32768, 32767 );	    
	 end
  end

end
