// Author: Junaid Jameel Ahmad (EPFL)

package org.sc29.wg11.mpegh.part2.main.synParser;

import  std.util.Math.*;
import  org.sc29.wg11.mpegh.part2.main.synParser.Algo_ParserUtils.*;

actor Algo_Parser_Native (uint(size=8) PARSER_ID = 0, uint(size=8) TOTAL_PARSERS = 1)
                                uint(size= 8) byte,
                                uint(size= 9) InWppCtx,
                                uint(size= 8) InWppTopCUInfo
                                ==>
                                uint(size=16) CUInfo,
                                uint(size= 6) IntraPredMode,
                                uint(size=16) SliceAddr,
                                uint(size=16) TilesCoord,
                                uint(size=16) BitLcuPicSizes,
                                uint(size= 4) PartMode,
               					uint(size= 2) IsPicSlcLcu,
               					uint(size= 2) IsPicSlc,
                				uint(size= 2) LFAcrossSlcTile,
                                 int(size=16) Poc,
                                 int(size= 9) SaoSe,
                                uint(size= 8) SeiMD5,
                                uint(size= 2) SliceType,
                                bool          SplitTransform,
                                 int(size= 8) TUSize,
                                 int(size=16) Coeff,
                                bool          StrongIntraSmoothing,
                                uint(size=14) DispCoord,
                                uint(size= 5) NumRefIdxLxActive,
                                uint(size= 4) RefPicListModif,
                                 int(size=16) RefPoc,
                                 int(size=16) MvPredSyntaxElem,
                                bool		  Cbf,
                                 int(size= 8) DbfSe,
                                uint(size= 8) ReorderPics,
                                 int(size=16) WeightedPred,
                                 int(size= 8) Qp,
                                uint(size= 8) PcmSize,
                                uint(size=16) PcmBlk,
                                uint(size=16) LFBypassCUInfo,
                                uint(size= 9) OutWppCtx,
                                uint(size= 8) OutWppTopCUInfo,
                                 int(size= 8) HeaderControl,
                                uint(size=16) NbTokens
:

		uint(size= 8) BUFFER_SIZE		=  524288; // (512K)
		uint(size= 8) BUFFER_DEPTH		=  32;
		uint(size= 8) EPR_VALUE			= 0x03;
		uint(size= 8) START_CODE_VALUE	= 0x01;
		
		initialize ==>
		do
			openhevc_native_init(PARSER_ID);
		end

        uint(size=2) isNewNal := 0;
        uint(size=2) zeroByte := 0;
        /**************************************************************************
         * search_start_code
         *************************************************************************/
        start_code.init: action ==>
        guard
        	isNewNal = 0
        do
        end
        
        start_code.done: action ==>
        guard
        	isNewNal > 0
        do
			zeroByte := 0;
			countAEB := 0;
        end

        /**************************************************************************
         * read_nal_unit_header
         *************************************************************************/
        uint countAEB := 0;
        uint(size=32) locationAEB[1024];
        uint(size=8) localBuffer[BUFFER_SIZE];
        int(size=BUFFER_DEPTH) bufferWriteIdx := 0;
        int(size=BUFFER_DEPTH) bufferReadIdx := 0;
        uint(size=32) localBufferTotalBits := 0;

        read_nal_init.launch : action byte:[ b ] ==>
        guard
        	isNewNal != 2
        do
            if b != EPR_VALUE or zeroByte != 3 then
            	if isNewNal > 0 then
            	  localBuffer[bufferWriteIdx] := b;
            	  bufferWriteIdx := bufferWriteIdx + 1;
            	end
            	isNewNal := isNewNal + castBoolToInt(b = START_CODE_VALUE and zeroByte = 3);
            else
            	if b = EPR_VALUE then //println("AntiEmulationByte");
            		locationAEB[countAEB] := bufferWriteIdx - 1;
//            		println("ERP_pos-1: "+locationAEB[countAEB]);
            		countAEB := countAEB + 1;            		
            	end
            end
            if b = 0 then
            	zeroByte := ((zeroByte << 1) + 1) & 0x3;
            else
            	zeroByte := 0;
            end
        end

        read_nal.launch : action byte:[ b ] ==>
        guard
        	isNewNal != 2
        do
            if b != EPR_VALUE or zeroByte != 3 then
            	isNewNal := isNewNal + castBoolToInt(b = START_CODE_VALUE and zeroByte = 3);
            	localBuffer[bufferWriteIdx] := b;
            	bufferWriteIdx := bufferWriteIdx + 1;
            else
            	if b = EPR_VALUE then
            		locationAEB[countAEB] := bufferWriteIdx - 1; 
//            		println("ERP_pos-2: "+locationAEB[countAEB]);           		
            		countAEB := countAEB + 1;
            	end
            end
            if b = 0 then
            	zeroByte := ((zeroByte << 1) + 1) & 0x3;
            else
            	zeroByte := 0;
            end
        end

        read_nal.done : action ==>
        guard
        	isNewNal = 2
        do
            isNewNal := 1;
            localBufferTotalBits := bufferWriteIdx<<3; 
            bufferWriteIdx := 0;
            bufferReadIdx := 0;
            zeroByte := 0;
        end
        
int naluCounter := 0;
		int nal_unit_type := -1;
        nalu_processor: action ==>
        do
			//nal_unit_type := openhevc_native_parse_nal_unit(PARSER_ID, localBuffer, localBufferTotalBits>>3);
			nal_unit_type := openhevc_native_decode_nal_unit(PARSER_ID, localBuffer, localBufferTotalBits>>3);
naluCounter := naluCounter + 1;
println(naluCounter+" naluType: "+nal_unit_type);
        end
        
        uint(size=8) TileWppParams[4] := [0, 0, 1, 1];
        tokens_sender.SliceHeader:
        action ==>
        	PartMode:[openhevc_native_get_SliceMode(PARSER_ID)],
        	BitLcuPicSizes:[retSizes] repeat 6,
        	DispCoord:[0, retSizes[4]-1, 0, retSizes[5]-1],
        	ReorderPics:[retReorderPics] repeat 8,
        	SaoSe:[retSoaSeSH],
        	LFAcrossSlcTile:[retLFAcrossSlcTile]
		guard 
			nal_unit_type = NAL_TRAIL_R or
			nal_unit_type = NAL_TRAIL_N or
			nal_unit_type = NAL_TSA_N or
			nal_unit_type = NAL_TSA_R or
			nal_unit_type = NAL_STSA_N or
			nal_unit_type = NAL_STSA_R or
			nal_unit_type = NAL_BLA_W_LP or
			nal_unit_type = NAL_BLA_W_RADL or
			nal_unit_type = NAL_BLA_N_LP or
			nal_unit_type = NAL_IDR_W_RADL or
			nal_unit_type = NAL_IDR_N_LP or
			nal_unit_type = NAL_CRA_NUT or
			nal_unit_type = NAL_RADL_N or
			nal_unit_type = NAL_RADL_R or
			nal_unit_type = NAL_RASL_N or
			nal_unit_type = NAL_RASL_R
		var
			// uint(size= 8) retSliceInfo[2],
			uint(size=16) retSizes[6],
			uint(size= 8) retReorderPics[8],
			uint(size= 8) retSoaSeSH,
			uint(size= 2) retLFAcrossSlcTile
		do
			// openhevc_native_get_SliceInfo(PARSER_ID, retSliceInfo);
			openhevc_native_get_BitLcuPicSizes(PARSER_ID, retSizes);
			openhevc_native_get_ReorderPics(PARSER_ID, retReorderPics);
			retSoaSeSH := openhevc_native_get_SaoSeSH(PARSER_ID);
			retLFAcrossSlcTile := openhevc_native_get_LFAcrossSlcTile(PARSER_ID);
			openhevc_native_get_TileWppParams(PARSER_ID, TileWppParams);
        end

        tokens_sender.SeiMD5: action ==> SeiMD5:[retHash] repeat 51
		guard 
			(nal_unit_type = NAL_SEI_PREFIX or nal_unit_type = NAL_SEI_SUFFIX)
		var
			uint(size=8) retHash[51]
		do
			openhevc_native_get_SeiMD5(PARSER_ID, retHash);	
        end

        tokens_sender_done: action ==>
		do
        end

        ////////////////////////////////////////////////////////////////////////////////////////////////
        //  Native procedures/functions
		@native procedure openhevc_native_init(uint(size=8) parserID)
		end

		@native procedure openhevc_native_close(uint(size=8) parserID)
		end

		@native function openhevc_native_parse_nal_unit(uint(size=8) parserID, uint(size=8) nal[BUFFER_SIZE], int(size=BUFFER_DEPTH) length) --> int(size=32)
		end
        
		@native function openhevc_native_decode_nal_unit(uint(size=8) parserID, uint(size=8) nal[BUFFER_SIZE], int(size=BUFFER_DEPTH) length) --> int(size=32)
		end
		
		// Output
		@native procedure openhevc_native_get_TileWppParams(uint(size=8) parserID, uint(size=8) retReorder[4])
		end

		@native function openhevc_native_get_TilesCoordX(uint(size=8) parserID) --> List(type:uint(size=32), size=128)
		end

		@native function openhevc_native_get_TilesCoordY(uint(size=8) parserID) --> List(type:uint(size=32), size=128)
		end

		@native procedure openhevc_native_get_SliceInfo(uint(size=8) parserID, uint(size=8) retSliceInfo[4])
		end

		@native function openhevc_native_get_SliceMode(uint(size=8) parserID) --> uint(size=8)
		end

		@native procedure openhevc_native_get_BitLcuPicSizes(uint(size=8) parserID, uint(size=16) retSizes[6])
		end

		@native procedure openhevc_native_get_ReorderPics(uint(size=8) parserID, uint(size=8) retReorder[8])
		end

		@native procedure openhevc_native_get_MvPredSyntaxElemSHv1(uint(size=8) parserID, int(size=16) retMvParams[2])
		end

		@native procedure openhevc_native_get_MvPredSyntaxElemSHv2(uint(size=8) parserID, int(size=16) retMvParams[4])
		end

		@native function openhevc_native_get_SaoSeSH(uint(size=8) parserID) --> uint(size=8)
		end

		@native function openhevc_native_get_LFAcrossSlcTile(uint(size=8) parserID) --> uint(size=2)
		end

		@native procedure openhevc_native_get_SeiMD5(uint(size=8) parserID, uint(size=8) retHash[51])
		end

		@native procedure openhevc_native_get_DbfSe(uint(size=8) parserID, int(size=8) retDbfSe[5])
		end

		@native procedure openhevc_native_get_StrongIntraSmoothing(uint(size=8) parserID, uint(size=8) retStrongIntraSmoothing[2])
		end

        ////////////////////////////////////////////////////////////////////////////////////////////////

        schedule fsm start_code:
                // search start code
                start_code                                      ( start_code.init                               ) --> read_nal_init;
                start_code                                      ( start_code.done                               ) --> read_nal;
                // read NALU from FIFO
                read_nal_init                                   ( read_nal_init.launch                          ) --> read_nal_init;
                read_nal_init                                   ( read_nal.done                                 ) --> process_nalu;
                read_nal                                        ( read_nal.launch                               ) --> read_nal;
                read_nal                                        ( read_nal.done                                 ) --> process_nalu;
                // read Nal Unit header
                process_nalu                            		( nalu_processor                          		) --> send_tokens;

                send_tokens                                     ( tokens_sender             					) --> start_code;
                send_tokens                                     ( tokens_sender_done             				) --> start_code;
//                send_tokens_done                                ( tokens_sender_done             				) --> start_code;
        end

end
