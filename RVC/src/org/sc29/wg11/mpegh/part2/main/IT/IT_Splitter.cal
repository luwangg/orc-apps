/********************************************************************************

This software module was originally developed by 
Eduardo Juarez, Wei Jianguo and Ren Rong, 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

UPM grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that UPM
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, UPM
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

UPM retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

package org.sc29.wg11.mpegh.part2.main.IT;  
import  std.util.Math.*;


actor IT_Splitter() int(size=16)  Coeff, 
                    int(size=7)   Size
                    ==> 
                    int(size=16)  Coeff_4x4_DST,  
                    int(size=16)  Coeff_4x4_IT,  
                    int(size=16)  Coeff_8x8, 
                    int(size=16)  Coeff_16x16, 
                    int(size=16)  Coeff_32x32,                                   
                    int(size=16)  Coeff_skip                                    
                    :
 			
	int 	MAX_TR_DYNAMIC_RANGE = 15; // Maximum transform dynamic range (excluding sign bit)
	int 	BIT_DEPTH = 8; // assuming 8bits for samples
	
    int(size= 16) tabTransCoeffLevel[32*32];
	

	/**************************************************************************
	 * split_4x4.transf_skip
	 *************************************************************************/
	split_4x4.transf_skip: action Coeff:    [ coeff ] repeat 4*4, 
	                  			  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  			  ==>
	                  			  Coeff_skip:[ [(tabTransCoeffLevel[i] + offset) >> transformSkipShift: for int i in 0 .. 15] ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 2,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end

	/**************************************************************************
	 * split_4x4.DST
	 *************************************************************************/
	split_4x4.DST: action Coeff:    [ coeff ] repeat 4*4, 
	                  	  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  	  ==>
	                  	  Coeff_4x4_DST:[ [tabTransCoeffLevel[i]: for int i in 0 .. 4 * 4 - 1] ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0 and isDST = 1 and transformSkipFlag = 0
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end

	/**************************************************************************
	 * split_4x4.IT
	 *************************************************************************/
	split_4x4.IT: action Coeff:    [ coeff ] repeat 4*4, 
	                  	 Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  	 ==>
	                  	 Coeff_4x4_IT:[ [tabTransCoeffLevel[i]: for int i in 0 .. 4 * 4 - 1] ] repeat 4*4
	guard
	  sizeOfTU = 4 and RCskip = 0 and isDST = 0 and transformSkipFlag = 0
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end

	/**************************************************************************
	 * split_4x4.skipIT
	 *************************************************************************/
	split_4x4.skipIT: action  
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  ==>
	guard
	  sizeOfTU = 4 and RCskip != 0 and transformSkipFlag = 0
	end

	/**************************************************************************
	 * split_8x8.trans_skip
	 *************************************************************************/
	split_8x8.trans_skip: action Coeff:    [ coeff ] repeat 8*8, 
	                  			 Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  			 ==>
	                  			 Coeff_skip:[ [(tabTransCoeffLevel[i] + offset) >> transformSkipShift: for int i in 0 .. 63] ] repeat 8*8  
	guard
	  sizeOfTU = 8 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 3,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end	

	/**************************************************************************
	 * split_8x8.default
	 *************************************************************************/
	split_8x8.default: action Coeff:    [ coeff ] repeat 8*8, 
	                  		  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  		  ==>
	                  		  Coeff_8x8:[  [tabTransCoeffLevel[i]: for int i in 0 .. 8 * 8 - 1]  ] repeat 8*8  
	guard
	  sizeOfTU = 8 and RCskip = 0 and transformSkipFlag = 0
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end	
	
	/**************************************************************************
	 * split_8x8.skip
	 *************************************************************************/
	split_8x8.skip: action  
	                  Size:     [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                  ==>
	guard
	  sizeOfTU = 8 and RCskip != 0 and transformSkipFlag = 0
	end

	/**************************************************************************
	 * split_16x16.trans_skip
	 *************************************************************************/
	split_16x16.trans_skip: action Coeff:      [ coeff ] repeat 16*16, 
	                    		   Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    		   ==>
	                    		   Coeff_skip:[ [(tabTransCoeffLevel[i] + offset) >> transformSkipShift: for int i in 0 .. 255] ] repeat 16*16
	guard
	  sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 4,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end	

	/**************************************************************************
	 * split_16x16.default
	 *************************************************************************/
	split_16x16.default: action Coeff:      [ coeff ] repeat 16*16, 
	                    		Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    		==>
	                    		Coeff_16x16:[ [tabTransCoeffLevel[i]: for int i in 0 .. 16 * 16 - 1] ] repeat 16*16
	guard
	  sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 0
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end	

	/**************************************************************************
	 * split_16x16.skip
	 *************************************************************************/
	split_16x16.skip: action 
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    ==>
	guard
	  sizeOfTU = 16 and RCskip != 0 and transformSkipFlag = 0
	end	
	
	/**************************************************************************
	 * split_32x32.trans_skip
	 *************************************************************************/
	split_32x32.trans_skip: action Coeff:      [ coeff ] repeat 32*32,  
	                    		   Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    		   ==>
	                    		   Coeff_skip:[ [(tabTransCoeffLevel[i] + offset) >> transformSkipShift: for int i in 0 .. 1023] ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 1
	var
		int shift = MAX_TR_DYNAMIC_RANGE - BIT_DEPTH - 5,
		int transformSkipShift = shift,
		int offset = (1 << (transformSkipShift -1))
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end

	/**************************************************************************
	 * split_32x32.default
	 *************************************************************************/
	split_32x32.default: action Coeff:      [ coeff ] repeat 32*32,  
	                    		Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    		==>
	                    		Coeff_32x32:[ [tabTransCoeffLevel[i]: for int i in 0 .. 32 * 32 - 1] ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 0
	do
		foreach int i in 0 .. sizeOfTU * sizeOfTU - 1 do
		    tabTransCoeffLevel[i] := coeff[i];
		end
	end

	/**************************************************************************
	 * split_32x32.skip
	 *************************************************************************/
	split_32x32.skip: action
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    ==>
	guard
	  sizeOfTU = 32 and RCskip != 0 and transformSkipFlag = 0
	end
	
	/**************************************************************************
	 * split_64x64.skip
	 *************************************************************************/
	split_64x64.skip: action
	                    Size:       [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset]
	                    ==>
	guard
	  sizeOfTU = 64 and RCskip != 0 and transformSkipFlag = 0
	end

end
