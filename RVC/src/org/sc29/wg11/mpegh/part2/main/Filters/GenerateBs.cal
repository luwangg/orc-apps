/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, IETR/INSA of
Rennes will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/
package org.sc29.wg11.mpegh.part2.main.Filters;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

actor GenerateBs()
	bool          Cbf,
	uint(size=16) CUInfo,
	uint(size=2)  IsBiPredOrLx,
	uint(size=8)  LcuSizeMax,
	uint(size=2)  LFAcrossSlcTile,
	int (size=32) Mv,
	uint(size=4)  PartMode,
	int (size=16) RefPoc,
	uint(size=16) SliceAddr,
	bool          SplitTransf,
	uint(size=16) TilesCoord
		==>
	uint(size=2) BSHor,
	uint(size=2) BSVer
		:

	uint(size=16) sliceAdr[2];
	bool loopFilterAcrossSlc;
	bool loopFilterAcrossTile;

	uint(size=8)  lcuSizeMax;
	uint(size=7)  nS;
	uint(size=16) cuAddr[2] := [-1,-1];
	uint(size=16) cuAddrNQT[2] := [-1,-1];
	uint(size=5)  cuMode;
	uint(size=3)  numPart;
	uint(size=3)  numPartDecoded;

	int (size=4) trafoTreeDepth;
	uint(size=3) trafoTreeIdx[6];

	bool vertEdgeFlagVal[16] :=
		[true, true, true, true, true, true, true, true, true, true, true,
		 true, true, true, true, true];
	bool horEdgeFlagVal[16]  :=
		[true, true, true, true, true, true, true, true, true, true, true,
		 true, true, true, true, true];

	int(size=16) iLoop;

	uint(size=16) numTiles;
	uint(size=16) currTileIdx;
	uint(size=16) tilesBeg[MAX_NUM_TILES][2];
	uint(size=16) tilesEnd[MAX_NUM_TILES][2];

	uint(size=5) predModeTab[PICT_WIDTH_POW_2/4][PICT_HEIGHT_POW_2/4];//
	bool cbfUpNeighb[PICT_WIDTH_POW_2/4];//
	bool cbfLeftNeighb[PICT_HEIGHT_POW_2/4];//
	bool isBiPredTab[PICT_WIDTH_POW_2/4][PICT_HEIGHT_POW_2/4];//
	int(size=16) refPocUpNeighb[PICT_WIDTH_POW_2/4][2];//
	int(size=16) refPocLeftNeighb[PICT_HEIGHT_POW_2/4][2];//
	int(size=32) mvUpNeighb[PICT_WIDTH_POW_2/4][2][2];//
	int(size=32) mvLeftNeighb[PICT_HEIGHT_POW_2/4][2][2];//
	int(size=16) coordMax1stPu[2];
	int(size=16) xAddr2ndPu;
	int(size=16) yAddr2ndPu;
	bool isBiPred[2];
	int(size=16) refPoc[2][2];
	int(size=32) mv[2][2][2];
	

	uint(size=9) currIdx;
	uint(size=9) currIdxHor;
	uint(size=9) currIdxVer;
	int(size=9) nbBlkToSend;
	uint(size=2) numMvInfo;
	uint(size=2) bsTable[2][128];

	uint(size=16) treeAddrInBlk[2];

	procedure findCurrTile(uint(size=16) xPixAddr, uint(size=16) yPixAddr)
	begin
		foreach int tileIdx in 0 .. numTiles - 1
		do
			if(xPixAddr >= tilesBeg[tileIdx][0] &&
				xPixAddr < tilesEnd[tileIdx][0]) then
				if(yPixAddr >= tilesBeg[tileIdx][1] &&
					yPixAddr < tilesEnd[tileIdx][1]) then
					currTileIdx := tileIdx;
				end
			end
		end
	end

	procedure savePredInfoTu(uint(size=16) treeAddrInBlk[2], uint(size=8) treeSizeInBlk)
	var
		uint(size=16) xMin = treeAddrInBlk[0] & (PICT_WIDTH_POW_2/4-1),
		uint(size=16) xMax = (treeAddrInBlk[0] + treeSizeInBlk)&(PICT_WIDTH_POW_2/4-1),
		uint(size=16) yMin = treeAddrInBlk[1],
		uint(size=16) yMax = treeAddrInBlk[1]+treeSizeInBlk,
		uint(size=8) partIdx
	begin
	    if (numMvInfo != 2) then
		foreach uint x in xMin .. xMax-1
		do
			predModeTab[x][yMin] := cuMode;
			isBiPredTab[x][yMin] := isBiPred[0];
			
			predModeTab[x][yMax - 1] := cuMode;
			isBiPredTab[x][yMax - 1] := isBiPred[0];
		  end
		  foreach uint y in yMin .. yMax-1
		  do
			predModeTab[xMin][y] := cuMode;
			isBiPredTab[xMin][y] := isBiPred[0];

			predModeTab[xMax - 1][y] := cuMode;
			isBiPredTab[xMax - 1][y] := isBiPred[0];
		  end
		else
		  foreach uint x in xMin .. xMax-1
		  do
			partIdx := castBoolToInt((x >= xAddr2ndPu || yMin >= yAddr2ndPu));
			predModeTab[x][yMin] := cuMode;
			isBiPredTab[x][yMin] := isBiPred[partIdx];

			partIdx := castBoolToInt((x >= xAddr2ndPu || (yMax - 1) >= yAddr2ndPu));
			predModeTab[x][yMax - 1] := cuMode;
			isBiPredTab[x][yMax - 1] := isBiPred[partIdx];
		end
		foreach uint y in yMin .. yMax-1
		do
			partIdx := castBoolToInt((xMin >= xAddr2ndPu || y >= yAddr2ndPu));
			predModeTab[xMin][y] := cuMode;
			isBiPredTab[xMin][y] := isBiPred[partIdx];

			partIdx := castBoolToInt(((xMax - 1) >= xAddr2ndPu || y >= yAddr2ndPu));
			predModeTab[xMax - 1][y] := cuMode;
			isBiPredTab[xMax - 1][y] := isBiPred[partIdx];
		end
	end
	end

	procedure savePredPuEdge(uint(size=16) addr[2], uint(size=8) puSize[2], bool edgeIsHoriz)
	var
		uint(size=16) xMin = (addr[0]>>2)&(PICT_WIDTH_POW_2/4-1),
		uint(size=16) xMax = ((addr[0]+puSize[0])/4)&(PICT_WIDTH_POW_2/4-1),
		uint(size=16) yMin = addr[1]/4,
		uint(size=16) yMax = (addr[1]+puSize[1])/4
	begin
		if(edgeIsHoriz) then
			foreach uint x in xMin .. xMax-1
			do
				predModeTab[x][yMax - 1] := cuMode;
				isBiPredTab[x][yMax - 1] := isBiPred[0];

				predModeTab[x][yMax] := cuMode;
				isBiPredTab[x][yMax] := isBiPred[1];
			end
		else
			foreach uint y in yMin .. yMax-1
			do
				predModeTab[xMax - 1][y] := cuMode;
				isBiPredTab[xMax - 1][y] := isBiPred[0];

				predModeTab[xMax][y] := cuMode;
				isBiPredTab[xMax][y] := isBiPred[1];
			end
		end
	end

	procedure rstEdgeTables(uint(size=16) addr[2])
	begin
		vertEdgeFlagVal[0] := (addr[0] != 0);
		horEdgeFlagVal[0] := (addr[1] != 0);
	
		vertEdgeFlagVal[0] := not(addr[0]=0 ||
			(not loopFilterAcrossSlc &&
				sliceAdr[0]=addr[0] && sliceAdr[1]=addr[1]) ||
			 not loopFilterAcrossTile &&
				addr[0] = tilesBeg[currTileIdx][0]);
	
		if(addr[1]=0) then
			horEdgeFlagVal[0] := false;
		else
			if(not loopFilterAcrossSlc && (sliceAdr[1] = addr[1] ||
					(sliceAdr[1] + lcuSizeMax = addr[1] && addr[0] < sliceAdr[0]))) then
				horEdgeFlagVal[0] := false;
			elsif(not loopFilterAcrossTile &&
				addr[1] = tilesBeg[currTileIdx][1]) then
				horEdgeFlagVal[0] := false;
			else
				horEdgeFlagVal[0] := true;
			end
		end
	end

	procedure processTUBoundaries(bool cbf, uint(size=16) treeAddr[2], uint(size=7) treeNS)
	var
		uint(size=16) xMin,
		uint(size=16) xMax,
		uint(size=16) yMin,
		uint(size=16) yMax,

		uint(size=2) bS[1],
		uint(size=16) addrBlk[2],
		uint(size=16) addrTUInBlk[2],
		uint(size=16) rasterIdx,
		uint(size=8) partIdx
	begin
		xMin := (treeAddr[0] & (lcuSizeMax - 1))>>2;
		xMax := xMin+(treeNS>>2);
		yMin := (treeAddr[1] & (lcuSizeMax - 1))>>2;
		yMax := yMin + (treeNS>>2);

		if (horEdgeFlagVal[yMin]) then
			addrBlk := [treeAddr[i] >> 2: for int i in 0 .. 1];
			// addrTUInBlk := [treeAddr[i] - cuAddr[i] >> 2: for int i in 0 .. 1];
			addrTUInBlk[0] := treeAddr[0] - cuAddr[0] >> 2;
			addrTUInBlk[1] := treeAddr[1] - cuAddr[1] >> 3;
			if ((addrBlk[1] & 1) != 1) then
			  foreach int x in xMin .. xMax - 1
			  do
				rasterIdx := absCoordInBlkToZScan2(addrTUInBlk);
				partIdx := castBoolToInt(not( x < coordMax1stPu[0] && yMin < coordMax1stPu[1] ));

				genBoundFilterStrengthTUHor(bS, addrBlk, cbf, partIdx);
				bsTable[1][rasterIdx] := bS[0];

				addrBlk[0] := addrBlk[0] + 1;
				addrTUInBlk[0] := addrTUInBlk[0] + 1;
			  end
		    end
	    end

		if (vertEdgeFlagVal[xMin]) then
			addrBlk := [treeAddr[i] >> 2: for int i in 0 .. 1];
			// addrTUInBlk := [treeAddr[i] - cuAddr[i] >> 2: for int i in 0 .. 1];
			addrTUInBlk[0] := treeAddr[0] - cuAddr[0] >> 3;
			addrTUInBlk[1] := treeAddr[1] - cuAddr[1] >> 2;
			if ((addrBlk[0] & 1) != 1) then
			foreach int y in yMin .. yMax - 1
			do
				rasterIdx := absCoordInBlkToZScan3(addrTUInBlk);
				partIdx := castBoolToInt(not(xMin < coordMax1stPu[0] && y < coordMax1stPu[1]));

				genBoundFilterStrengthTUVert(bS, addrBlk, cbf, partIdx);
				bsTable[0][rasterIdx] := bS[0];
				
				addrBlk[1] := addrBlk[1] + 1;
				addrTUInBlk[1] := addrTUInBlk[1] + 1;
			end
		end
	end
	end

	/* Compute Pu boundary only if it's not sure to also have a TU boundary */
	procedure processPUBoundary(uint(size=16) addr[2], uint(size=8) puSize[2], bool edgeIsHoriz)
	var
		int xMin = (addr[0] & (lcuSizeMax - 1)) >> 2,
		int xMax = xMin + (puSize[0] >> 2),
		int yMin = (addr[1] & (lcuSizeMax - 1)) >> 2,
		int yMax = yMin + (puSize[1] >> 2),


		uint(size=2) bS[1],
		uint(size=16) addrBlk[2],
		uint(size=16) addrTU[2],
		uint(size=16) rasterIdx,
		int(size=32) mvQ0Pu1 [2][2] := [[mv[0][i][j]: for int j in 0 .. 1]: for int i in 0 .. 1],
		int(size=32) mvQ0Pu2 [2][2] := [[mv[1][i][j]: for int j in 0 .. 1]: for int i in 0 .. 1],
		int(size=16) refPocQ0Pu1[2] := [refPoc[0][i]: for int i in 0 .. 1],
		int(size=16) refPocQ0Pu2[2] := [refPoc[1][i]: for int i in 0 .. 1]
	begin
		addrBlk := [addr[i] >> 2: for int i in 0 .. 1];
		// addrTU := [addr[i] - cuAddr[i]: for int i in 0 .. 1];
		if(edgeIsHoriz) then
			if(horEdgeFlagVal[yMin]) then
			  if ((addrBlk[1] & 1) != 1) then
			    addrTU[0] := addr[0] - cuAddr[0];
			    addrTU[1] := addr[1] - cuAddr[1];
				foreach int x in xMin .. xMax - 1
				do
					rasterIdx := absCoordToZScan2(addrTU);
					genBoundFilterStrengthCorePU(bS, addrBlk, false, mvQ0Pu1, mvQ0Pu2, refPocQ0Pu1, refPocQ0Pu2);
					bsTable[1][rasterIdx] := bS[0];
					addrBlk[0] := addrBlk[0] + 1;
					addrTU[0] := addrTU[0] + 4;
				end
			end
			end
		else
			if(vertEdgeFlagVal[xMin]) then
			    if ((addrBlk[0] & 1) != 1) then
			      addrTU[0] := addr[0] - cuAddr[0];
			      addrTU[1] := addr[1] - cuAddr[1];
				foreach int y in yMin .. yMax - 1
				do
					rasterIdx := absCoordToZScan3(addrTU);
					genBoundFilterStrengthCorePU(bS, addrBlk, true, mvQ0Pu1, mvQ0Pu2, refPocQ0Pu1, refPocQ0Pu2);
					bsTable[0][rasterIdx] := bS[0];
					addrBlk[1] := addrBlk[1] + 1;
					addrTU[1] := addrTU[1] + 4;
				end
			end
		end
	end
	end

    @optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="boundaryStrength0_mv32_orcc")
	procedure boundaryStrength0(
		uint(size=2) bS[1],
		int(size=32) mvP0[2][2],
		int(size=32) mvQ0[2][2])
	begin
      if ((abs(mvP0[0][0] - mvQ0[0][0]) >= 4 || abs(mvP0[0][1] - mvQ0[0][1]) >= 4 ||
        abs(mvP0[1][0] - mvQ0[1][0]) >= 4 || abs(mvP0[1][1] - mvQ0[1][1]) >= 4) &&
        (abs(mvP0[1][0] - mvQ0[0][0]) >= 4 || abs(mvP0[1][1] - mvQ0[0][1]) >= 4 ||
        abs(mvP0[0][0] - mvQ0[1][0]) >= 4 || abs(mvP0[0][1] - mvQ0[1][1]) >= 4)) then
       	bS[0] := 1;
      else
        bS[0] := 0;
      end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="boundaryStrength1_mv32_orcc")
	procedure boundaryStrength1(
		uint(size=2) bS[1],
		int(size=32) mvP0[2][2],
		int(size=32) mvQ0[2][2])
	begin
	  if (abs(mvP0[0][0] - mvQ0[0][0]) >= 4 || abs(mvP0[0][1] - mvQ0[0][1]) >= 4 ||
        abs(mvP0[1][0] - mvQ0[1][0]) >= 4 || abs(mvP0[1][1] - mvQ0[1][1]) >= 4) then
       	bS[0] := 1;
      else
        bS[0] := 0;
      end
     end
    
    @optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="boundaryStrength2_mv32_orcc")
	procedure boundaryStrength2(
		uint(size=2) bS[1],
		int(size=32) mvP0[2][2],
		int(size=32) mvQ0[2][2])
	begin
      if (abs(mvP0[1][0] - mvQ0[0][0]) >= 4 || abs(mvP0[1][1] - mvQ0[0][1]) >= 4 ||
        abs(mvP0[0][0] - mvQ0[1][0]) >= 4 || abs(mvP0[0][1] - mvQ0[1][1]) >= 4) then
       	bS[0] := 1;
      else
        bS[0] := 0;
      end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE) && HAVE_SSE4", name="boundaryStrength3_mv32_orcc")
	procedure boundaryStrength3(
		uint(size=2) bS[1],
		uint(size=5) predModeP0,
		uint(size=5) predModeQ0,
		int(size=32) mvP0[2][2],
		int(size=32) mvQ0[2][2])
	var
	  int(size=32) vA[2], 
      int(size=32) vB[2]
	begin
       vA[0]     := mvQ0[predModeQ0][0];
       vA[1]     := mvQ0[predModeQ0][1];
       vB[0]     := mvP0[predModeP0][0];
       vB[1]     := mvP0[predModeP0][1];
       if ((abs(vA[0] - vB[0]) >= 4 || abs(vA[1] - vB[1]) >= 4)) then
        bS[0] := 1;
       else
        bS[0] := 0;
       end
    end
     
	procedure genBoundFilterStrengthTUVert(uint(size=2) bS[1], uint(size=16) addrInBlk[2],
		bool cbfQ0, uint(size=8) partIdx)
	var
		uint(size=16) q0[2] = [addrInBlk[0] & (PICT_WIDTH_POW_2/4-1), addrInBlk[1]],
		uint(size=16) p0[2] := [q0[0]-1, q0[1]],
		int(size=32) mvP0[2][2] :=
			[[mvLeftNeighb[q0[1]][i][j]: for int j in 0 .. 1]: for int i in 0 .. 1],
		int(size=32) mvQ0[2][2] :=
			[[mv[partIdx][i][j]: for int j in 0 .. 1]: for int i in 0 .. 1],
		int(size=16) refPocP0[2] := [refPocLeftNeighb[q0[1]][i]: for int i in 0 .. 1],
		int(size=16) refPocQ0[2] := [refPoc[partIdx][i]: for int i in 0 .. 1],
		bool cbfP0 = cbfLeftNeighb[q0[1]],
		uint(size=5) predModeQ0,
		uint(size=5) predModeP0
	begin
	    if (predModeTab[p0[0]][p0[1]] = INTRA || predModeTab[q0[0]][q0[1]] = INTRA) then
			bS[0] := 2;
		else if(cbfP0 || cbfQ0) then
			bS[0] := 1;
		else
		  bS[0] := 1;
          if (isBiPredTab[p0[0]][p0[1]] and isBiPredTab[q0[0]][q0[1]]) then
		    if (refPocQ0[0] = refPocP0[0]) then
              if (refPocQ0[0] = refPocQ0[1] &&
			    refPocP0[0] = refPocP0[1]) then
                boundaryStrength0(bS, mvP0, mvQ0);
              else if (refPocP0[1] = refPocQ0[1]) then
                boundaryStrength1(bS, mvP0, mvQ0);
			  end
			end
            else if (refPocP0[1] = refPocQ0[0] and
              refPocP0[0] = refPocQ0[1]) then
                boundaryStrength2(bS, mvP0, mvQ0);
            end end
          else if (not (isBiPredTab[p0[0]][p0[1]]) and not (isBiPredTab[q0[0]][q0[1]])) then // 1 MV
            predModeQ0 := predModeTab[q0[0]][q0[1]] & 1;
		    predModeP0 := predModeTab[p0[0]][p0[1]] & 1;
            if (refPocQ0[predModeQ0] = refPocP0[predModeP0]) then
              boundaryStrength3(bS, predModeP0, predModeQ0, mvP0, mvQ0);
			end
		  end
		end
      end end
	end

	procedure genBoundFilterStrengthTUHor(uint(size=2) bS[1], uint(size=16) addrInBlk[2],
		bool cbfQ0, uint(size=8) partIdx)
	var
		uint(size=16) q0[2] = [addrInBlk[0] & (PICT_WIDTH_POW_2/4-1), addrInBlk[1]],
		int(size=32) mvP0 [2][2] :=
			[[mvUpNeighb[q0[0]][i][j]: for int j in 0 .. 1]: for int i in 0 .. 1],
		int(size=32) mvQ0 [2][2] :=
			[[mv[partIdx][i][j]: for int j in 0 .. 1]: for int i in 0 .. 1],
		int(size=16) refPocP0 [2] := [refPocUpNeighb[q0[0]][i]: for int i in 0 .. 1],
		int(size=16) refPocQ0[2] := [refPoc[partIdx][i]: for int i in 0 .. 1],
		uint(size=16) p0[2] := [q0[0], q0[1]-1],
		bool cbfP0 = cbfUpNeighb[q0[0]],
		uint(size=5) predModeQ0,
		uint(size=5) predModeP0
	begin
	    if (predModeTab[p0[0]][p0[1]] = INTRA || predModeTab[q0[0]][q0[1]] = INTRA) then
		  bS[0] := 2;
		else if (cbfP0 || cbfQ0) then
		  bS[0] := 1;
		else
		  bS[0] := 1;
          if (isBiPredTab[p0[0]][p0[1]] and isBiPredTab[q0[0]][q0[1]]) then
		    if (refPocQ0[0] = refPocP0[0]) then
              if (refPocQ0[0] = refPocQ0[1] &&
			    refPocP0[0] = refPocP0[1]) then
                boundaryStrength0(bS, mvP0, mvQ0);
              else if (refPocP0[1] = refPocQ0[1]) then
                boundaryStrength1(bS, mvP0, mvQ0);
			  end
			end
            else if (refPocP0[1] = refPocQ0[0] and
              refPocP0[0] = refPocQ0[1]) then
              boundaryStrength2(bS, mvP0, mvQ0);
            end end
          else if (not (isBiPredTab[p0[0]][p0[1]]) and not (isBiPredTab[q0[0]][q0[1]])) then // 1 MV
            predModeQ0 := predModeTab[q0[0]][q0[1]] & 1;
		    predModeP0 := predModeTab[p0[0]][p0[1]] & 1;
            if (refPocQ0[predModeQ0] = refPocP0[predModeP0]) then
              boundaryStrength3(bS, predModeP0, predModeQ0, mvP0, mvQ0);
			end
		  end
		end
		end end
	end

	procedure genBoundFilterStrengthCorePU(uint(size=2) bS[1], uint(size=16) addrInBlk[2],
		bool isVerticalEdge, int(size=32) mvP0 [2][2], int(size=32) mvQ0 [2][2],
		int(size=16) refPocP0[2], int(size=16) refPocQ0 [2])
	var
		uint(size=16) q0[2] = [addrInBlk[0] & (PICT_WIDTH_POW_2 / 4 - 1), addrInBlk[1]],
		uint(size=16) p0[2] := if(isVerticalEdge) then [q0[0]-1, q0[1]]
			else [q0[0], q0[1]-1] end,
		uint(size=5) predModeQ0,
		uint(size=5) predModeP0
	begin
		if (predModeTab[p0[0]][p0[1]] = INTRA || predModeTab[q0[0]][q0[1]] = INTRA) then
			bS[0] := 2;
		else
		  bS[0] := 1;
          if (isBiPredTab[p0[0]][p0[1]] and isBiPredTab[q0[0]][q0[1]]) then
		    if (refPocQ0[0] = refPocP0[0]) then
              if (refPocQ0[0] = refPocQ0[1] &&
			    refPocP0[0] = refPocP0[1]) then
                boundaryStrength0(bS, mvP0, mvQ0);
              else if (refPocP0[1] = refPocQ0[1]) then
                boundaryStrength1(bS, mvP0, mvQ0);
			  end
			end
            else if (refPocP0[1] = refPocQ0[0] and
              refPocP0[0] = refPocQ0[1]) then
                boundaryStrength2(bS, mvP0, mvQ0);
            end end
          else if (not (isBiPredTab[p0[0]][p0[1]]) and not (isBiPredTab[q0[0]][q0[1]])) then // 1 MV
            predModeQ0 := predModeTab[q0[0]][q0[1]] & 1;
		    predModeP0 := predModeTab[p0[0]][p0[1]] & 1;
            if (refPocQ0[predModeQ0] = refPocP0[predModeP0]) then
              boundaryStrength3(bS, predModeP0, predModeQ0, mvP0, mvQ0);
			end
		  end
		end
		end
	end

	initialize ==>
	do
		bsTable := [[0: for int i in 0 .. 127]: for int j in 0 .. 1];
	end

	isNewSliceOrPict.isNotDep: action LcuSizeMax:[log2LcuSz], PartMode:[partMode],
		SliceAddr:[slcAddr] repeat 2, LFAcrossSlcTile:[lfAcrossSlcTile],
		TilesCoord:[valNumTiles] ==>
	guard
		partMode = PART_MODE_SLICE_INDEP || partMode = PART_MODE_PICT
	do
		lcuSizeMax := (1 << log2LcuSz);
		numTiles := valNumTiles;
		iLoop := 0;
		sliceAdr:= [slcAddr[0], slcAddr[1]];
		loopFilterAcrossSlc  := (lfAcrossSlcTile & 1) != 0;
		loopFilterAcrossTile := (lfAcrossSlcTile & 2) != 0;
	end

	isNewSliceOrPict.isDep: action PartMode:[partMode], SliceAddr:[slcAddr] repeat 2 ==>
	guard
		partMode = PART_MODE_SLICE_DEP
	do
		sliceAdr:= [slcAddr[0], slcAddr[1]];
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBeg[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEnd[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	/* Check when there are two parts in the CU.  */
	getPartMode.isNonQuadTree: action PartMode:[partMode] ==>
	guard
		partMode != PART_MODE_SLICE_DEP && partMode != PART_MODE_SLICE_INDEP &&
		partMode != PART_MODE_PICT,
		partMode != PART_2Nx2N && partMode != PART_NxN
	do
		currIdx := 0;
		currIdxHor := 0;
		currIdxVer := 0;
		numMvInfo := 2;
	end

	/* Check if all parts of the CU are a square. */
	getPartMode.isQuadTree: action PartMode:[partMode] ==>
	guard
		partMode = PART_2Nx2N || partMode = PART_NxN
	do
		numPart := partModeToNumPart[partMode];
		numPartDecoded := 0;
	end

	getRefPictInfo.launch.isNotBiPred: action IsBiPredOrLx:[isBiPredOrLx],
		RefPoc:[refPocVal], Mv:[mvVal] repeat 2 ==>
	guard
		isBiPredOrLx != BI_PRED and currIdx < numMvInfo
	do
		isBiPred[currIdx] := (isBiPredOrLx=BI_PRED);
		refPoc[currIdx][0] := refPocVal;
		mv[currIdx][0] := [mvVal[i]:for uint i in 0 .. 1];
		currIdx := currIdx + 1;
	end

	getRefPictInfo.launch.isBiPred: action IsBiPredOrLx:[isBiPredOrLx],
		RefPoc:[refPocVal] repeat 2, Mv:[mvVal] repeat 4 ==>
	guard
		isBiPredOrLx = BI_PRED and currIdx < numMvInfo
	do
		isBiPred[currIdx] := (isBiPredOrLx=BI_PRED);
		refPoc[currIdx] := [refPocVal[i]:for uint i in 0 .. 1];
		mv[currIdx] := [[mvVal[i+2*j]:for uint i in 0 .. 1]: for uint j in 0 .. 1];
		currIdx := currIdx + 1;
	end

	getRefPictInfo.done: action ==>
	guard
		currIdx = numMvInfo
	do
		if(numMvInfo=1 or numMvInfo=0) then
			foreach int i in 0 .. 1
			do
				foreach int j in 0 .. 1
				do
					mv[0][i][j] := mv[0][i][j] - (cuAddr[j] << 2);
					mv[1][i][j] := mv[1][i][j] - (cuAddrNQT[j] << 2);
				end
			end
		end
	end

	/* Get the information concerning the CU to be able to save the values in
	 * currPict.
	 */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart
	do
		cuMode := cuInfo[0];
		nS := cuInfo[3];
		if((cuInfo[1]&~(lcuSizeMax - 1)) != (cuAddr[0]&~(lcuSizeMax - 1)) ||
		   (cuInfo[2]&~(lcuSizeMax - 1)) != (cuAddr[1]&~(lcuSizeMax - 1))) then
			findCurrTile(cuInfo[1], cuInfo[2]);
			rstEdgeTables([cuInfo[1], cuInfo[2]]);
		end
		cuAddr := [cuInfo[1], cuInfo[2]];
		coordMax1stPu[0] := (cuAddr[0] & (lcuSizeMax - 1)) + cuInfo[3] >>2;
		coordMax1stPu[1] := (cuAddr[1] & (lcuSizeMax - 1)) + cuInfo[4] >>2;
		numPartDecoded := numPartDecoded + 1;
	end

	/* When there are two parts, we get both part in once in order to perform a
	 * raster scan on the square (the SelectCU actor reorder the differents
	 * blocks)
	 */
	getCuInfo.nonQT: action CUInfo:[cuInfo] repeat 10 ==>
	var
		uint(size=8) puSize[2]
	do
		cuMode := cuInfo[0];
		if((cuInfo[1]&~(lcuSizeMax - 1)) != (cuAddr[0]&~(lcuSizeMax - 1)) ||
		   (cuInfo[2]&~(lcuSizeMax - 1)) != (cuAddr[1]&~(lcuSizeMax - 1))) then
			findCurrTile(cuInfo[1], cuInfo[2]);
			rstEdgeTables([cuInfo[1], cuInfo[2]]);
		end
		cuAddr := [cuInfo[1], cuInfo[2]];
		cuAddrNQT := [cuInfo[6], cuInfo[7]];
		foreach int i in 0 .. 1
		do
			foreach int j in 0 .. 1
			do
				mv[0][i][j] := mv[0][i][j] - (cuAddr[j] << 2);
				mv[1][i][j] := mv[1][i][j] - (cuAddrNQT[j] << 2);
			end
		end
		nS := max(cuInfo[3], cuInfo[4]);

		puSize := [cuInfo[3], cuInfo[4]];
		savePredPuEdge(cuAddr, puSize, cuInfo[2] != cuInfo[7]);

		puSize := [cuInfo[8], cuInfo[9]];
		processPUBoundary(cuAddrNQT, puSize, cuInfo[2] != cuInfo[7]);

		numPart := 2;
		numPartDecoded := 2;
		trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;

		coordMax1stPu[0] := (cuAddr[0] & (lcuSizeMax - 1)) + cuInfo[3] >>2;
		xAddr2ndPu        := cuAddr[0] + cuInfo[3] >> 2;
		yAddr2ndPu        := cuAddr[1] + cuInfo[4] >> 2;
		coordMax1stPu[1] := (cuAddr[1] & (lcuSizeMax - 1)) + cuInfo[4] >>2;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	var
		int idxMax = nS * nS / 32
	do
		foreach int i in 0 .. idxMax - 1
		do
			bsTable[0][i] := 0;
			bsTable[1][i] := 0;
		end
	end

	getCuMode.isNotOther: action ==>
	guard
		cuMode = INTER || cuMode = SKIP || cuMode = INTRA
	do
		trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
		currIdx := 0;
		currIdxHor := 0;
		currIdxVer := 0;
		numMvInfo :=
			if(cuMode=INTRA) then
				0
			else
				1
			end;
	end

	/* When it's neither an intra nor inter prediction CU, do neither
	 * prediction nor saving pixels' value
	 */
	getCuMode.isOther: action ==>
	guard
		cuMode = OTHER
	end

	getSplitTrafo.launch.isTrue: action SplitTransf:[splitTrafo] ==>
	guard
		trafoTreeDepth>-1 && splitTrafo
	do
		trafoTreeDepth := trafoTreeDepth + 1;
		trafoTreeIdx[trafoTreeDepth] := 0;
	end

	getSplitTrafo.launch.isFalse: action SplitTransf:[splitTrafo], Cbf:[cbf] ==>
	guard
		trafoTreeDepth>-1 && not splitTrafo
	var
		uint(size=8)  partIdx,
		uint(size=7)  treeNS,
		uint(size=16) treeAddr[2],
		uint(size=16) xMin,
		uint(size=16) xMax,
		uint(size=16) yMin,
		uint(size=16) yMax
	do

		/* Computing the size and the address of the current block. */
		treeNS := nS;
		treeAddr := [cuAddr[i]: for int i in 0 .. 1];
		foreach uint idx in 1 .. trafoTreeDepth
		do
			treeNS := treeNS >> 1;
			if((trafoTreeIdx[idx]&1) != 0) then
				treeAddr[0] := treeAddr[0] + treeNS;
			end
			if((trafoTreeIdx[idx]&2) != 0) then
				treeAddr[1] := treeAddr[1] + treeNS;
			end
		end
		treeAddrInBlk := [treeAddr[i] >> 2: for int i in 0 .. 1];
		savePredInfoTu(treeAddrInBlk, treeNS >> 2);

		xMin := (treeAddr[0] & (lcuSizeMax - 1))>>2;
		xMax := xMin+(treeNS>>2);
		yMin := (treeAddr[1] & (lcuSizeMax - 1))>>2;
		yMax := yMin + (treeNS>>2);
		processTUBoundaries(cbf, treeAddr, treeNS);

		/* Saving cbfNeighb, mvNeighb and refPocNeighb */
		foreach int x in treeAddrInBlk[0] .. treeAddrInBlk[0] + (treeNS>>2) - 1
		do
			cbfUpNeighb[x] := cbf;
			partIdx := castBoolToInt(
				not(numMvInfo = 1 || x < xAddr2ndPu && (yMax - 1) < coordMax1stPu[1])
			);
			foreach int i in 0 .. 1
			do
				mvUpNeighb[x][i][0] := mv[partIdx][i][0];
				mvUpNeighb[x][i][1] := mv[partIdx][i][1];
				refPocUpNeighb[x][i] := refPoc[partIdx][i];
			end
		end

		foreach int y in yMin .. yMax - 1
		do
			cbfLeftNeighb[treeAddrInBlk[1] + y - yMin] := cbf;
			partIdx := castBoolToInt(
				not(numMvInfo = 1 || (xMax-1) < coordMax1stPu[0] && y < coordMax1stPu[1])
			);
			foreach int i in 0 .. 1
			do
				mvLeftNeighb[treeAddrInBlk[1] + y - yMin][i][0] := mv[partIdx][i][0];
				mvLeftNeighb[treeAddrInBlk[1] + y - yMin][i][1] := mv[partIdx][i][1];
				refPocLeftNeighb[treeAddrInBlk[1] + y - yMin][i] := refPoc[partIdx][i];
			end
		end

		nbBlkToSend := treeNS * treeNS / 16;

		trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
		/* Replace by (trafoTreeDepth > -1 && trafoTreeIdx[trafoTreeDepth] = 4) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		while (if trafoTreeDepth > -1 then trafoTreeIdx[trafoTreeDepth] = 4 else false end)
		do
			trafoTreeDepth := trafoTreeDepth - 1;
			if(trafoTreeDepth>-1) then
				trafoTreeIdx[trafoTreeDepth] :=
					trafoTreeIdx[trafoTreeDepth] + 1;
			end
		end
	end

	getSplitTrafo.done: action ==>
	guard
		trafoTreeDepth = -1
	do
		currIdx := absCoordToZScan(cuAddr);
		currIdxHor := absCoordToZScan2(cuAddr);
		currIdxVer := absCoordToZScan3(cuAddr);
	end

	sendBS.launch.is4x4.isbSHorVer: action ==> BSHor:[bsHor], BSVer:[bsVer]
	guard
		nbBlkToSend = 1 and (treeAddrInBlk[0] & 0x01) != 1 and (treeAddrInBlk[1] & 0x01) != 1
	var
		uint(size=2)  bsHor,
		uint(size=2)  bsVer
	do
		bsHor := bsTable[1][currIdxHor];
		bsVer := bsTable[0][currIdxVer];
		bsTable[0][currIdxVer] := 0;
		bsTable[1][currIdxHor] := 0;
		currIdxHor := currIdxHor + 1;
		currIdxVer := currIdxVer + 1;
	end
	
	sendBS.launch.is4x4.isbSHor: action ==> BSHor:[bsHor] 
	guard
		nbBlkToSend = 1 and (treeAddrInBlk[1] & 0x01) != 1
	var
		uint(size=2)  bsHor
	do
		bsHor := bsTable[1][currIdxHor];
		bsTable[1][currIdxHor] := 0;
		currIdxHor := currIdxHor + 1;
	end
	
	sendBS.launch.is4x4.isbSVer: action ==> BSVer:[bsVer] 
	guard
		nbBlkToSend = 1 and (treeAddrInBlk[0] & 0x01) != 1
	var
		uint(size=2)  bsVer
	do
		bsVer := bsTable[0][currIdxVer];
		bsTable[0][currIdxVer] := 0;
		currIdxVer := currIdxVer + 1;
	end
	
	sendBS.launch.is4x4: action ==>  
	guard
		nbBlkToSend = 1
	do
	end

	sendBS.launch.is8x8: action ==> BSHor:[bsHor] repeat 2, BSVer:[bsVer] repeat 2 
	guard
		nbBlkToSend = 4
	var
		uint(size=2)  bsHor[2],
		uint(size=2)  bsVer[2]
	do
		foreach uint i in 0 .. 1
		do
			bsVer[i] := bsTable[0][currIdxVer+i];
			bsHor[i] := bsTable[1][currIdxHor+i];
		end
		currIdxHor := currIdxHor + 2;
		currIdxVer := currIdxVer + 2;
	end

	sendBS.launch.is16x16: action ==> BSHor:[bsHor] repeat 8, BSVer:[bsVer] repeat 8
	guard
		nbBlkToSend = 16
	var
		uint(size=2)  bsHor[8],
		uint(size=2)  bsVer[8]
	do
		foreach uint i in 0 .. 7
		do
			bsVer[i] := bsTable[0][currIdxVer+i];
			bsHor[i] := bsTable[1][currIdxHor+i];
		end
		currIdxHor := currIdxHor + 8;
		currIdxVer := currIdxVer + 8;
	end

	sendBS.launch.is32x32: action ==> BSHor:[bsHor] repeat 32, BSVer:[bsVer] repeat 32
	guard
		nbBlkToSend = 64
	var
		uint(size=2)  bsHor[32],
		uint(size=2)  bsVer[32]
	do
		foreach uint i in 0 .. 31
		do
			bsVer[i] := bsTable[0][currIdxVer+i];
			bsHor[i] := bsTable[1][currIdxHor+i];
		end
		currIdxHor := currIdxHor + 32;
		currIdxVer := currIdxVer + 32;
	end

	sendBS.launch.is64x64: action ==> BSHor:[bsHor] repeat 128, BSVer:[bsVer] repeat 128
	guard
		nbBlkToSend = 256
	var
		uint(size=2)  bsHor[128],
		uint(size=2)  bsVer[128]
	do
		foreach uint i in 0 .. 127
		do
			bsVer[i] := bsTable[0][currIdxVer+i];
			bsHor[i] := bsTable[1][currIdxHor+i];
		end
		currIdxHor := currIdxHor + 128;
		currIdxVer := currIdxVer + 128;
	end

	schedule fsm GetPartMode:
		GetPartMode(isNewSliceOrPict.isDep    )--> GetPartMode;
		GetPartMode(isNewSliceOrPict.isNotDep )--> GetTilesCoord;
		GetPartMode(getPartMode.isQuadTree    )--> GetCuInfo;
		GetPartMode(getPartMode.isNonQuadTree )--> GetRefPictInfo1;

		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetPartMode;

		GetRefPictInfo1 (getRefPictInfo.launch )--> GetRefPictInfo1;
		GetRefPictInfo1 (getRefPictInfo.done   )--> GetCuInfoNonQT;
		GetCuInfoNonQT  (getCuInfo.nonQT       )--> GetSplitTrafo;

		GetCuInfo (getCuInfo.launch )--> GetCuMode;
		GetCuInfo (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isNotOther )--> GetRefPictInfo;
		GetCuMode (getCuMode.isOther    )--> GetCuInfo;

		GetRefPictInfo (getRefPictInfo.launch )--> GetRefPictInfo;
		GetRefPictInfo (getRefPictInfo.done   )--> GetSplitTrafo;

		GetSplitTrafo (getSplitTrafo.launch.isTrue )--> GetSplitTrafo;
		GetSplitTrafo (getSplitTrafo.launch.isFalse )--> SendBS;
		GetSplitTrafo (getSplitTrafo.done   )--> GetCuInfo;

		SendBS (sendBS.launch )--> GetSplitTrafo;
	end
	priority
		sendBS.launch.is64x64 > sendBS.launch.is32x32 > sendBS.launch.is16x16 > sendBS.launch.is8x8 > sendBS.launch.is4x4;
	end
end