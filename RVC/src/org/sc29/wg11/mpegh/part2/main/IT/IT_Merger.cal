/********************************************************************************

This software module was originally developed by 
Eduardo Juarez, Wei Jianguo and Ren Rong, 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

UPM grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that UPM
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, UPM
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

UPM retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

package org.sc29.wg11.mpegh.part2.main.IT;  

actor IT_Merger()  int(size=8)   Size,                                          
                   int(size=16)  Block_skip, 
                   int(size=16)  Block_4x4_DST, 
                   int(size=16)  Block_4x4_IT, 
                   int(size=16)  Block_8x8, 
                   int(size=16)  Block_16x16, 
                   int(size=16)  Block_32x32 
                   ==>                                    
                   int(size=16)  Block  
                   :
 			
	
	merge_4x4.trans_skip: action Size:[ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_skip: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip = 0 and transformSkipFlag = 1
	end

	merge_4x4.DST: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_4x4_DST: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip = 0  and isDST = 1 and transformSkipFlag = 0
	end

	merge_4x4.IT: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_4x4_IT: [ res ] repeat 4*4
	                  ==>
	                  Block: [ res ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip = 0  and isDST = 0 and transformSkipFlag = 0
	end
	
	merge_4x4.skip: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ] 
	                  ==>
	                  Block: [ [0: for int i in 1 .. 4*4] ] repeat 4*4
	guard
      sizeOfTU = 4 and RCskip != 0
	end

	merge_8x8.trans_skip: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_skip: [ res ] repeat 8*8 
	                  ==>
	                  Block: [ res ] repeat 8*8
	guard
      sizeOfTU = 8 and RCskip = 0  and transformSkipFlag = 1
	end

	merge_8x8.default: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                  Block_8x8: [ res ] repeat 8*8 
	                  ==>
	                  Block: [ res ] repeat 8*8
	guard
      sizeOfTU = 8 and RCskip = 0 and transformSkipFlag = 0 
	end

	merge_8x8.skip: action Size:      [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                  ==>
	                  Block: [ [0: for int i in 1 .. 8*8] ] repeat 8*8
	guard
      sizeOfTU = 8 and RCskip != 0
	end
	
	merge_16x16.trans_skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_skip: [ res ] repeat 16*16 
	                    ==>
	                    Block: [ res ] repeat 16*16
	guard
      sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 1
	end	

	merge_16x16.default: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_16x16: [ res ] repeat 16*16 
	                    ==>
	                    Block: [ res ] repeat 16*16
	guard
      sizeOfTU = 16 and RCskip = 0 and transformSkipFlag = 0 
	end	
	

	merge_16x16.skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                    ==>
	                    Block: [ [0: for int i in 1 .. 16*16] ] repeat 16*16
	guard
      sizeOfTU = 16 and RCskip != 0
	end	

	merge_32x32.trans_skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_skip: [ res ] repeat 32*32 
	                    ==>
	                    Block: [ res ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 1
	end	

	merge_32x32.default: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ], 
	                    Block_32x32: [ res ] repeat 32*32 
	                    ==>
	                    Block: [ res ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip = 0 and transformSkipFlag = 0 
	end	

	merge_32x32.skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                    ==>
	                    Block: [ [0: for int i in 1 .. 32*32] ] repeat 32*32
	guard
	  sizeOfTU = 32 and RCskip != 0
	end	

	merge_64x64.skip: action Size:        [ sizeOfTU, RCskip, isDST, transformSkipFlag, slice_qp, rc_cIdx, qp_offset ]
	                    ==>
	                    Block: [ [0: for int i in 1 .. 64*64] ] repeat 64*64
	guard
	  sizeOfTU = 64 and RCskip != 0
	end	
	
end
