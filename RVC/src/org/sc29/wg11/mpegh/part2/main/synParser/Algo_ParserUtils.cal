/******************************************************************************
 * Definition of CommonPackage
 *****************************************************************************/
package org.sc29.wg11.mpegh.part2.main.synParser;

import  org.sc29.wg11.mpegh.part2.common.BitstreamReadUtils.*;
import  org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import  org.sc29.wg11.mpegh.part2.common.CabacContextConstantHEVC.*;
import  org.sc29.wg11.mpegh.part2.common.CabacContextFunctionHEVC.*;
import  org.sc29.wg11.mpegh.part2.common.CabacParserFunctionHEVC.*;


unit Algo_ParserUtils :
	/**************************************************************************
	 * GLOBAL CONSTANT
 	 *************************************************************************/
 	 uint(size= 8) EPR_VALUE                    = 0x03;
 	 uint(size= 8) START_CODE_VALUE             = 0x01;
 	 uint(size= 9) START_CODE_FLAG              = 0x100;
	/**************************************************************************
	 * GLOBAL NAL UNIT TYPE
 	 *************************************************************************/
     uint(size= 6) NAL_TRAIL_N                  =  0;
     uint(size= 6) NAL_TRAIL_R                  =  1;
     uint(size= 6) NAL_TSA_N                    =  2;
     uint(size= 6) NAL_TSA_R                    =  3;
     uint(size= 6) NAL_STSA_N                   =  4;
     uint(size= 6) NAL_STSA_R                   =  5;

     uint(size= 6) NAL_RADL_N                   =  6;
     uint(size= 6) NAL_RADL_R                   =  7;
     uint(size= 6) NAL_RASL_N                   =  8;
     uint(size= 6) NAL_RASL_R                   =  9;

     uint(size= 6) NAL_BLA_W_LP                 = 16;
     uint(size= 6) NAL_BLA_W_RADL               = 17;
     uint(size= 6) NAL_BLA_N_LP                 = 18;
     uint(size= 6) NAL_IDR_W_RADL               = 19;
     uint(size= 6) NAL_IDR_N_LP                 = 20;
     uint(size= 6) NAL_CRA_NUT                  = 21;
     uint(size= 6) NAL_RSV_IRAP_VCL23           = 23;


     uint(size= 6) NAL_VPS                      = 32;
     uint(size= 6) NAL_SPS                      = 33;
     uint(size= 6) NAL_PPS                      = 34;
     uint(size= 6) NAL_AUD                      = 35;
     uint(size= 6) NAL_EOS_NUT                  = 36;
     uint(size= 6) NAL_EOB_NUT                  = 37;
     uint(size= 6) NAL_FILLER_DATA              = 38;
     uint(size= 6) NAL_SEI_PREFIX               = 39;
     uint(size= 6) NAL_SEI_SUFFIX               = 40;


 	 uint(size= 6) NAL_VCL_MIN                  =  0;
     uint(size= 6) NAL_VCL_MAX                  = 31;
     uint(size= 6) NAL_NON_VCL_MIN              = 32;
     uint(size= 6) NAL_NON_VCL_MAX              = 64;

 	 uint(size= 6) NAL_TRAILING_MIN             =  0;
 	 uint(size= 6) NAL_TRAILING_MAX             =  5;
 	 uint(size= 6) NAL_LEADING_MIN              =  6;
 	 uint(size= 6) NAL_LEADING_MAX              =  9;
 	 uint(size= 6) NAL_IRAP_MIN                 = 16;
 	 uint(size= 6) NAL_IRAP_MAX                 = 23;

	String NAL_UNIT_TYPE_STR[64] = [
		"NAL_TRAIL_N",
		"NAL_TRAIL_R",
		"NAL_TSA_N",
		"NAL_TSA_R",
		"NAL_STSA_N",
		"NAL_STSA_R",
		"NAL_RADL_N",
		"NAL_RADL_R",
		"NAL_RASL_N",
		"NAL_RASL_R",
		"nal_unit_type == 10 : Unspecified or reserved",
		"nal_unit_type == 11 : Unspecified or reserved",
		"nal_unit_type == 12 : Unspecified or reserved",
		"nal_unit_type == 13 : Unspecified or reserved",
		"nal_unit_type == 14 : Unspecified or reserved",
		"nal_unit_type == 15 : Unspecified or reserved",
		"NAL_BLA_W_LP",
		"NAL_BLA_W_RADL",
		"NAL_BLA_N_LP",
		"NAL_IDR_W_RADL",
		"NAL_IDR_N_LP",
		"NAL_CRA_NUT",
		"nal_unit_type == 22 : Unspecified or reserved",
		"nal_unit_type == 23 : Unspecified or reserved",
		"nal_unit_type == 24 : Unspecified or reserved",
		"nal_unit_type == 25 : Unspecified or reserved",
		"nal_unit_type == 26 : Unspecified or reserved",
		"nal_unit_type == 27 : Unspecified or reserved",
		"nal_unit_type == 28 : Unspecified or reserved",
		"nal_unit_type == 29 : Unspecified or reserved",
		"nal_unit_type == 30 : Unspecified or reserved",
		"nal_unit_type == 31 : Unspecified or reserved",
		"NAL_VPS",
		"NAL_SPS",
		"NAL_PPS",
		"NAL_AUD",
		"NAL_EOS_NUT",
		"NAL_EOB_NUT",
		"NAL_FILLER_DATA",
		"NAL_SEI_PREFIX",
		"NAL_SEI_SUFFIX",
		"nal_unit_type == 41 : Unspecified or reserved",
		"nal_unit_type == 42 : Unspecified or reserved",
		"nal_unit_type == 43 : Unspecified or reserved",
		"nal_unit_type == 44 : Unspecified or reserved",
		"nal_unit_type == 45 : Unspecified or reserved",
		"nal_unit_type == 46 : Unspecified or reserved",
		"nal_unit_type == 47 : Unspecified or reserved",
		"nal_unit_type == 48 : Unspecified or reserved",
		"nal_unit_type == 49 : Unspecified or reserved",
		"nal_unit_type == 50 : Unspecified or reserved",
		"nal_unit_type == 51 : Unspecified or reserved",
		"nal_unit_type == 52 : Unspecified or reserved",
		"nal_unit_type == 53 : Unspecified or reserved",
		"nal_unit_type == 54 : Unspecified or reserved",
		"nal_unit_type == 55 : Unspecified or reserved",
		"nal_unit_type == 56 : Unspecified or reserved",
		"nal_unit_type == 57 : Unspecified or reserved",
		"nal_unit_type == 58 : Unspecified or reserved",
		"nal_unit_type == 59 : Unspecified or reserved",
		"nal_unit_type == 60 : Unspecified or reserved",
		"nal_unit_type == 61 : Unspecified or reserved",
		"nal_unit_type == 62 : Unspecified or reserved",
		"nal_unit_type == 63 : Unspecified or reserved"
	];

	uint(size=8) NEW_CVS = 0x10;

	function isVclNal(uint(size=6) nal_unit_type) --> bool
	:
		nal_unit_type <= NAL_VCL_MAX
	end


	function isTrailing(uint(size=6) nal_unit_type) --> bool
	:
		nal_unit_type >= NAL_TRAILING_MIN && nal_unit_type <= NAL_TRAILING_MAX
	end

	function isLeading(uint(size=6) nal_unit_type) --> bool
	:
		nal_unit_type >= NAL_LEADING_MIN && nal_unit_type <= NAL_LEADING_MAX
	end

	function isIRAP(uint(size=6) nal_unit_type) --> bool
	:
		nal_unit_type >= NAL_IRAP_MIN && nal_unit_type <= NAL_IRAP_MAX
	end

	function isIDR(uint(size=6) nal_unit_type) --> bool
	:
		nal_unit_type = NAL_IDR_W_RADL or nal_unit_type = NAL_IDR_N_LP
	end

	procedure printNalUnitType(uint(size=6) nal_unit_type)
	begin
		print(NAL_UNIT_TYPE_STR[nal_unit_type & 63]);
	end
	/**************************************************************************
	 * GLOBAL SPS PPS
 	 *************************************************************************/
 	 uint(size= 6) NB_MAX_SPS					= 15;
 	 uint(size= 8) NB_MAX_PPS					= 15;
	 uint(size= 8) NB_MAX_PICS					= 64;
 	 uint(size= 6) MAX_TLAYER                   =  4; 
 	 uint(size= 6) MRG_MAX_NUM_CANDS            =  5;	 
	/**************************************************************************
	 * GLOBAL SLICE HEADER
 	 *************************************************************************/
  	 /// Weighted prediction struct
  	 uint(size= 1) WP_PRESENT_FLAG              =  0;
  	 uint(size=32) WP_LOG2_WEIGHT_DENOM         =  1;
  	 uint(size=32) WP_I_WEIGHT                  =  2;
  	 uint(size=32) WP_I_OFFSET                  =  3;
	 uint(size=32) WP_W                         =  4;
  	 uint(size=32) WP_O                         =  5;
  	 uint(size=32) WP_OFFSET                    =  6;
  	 uint(size=32) WP_SHIFT                     =  7;
  	 uint(size=32) WP_ROUND                     =  8;
  	 uint(size= 3) WP_MAX_STRUCT                =  9;

	/**************************************************************************
	 * GLOBAL pcRPS STRUCT
 	 *************************************************************************/
	uint(size= 8) NUM_NEGATIVE_PICS				=  0;
	uint(size= 8) NUM_POSITIVE_PICS				=  1;
	uint(size= 8) NUM_PICS						=  2;
	uint(size= 8) DELTAPOC						=  3;
	uint(size= 8) USED							= DELTAPOC + NB_MAX_PICS;
	uint(size= 8) PC_RPS_STRUCT_SIZE			= USED + NB_MAX_PICS;
	/**************************************************************************
	 * GLOABL Coding Tree
	 *************************************************************************/
	uint(size= 8) CT_idx						=  0;
	uint(size=16) CT_x0							=  1;
	uint(size=16) CT_y0							=  2;
	uint(size=16) CT_x1							=  3;
	uint(size=16) CT_y1							=  4;
	uint(size= 8) CT_log2CbSize					=  5;
	uint(size= 8) CT_ctDepth					=  6;
	uint(size= 8) CT_STRUCT_SIZE				=  7;
	/**************************************************************************
	 * GLOABL Transform Tree
	 *************************************************************************/
	uint(size= 8) TT_idx						=  0;
	uint(size=16) TT_x0 						=  1;
	uint(size=16) TT_y0 						=  2;
	uint(size=16) TT_x1 						=  3;
	uint(size=16) TT_y1 						=  4;
	uint(size=16) TT_xBase						=  5;
	uint(size=16) TT_yBase						=  6;
	uint(size= 8) TT_log2TrafoSize				=  7;
	uint(size= 8) TT_trafoDepth					=  8;
	uint(size= 8) TT_blkIdx						=  9;
	uint(size= 8) TT_STRUCT_SIZE				= 10;
	/**************************************************************************
	 *        Transform Unit
	 *************************************************************************/
	uint(size= 3) ScanType[4][36] = [
	   // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17
	   //18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35
		[ 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0,
		  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
		[ 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0,
		  0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	];
	/**************************************************************************
	 * sortDeltaPOC
 	 *************************************************************************/
	procedure sortDeltaPOC(
		uint(size=32) sps_id,
		uint(size=32) idx,
		 int(size= 8) pcRPS[NB_MAX_SPS][NB_MAX_PICS+1][PC_RPS_STRUCT_SIZE]
	)
	var
		 int(size=32) deltaPOC_v,
		 int(size= 1) used_v,
		uint(size=32) k,
		 int(size=32) tmp
	begin
		// sort in increasing order (smallest first)
		if pcRPS[sps_id][idx][NUM_PICS] != 0 then
    		foreach uint(size=8) i in 1 ..  pcRPS[sps_id][idx][NUM_PICS]-1 do
	   			deltaPOC_v := pcRPS[sps_id][idx][DELTAPOC+i];
   				used_v     := pcRPS[sps_id][idx][USED+i];
   				foreach uint(size=8) j in 0 ..  i-1 do
	   				k := i-1-j;
   					tmp := pcRPS[sps_id][idx][DELTAPOC+k];
   					if deltaPOC_v < tmp then
	   					pcRPS[sps_id][idx][DELTAPOC+k+1] := tmp;
   						pcRPS[sps_id][idx][USED+k+1]     := pcRPS[sps_id][idx][USED+k]; 
   						pcRPS[sps_id][idx][DELTAPOC+k]   := deltaPOC_v;
	   					pcRPS[sps_id][idx][USED+k]       := used_v;
   					end
   				end
	   		end
	   	end
	   	if (pcRPS[sps_id][idx][NUM_NEGATIVE_PICS]>>1) != 0 then
   			k := pcRPS[sps_id][idx][NUM_NEGATIVE_PICS] - 1;
			// flip the negative values to largest first
    		foreach uint(size=8) i in 0 ..  (pcRPS[sps_id][idx][NUM_NEGATIVE_PICS]>>1)-1 do
	    		deltaPOC_v       := pcRPS[sps_id][idx][DELTAPOC+i];
   				used_v           := pcRPS[sps_id][idx][USED+i];
   				pcRPS[sps_id][idx][DELTAPOC+i] := pcRPS[sps_id][idx][DELTAPOC+k];
   				pcRPS[sps_id][idx][USED+i]     := pcRPS[sps_id][idx][USED+k]; 
   				pcRPS[sps_id][idx][DELTAPOC+k] := deltaPOC_v;
   				pcRPS[sps_id][idx][USED+k]     := used_v;
   				k := k - 1;
   			end
   		end
	end
	/**************************************************************************
	 * printDeltaPOC
 	 *************************************************************************/
	procedure printDeltaPOC(
		uint(size=32) sps_id,
		uint(size=32) idx,
		 int(size= 8) pcRPS[NB_MAX_SPS][NB_MAX_PICS+1][PC_RPS_STRUCT_SIZE]
	)
	begin
		if pcRPS[sps_id][idx][NUM_PICS] != 0 then
  			print("DeltaPOC = { ");
  			foreach uint(size=8) i in 0 ..  pcRPS[sps_id][idx][NUM_PICS]-1 do
	    		print(pcRPS[sps_id][idx][DELTAPOC+i]);
    			if pcRPS[sps_id][idx][USED+i] = 1 then
	    			print("* ");
    			else
	    			print(" ");
    			end
 			end		
 		end
  		if pcRPS[sps_id][idx][NUM_PICS] != 0 then
  			println("}");
  		end
	end
	/**************************************************************************
	 * InitScanningArray
 	 *************************************************************************/
	procedure InitScanningArray(
		uint(size= 8) ScanOrder[4][3][(BLW_WIDTH_MAX/4)*(BLW_HEIGHT_MAX/4)][2]
	)
	var
		uint(size= 8) blkSize,
		uint(size= 8) i,
		uint(size= 8) x,
		 int(size= 8) y,
		bool		  stopLoop
	begin	
		foreach int iTrafosize in 0 .. 3 do
			blkSize   := 1 << iTrafosize;
			i		  := 0;
			x		  := 0;
		 	y		  := 0;
			stopLoop  := false;
			/*********************** Init ***********************/
			foreach int n in 0 .. blkSize-1 do
				ScanOrder[iTrafosize][ 0 ][ n ][ 0 ] := 0;
				ScanOrder[iTrafosize][ 0 ][ n ][ 1 ] := 0;
				ScanOrder[iTrafosize][ 1 ][ n ][ 0 ] := 0;
				ScanOrder[iTrafosize][ 1 ][ n ][ 1 ] := 0;
				ScanOrder[iTrafosize][ 2 ][ n ][ 0 ] := 0;
				ScanOrder[iTrafosize][ 2 ][ n ][ 1 ] := 0;
			end
			/*********************** DiagScan ***********************/
			while not stopLoop do
				while y >= 0 do
					if x < blkSize and y < blkSize then
						ScanOrder[iTrafosize][ 0 ][ i ][ 0 ] := x;
						ScanOrder[iTrafosize][ 0 ][ i ][ 1 ] := y;
						i := i + 1;
					end
					y := y - 1;
					x := x + 1;
				end
				y := x;
				x := 0;
				if i >= blkSize * blkSize then
					stopLoop := true;
				end
			end
			/*********************** horScan ***********************/
			i := 0;
			y := 0;
			while y < blkSize do
				x := 0;
				while x < blkSize do
					ScanOrder[iTrafosize][ 1 ][ i ][ 0 ] := x;
					ScanOrder[iTrafosize][ 1 ][ i ][ 1 ] := y;
					x := x + 1;
					i := i + 1;
				end
				y := y + 1;
			end
			/*********************** verScan ***********************/
			i := 0;
			x := 0;
			while x < blkSize do
				y := 0;
				while y < blkSize do
					ScanOrder[iTrafosize][ 2 ][ i ][ 0 ] := x;
					ScanOrder[iTrafosize][ 2 ][ i ][ 1 ] := y;
					y := y + 1;
					i := i + 1;
				end
				x := x + 1;
			end
		
// 			println("==== ScabOrder "+blkSize);
//			println("diag_scan"+blkSize+"x"+blkSize+"_x");
//			foreach int j in 0 .. blkSize-1 do
//				foreach int k in 0 .. blkSize-1 do
//					print(ScanOrder[iTrafosize][0][j*blkSize+k][0]+", ");
//				end
//				println();
//			end
//			println("diag_scan"+blkSize+"x"+blkSize+"_y");
//			foreach int j in 0 .. blkSize-1 do
//				foreach int k in 0 .. blkSize-1 do
//					print(ScanOrder[iTrafosize][0][j*blkSize+k][1]+", ");
//				end
//				println();
//			end
//			println("horiz_scan"+blkSize+"x"+blkSize+"_x");
//			foreach int j in 0 .. blkSize-1 do
//				foreach int k in 0 .. blkSize-1 do
//					print(ScanOrder[iTrafosize][1][j*blkSize+k][0]+", ");
//				end
//				println();
//			end
//			println("horiz_scan"+blkSize+"x"+blkSize+"_y");
//			foreach int j in 0 .. blkSize-1 do
//				foreach int k in 0 .. blkSize-1 do
//					print(ScanOrder[iTrafosize][1][j*blkSize+k][1]+", ");
//				end
//				println();
//			end
//			println("vert_scan"+blkSize+"x"+blkSize+"_x");
//			foreach int j in 0 .. blkSize-1 do
//				foreach int k in 0 .. blkSize-1 do
//					print(ScanOrder[iTrafosize][2][j*blkSize+k][0]+", ");
//				end
//				println();
//			end
//			println("vert_scan"+blkSize+"x"+blkSize+"_y");
//			foreach int j in 0 .. blkSize-1 do
//				foreach int k in 0 .. blkSize-1 do
//					print(ScanOrder[iTrafosize][2][j*blkSize+k][1]+", ");
//				end
//				println();
//			end


		end
	end
	
	/**************************************************************************
	 * luma_intra_pred_mode
 	 *************************************************************************/
	procedure luma_intra_pred_mode(
		uint(size=16) x0,
		uint(size=16) y0,
		uint(size= 8) pu_size,
        uint(size= 1) prev_intra_luma_pred_flag,
        uint(size= 32) mpm_idx_or_rem_intra_luma_pred_mode,
        uint(size= 32) ret[1],
        
        uint(size= 8) log2_min_pu_size,
        uint(size= 8) log2_ctb_size,
        uint(size= 8) intraPredMode[CTB_ADDR_TS_MAX][2],
        bool upFlag,
        bool leftFlag)
	var
		int(size=16) x0b = x0 & ((1 << log2_ctb_size) - 1),
    	int(size=16) y0b = y0 & ((1 << log2_ctb_size) - 1),
    	uint(size= 8) candidate[4] := [0,0,0,0],
    	uint(size=16) x_pu = x0 >> log2_min_pu_size,
    	uint(size=16) y_pu = y0 >> log2_min_pu_size,
    	uint(size= 8) size_in_pus = pu_size >> log2_min_pu_size,
		uint(size= 8) cand_up  := if (upFlag or (y0b > 0)) then intraPredMode[x_pu][0] else INTRA_DC end,
    	uint(size= 8) cand_left = if (leftFlag or (x0b > 0)) then intraPredMode[y_pu][1] else INTRA_DC end,
		uint(size=16) y_ctb = (y0 >> log2_ctb_size) << log2_ctb_size
	begin
		//println("luma_intra_pred_mode("+x_pu+", "+y_pu+", "+pu_size+", "+prev_intra_luma_pred_flag+", "+log2_min_pu_size+", "+log2_ctb_size+", "+cand_up+", "+cand_left+")");
	    // intra_pred_mode prediction does not cross vertical CTB boundaries
//	    println("tab_left = "+ intraPredMode[y_pu][1]);
//	    println("ctb_left_Flag = " + leftFlag);
//	    println("ctb_up_Flag = " + upFlag);
//	    println("x0b = " + x0b);
//	    println("y0b = " + y0b);
//	    println("x_pu = " + x_pu);
//	    println("y_pu = " + y_pu);
//	    println("size_in_pus = " + size_in_pus);
//	    println("cand_up = " + cand_up);
//	    println("cand_left = " + cand_left);
//	    println("x0 = " + x0);
//	    println("y0 = " + y0);
//	    println("y_ctb = " + y_ctb);
	    
	    
	    if (y0 - 1) < y_ctb then
        	cand_up := INTRA_DC;
        end
    	if cand_left = cand_up then
	        if cand_left < 2 then
            	candidate[0] := INTRA_PLANAR;
            	candidate[1] := INTRA_DC;
            	candidate[2] := INTRA_ANGULAR_26;
        	else
	            candidate[0] := cand_left;
            	candidate[1] := 2 + ((cand_left - 2 - 1 + 32) & 31);
            	candidate[2] := 2 + ((cand_left - 2 + 1) & 31);
        	end
    	else
        	candidate[0] := cand_left;
        	candidate[1] := cand_up;
        	if candidate[0] != INTRA_PLANAR and candidate[1] != INTRA_PLANAR then
	            candidate[2] := INTRA_PLANAR;
        	elsif candidate[0] != INTRA_DC and candidate[1] != INTRA_DC then
	            candidate[2] := INTRA_DC;
        	else 
	            candidate[2] := INTRA_ANGULAR_26;
        	end
    	end
//		println("candidate[0] = " + candidate[0]);
//	    println("candidate[1] = " + candidate[1]);
//	    println("candidate[2] = " + candidate[2]);
    	if prev_intra_luma_pred_flag = 1 then
			ret[0] := candidate[mpm_idx_or_rem_intra_luma_pred_mode];
//			println("mpm_idx = " + mpm_idx_or_rem_intra_luma_pred_mode);
//			println("candidate[mpm_idx] = " + candidate[mpm_idx_or_rem_intra_luma_pred_mode]);
    	else
        	if candidate[0] > candidate[1] then
        		candidate[3] := candidate[0];
	            candidate[0] := candidate[1];
	            candidate[1] := candidate[3];
	        end
        	if candidate[0] > candidate[2] then
        		candidate[3] := candidate[0];
	            candidate[0] := candidate[2];
	            candidate[2] := candidate[3];
	        end
        	if candidate[1] > candidate[2] then
        		candidate[3] := candidate[1];
	            candidate[1] := candidate[2];
	            candidate[2] := candidate[3];
			end
	        ret[0] := mpm_idx_or_rem_intra_luma_pred_mode;
        	foreach int i in 0 .. 2 do
        	    if ret[0] >= candidate[i] then
            	    ret[0] := ret[0] + 1;
        		end
        	end
    	end
		foreach int i in 0 .. size_in_pus-1 do
			intraPredMode[x_pu + i][0] := ret[0];
			intraPredMode[y_pu + i][1] := ret[0];
		end
	end
	/**************************************************************************
	 * intra_prediction_unit_default_value
 	 *************************************************************************/
	procedure intra_prediction_unit_default_value(
		uint(size=16) x0,
		uint(size=16) y0,
		uint(size= 8) log2_cb_size,
        uint(size= 8) part_mode,
        
        uint(size= 8) log2_min_pu_size,
        uint(size= 8) intraPredMode[CTB_ADDR_TS_MAX][2])
	var
		uint(size=16) split = if part_mode = PART_NxN then 1 else 0 end,
		uint(size=16) pb_size = (1 << log2_cb_size) >> split,
		uint(size=16) side  = split + 1,
    	uint(size= 8) size_in_pus = pb_size >> log2_min_pu_size,
    	uint(size=16) x_pu,
    	uint(size=16) y_pu
	begin
		x_pu  := (x0 + pb_size * (side-1)) >> log2_min_pu_size;
		y_pu  := (y0 + pb_size * (side-1)) >> log2_min_pu_size;
		foreach int j in 0 .. size_in_pus-1 do
			intraPredMode[x_pu + j][0] := INTRA_DC;
			intraPredMode[y_pu + j][1] := INTRA_DC;
		end
			
		foreach int i in 0 .. side-1 do
			x_pu  := (x0 + pb_size * i) >> log2_min_pu_size;
			y_pu  := (y0 + pb_size * i) >> log2_min_pu_size;
			intraPredMode[x_pu + size_in_pus-1][0] := INTRA_DC;
			intraPredMode[y_pu + size_in_pus-1][1] := INTRA_DC;
		end
	end
	/**************************************************************************
	 * getScanIdx
 	 *************************************************************************/
	function getScanIdx(
		uint(size= 8) predMode,
		uint(size= 8) log2TrafoSize,
		uint(size= 8) intraPredMode
	) --> uint(size=2) :
		if predMode = INTRA and log2TrafoSize < 4 then
			if intraPredMode >= 6 and intraPredMode <= 14 then
				SCAN_VER
			elsif intraPredMode >= 22 and intraPredMode <= 30 then
				SCAN_HOR
			else
				SCAN_ZIGZAG //SCAN_DIAG
			end
		else
			SCAN_ZIGZAG //SCAN_DIAG
		end
	end
end