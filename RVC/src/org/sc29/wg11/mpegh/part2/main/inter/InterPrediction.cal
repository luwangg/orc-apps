/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

/**
 * Decoding process for inter prediction samples
 * 
 * 
 * @input CuMode : mode (Intra, Inter or Skip mode) of all CU sent.
 * 
 * @input CuSize : size of all CU sent.
 * 
 * @input IsBiPredOrLx : Indicates when the current CU is using Bi-prediction.
 * 
 * @input Mv : motion vectors of the current CU.
 * 
 * @input PartMode : Giving the partitioning mode of the current CU.
 * 
 * @input Poc : Picture Order Count of the current slice.
 * 
 * @input RefList : Reference Lists (L0 and L1) of the current slice.
 * 
 * @input Sample : Samples from the DPB, used for the inter prediction.
 * 
 * @input SliceType : slice type (I, P or B) of the current slice.
 * 
 * @input WeightedPredSe : syntax elements for the weighted prediction decoded
 * 	by the parser.
 * 
 * 
 * @output PredSample : Interpolated samples according to the movement
 *		components given.
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */

package org.sc29.wg11.mpegh.part2.main.inter;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.sc29.wg11.mpegh.part2.main.inter.InterFunctions.*;

actor InterPrediction()
	uint(size=16) CUInfo,
	uint(size=2)  IsBiPredOrLx,
	int (size=32) Mv,
	uint(size=4)  PartMode,
	int (size=16) Poc,
	uint(size=3)  RefIdx,
	int (size=16) RefList,
	uint(size=8)  Sample,
	uint(size=2)  SliceType,
	int (size=16) WeightedPredSe // is size correct ?
		==>
	uint(size=8) PredSample
		:

	uint(size=8) SZ_REF_LIST = 16;

	int(size=16)  currPoc;
	uint(size=2)  listIdx;
	uint(size=7)  iLoop;
	uint(size=7)  jLoop;
	
	uint(size=13)  pixIdx;
	uint(size=13)  pixIdxOff[2];

	uint(size=2)  compIdx;
	int (size=16) refListX[2][SZ_REF_LIST];
	uint(size=2)  wpIdc;
	uint(size=4)  numRefIdxLxAct[2];
	bool          isBSlice;
	uint(size=4)  refIdxLxAct;
	uint(size=3)  log2WeightDenom[3];
	int           weight[SZ_REF_LIST][2][3];
	int           offset[SZ_REF_LIST][2][3];
	uint(size=3)  numPartDecoded;
	uint(size=3)  numPart;
	uint(size=7)  puSize[2];
	uint(size=7)  fullPuSize[2];
	uint(size=7)  fullPuSizeChr[2];
	uint(size=2)  cuMode;
	int logWD_y;
	int logWD_u;
	int logWD_v;
	int weightCu_y[2];
	int weightCu_u[2];
	int weightCu_v[2];
	int offsetCu_y[2];
	int offsetCu_u[2]; 
	int offsetCu_v[2];
	uint(size=2)  isBiPredOrLx;
	int (size=4)  refIdxLx[2];
	int (size=32) mvLx[2][2];
	uint(size=2)  numList;
	uint(size=7)  predCuSize;
	int logWDTab[SZ_REF_LIST+1][SZ_REF_LIST+1][3];
	int weightCuTab[SZ_REF_LIST+1][SZ_REF_LIST+1][3][2];
	int offsetCuTab[SZ_REF_LIST+1][SZ_REF_LIST+1][3][2];

	uint(size=8) refSamples_y[(64+7)*(64+7)];
	uint(size=8) refSamples_u[(64+7)*(64+7)];
	uint(size=8) refSamples_v[(64+7)*(64+7)];
	int (size=16) predSamples_y[2][64*64];
	int (size=16) predSamples_u[2][64*64];
	int (size=16) predSamples_v[2][64*64];
	uint (size=8) weightSamples_y[64*64];
	uint (size=8) weightSamples_u[64*64];
	uint (size=8) weightSamples_v[64*64];

	/* Computing the weighted prediction coefficients (logWd, w0, w1, o0, o1),
	 * according to the picture(s) used for the prediction.
	 */
	procedure computeWeights(int refIdxL0, int refIdxL1)
	var
		int(size=16) pocL0,
		int(size=16) pocL1,
		int          tb,
		int          td,
		int          tx,
		int          weightScalFact,
		int          w0,
		int          w1,
		uint(size=3) idxL0 = refIdxL0+1,
		uint(size=3) idxL1 = refIdxL1+1
	begin
		/*Implicit weighted prediction : we compute the weights thanks the the
		 * poc value of the reference pictures
		 */
		if(wpIdc = 2) then
			if(refIdxL0 >=0 && refIdxL1 >= 0) then
				if(refIdxL0>=0) then
					pocL0 := refListX[0][refIdxL0];
				end
				if(refIdxL1>=0) then
					pocL1 := refListX[1][refIdxL1];
				end
				tb := clip_i32(currPoc- pocL0, -128, 127);
				td := clip_i32(pocL1-pocL0, -128, 127);
				if(td != 0) then
					tx := (16384 + (abs(td)>>1))/td;
					weightScalFact := clip_i32((tb*tx +32)>>6, -1024, 1023);
				end
				if(pocL0 = pocL1 || (weightScalFact>>2)<-64 ||
					(weightScalFact>>2)>128) then
					w0 := 32;
					w1 := 32;
				else
					w0 := 64 - (weightScalFact>>2);
					w1 := weightScalFact>>2;
				end
				foreach int component in 0 .. 2
				do
					logWDTab[idxL0][idxL1][component] := 5+shift1;
					offsetCuTab[idxL0][idxL1][component][0] := 0;
					offsetCuTab[idxL0][idxL1][component][1] := 0;
					weightCuTab[idxL0][idxL1][component][0] := w0;
					weightCuTab[idxL0][idxL1][component][1] := w1;
				end
			else
				foreach int component in 0 .. 2
				do
					logWDTab[idxL0][idxL1][component] := shift1;
					offsetCuTab[idxL0][idxL1][component][0] := 0;
					offsetCuTab[idxL0][idxL1][component][1] := 0;
					weightCuTab[idxL0][idxL1][component][0] := 1;
					weightCuTab[idxL0][idxL1][component][1] := 1;
				end
			end
		/*Explicit weighted prediction : we get the coefficients thanks to the
		 * predWeight table (decoded at the beginning of each slice).
		 */
		else if (wpIdc = 1) then
			foreach int component in 0 .. 2
			do
				logWDTab[idxL0][idxL1][component] := log2WeightDenom[component] + shift1;
				if(refIdxL0 >=0) then
					weightCuTab[idxL0][idxL1][component][0] := weight[refIdxL0][0][component];
					offsetCuTab[idxL0][idxL1][component][0] := offset[refIdxL0][0][component];
				end
				if(refIdxL1 >=0) then
					weightCuTab[idxL0][idxL1][component][1] := weight[refIdxL1][1][component];
					offsetCuTab[idxL0][idxL1][component][1] := offset[refIdxL1][1][component];
				end
			end
		end end
	end

	/* We have a new slice, we will update differents value then get the new
	 * refList and weights
	 */
//		partMode = PART_MODE_SLICE_INDEP || partMode = PART_MODE_PICT
	isNewSlice.notDep: action PartMode:[partMode], Poc:[poc], SliceType:[sliceType],
		WeightedPredSe:[weightPredIdc] ==>
	do
		isBSlice := sliceType = B_SLICE;
		currPoc  := poc;
		wpIdc    := weightPredIdc;
		listIdx  := 0;
	end

	isNewSlice.dep: action PartMode:[partMode] ==>
	guard
		partMode = PART_MODE_SLICE_DEP
	end

	/* We have a New Cu in the Slice */
	getPartMode: action PartMode:[partMode] ==>
	guard
		partMode != PART_MODE_SLICE_DEP && partMode != PART_MODE_SLICE_INDEP &&
		partMode != PART_MODE_PICT
	do
		numPart := partModeToNumPart[partMode];
		numPartDecoded := 0;
	end

	/** Getting the size of each reference list  **/
	getSizeRefList.launch: action RefList:[sizeList] ==>
	guard
		listIdx < 2
	do
		numRefIdxLxAct[listIdx] := sizeList;
		iLoop := 0;
	end

	getSizeRefList.done: action ==>
	guard
		listIdx = 2
	end

	/** Getting the poc contained in each reference list **/
	getRefList.launch: action RefList:[refPoc] ==>
	guard
		iLoop < numRefIdxLxAct[listIdx]
	do
		refListX[listIdx][iLoop] := refPoc;
		iLoop := iLoop + 1;
	end

	getRefList.done: action ==>
	guard
		iLoop = numRefIdxLxAct[listIdx]
	do
		listIdx := listIdx + 1;
	end

	/* Getting the syntax elements for the weighted prediction when we have
	 * weighted prediction in explicit mode
	 */
	getWeightDenom.launch: action WeightedPredSe:[weightDenom] repeat 2 ==>
	guard
		wpIdc = 1
	do
		listIdx := 0;
		log2WeightDenom[0] := weightDenom[0];
		log2WeightDenom[1] := weightDenom[0] + weightDenom[1];
		log2WeightDenom[2] := weightDenom[0] + weightDenom[1];
	end

	getWeightDenom.skip: action ==>
	guard
		wpIdc != 1
	do
		if(wpIdc = 2) then
			foreach int idxL0 in -1 .. numRefIdxLxAct[0]-1
			do
				foreach int idxL1 in -1 .. numRefIdxLxAct[1]-1
				do
					computeWeights(idxL0, idxL1);
				end
			end
		end
	end

	getWeightLX.launch: action ==>
	guard
		listIdx = 0 || listIdx = 1 && isBSlice
	do
		iLoop := 0;
		if(listIdx = 0) then
			refIdxLxAct := numRefIdxLxAct[0];
		else
			refIdxLxAct := numRefIdxLxAct[1];
		end
	end

	getWeightLX.skip: action ==>
	guard
		listIdx != 2
	do
		listIdx := listIdx + 1;
	end

	getWeightLX.done: action ==>
	guard
		listIdx = 2
	do
		foreach int idxL0 in -1 .. numRefIdxLxAct[0]-1
		do
			foreach int idxL1 in -1 .. numRefIdxLxAct[1]-1
			do
				computeWeights(idxL0, idxL1);
			end
		end
	end

	getLumaWeightLX.launch: action WeightedPredSe:[lumWeightFlag] ==>
	guard
		iLoop < refIdxLxAct
	do
		weight[iLoop][listIdx][0] := lumWeightFlag;
		iLoop := iLoop + 1;
	end

	getLumaWeightLX.done: action ==>
	guard
		iLoop = refIdxLxAct
	do
		iLoop := 0;
	end

	getChromaWeightLX.launch: action WeightedPredSe:[chrWeightFlag] ==>
	guard
		iLoop < refIdxLxAct
	do
		weight[iLoop][listIdx][1] := chrWeightFlag;
		iLoop := iLoop + 1;
	end

	getChromaWeightLX.done: action ==>
	guard
		iLoop = refIdxLxAct
	do
		iLoop := 0;
	end

	getDeltaLumaWeight.launch: action WeightedPredSe:[wpSyntElem] repeat 2 ==>
	guard
		iLoop < refIdxLxAct && weight[iLoop][listIdx][0] != 0
	do
		weight[iLoop][listIdx][0] := (1<<log2WeightDenom[0]) + wpSyntElem[0];
		offset[iLoop][listIdx][0] := wpSyntElem[1];
	end

	getDeltaLumaWeight.skip: action ==>
	guard
		iLoop < refIdxLxAct && weight[iLoop][listIdx][0] = 0
	do
		weight[iLoop][listIdx][0] := (1<<log2WeightDenom[0]);
		offset[iLoop][listIdx][0] := 0;
	end

	getDeltaLumaWeight.done: action ==>
	guard
		iLoop = refIdxLxAct
	do
		iLoop := 0;
		listIdx := listIdx + 1;
	end

	getDeltaChromaWeight.launch: action WeightedPredSe:[wpSyntElem] repeat 4 ==>
	guard
		weight[iLoop][listIdx][1] != 0
	var
		int offPred
	do
		weight[iLoop][listIdx][1] := (1<<log2WeightDenom[1]) + wpSyntElem[0];
		offPred := 128 - (128*weight[iLoop][listIdx][1] >> log2WeightDenom[1]);
		offset[iLoop][listIdx][1] := clip_i32(offPred+wpSyntElem[1], -128, 127);

		weight[iLoop][listIdx][2] := (1<<log2WeightDenom[2]) + wpSyntElem[2];
		offPred := 128 - (128*weight[iLoop][listIdx][2] >> log2WeightDenom[2]);
		offset[iLoop][listIdx][2] := clip_i32(offPred+wpSyntElem[3], -128, 127);

		iLoop := iLoop + 1;
	end

	getDeltaChromaWeight.skip: action ==>
	guard
		weight[iLoop][listIdx][1] = 0
	do
		weight[iLoop][listIdx][1] := (1<<log2WeightDenom[1]);
		offset[iLoop][listIdx][1] := 0;
		weight[iLoop][listIdx][2] := (1<<log2WeightDenom[2]);
		offset[iLoop][listIdx][2] := 0;
		iLoop := iLoop + 1;
	end

	/* Get the size of each part of the current Cu. */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart
	do
		cuMode := cuInfo[0];
		puSize := [cuInfo[i]: for int i in 3 .. 4];
		fullPuSize := [cuInfo[i] + 7 : for int i in 3 .. 4];
		fullPuSizeChr := [(cuInfo[i]>>1) + 3 : for int i in 3 .. 4];
		predCuSize   := max(cuInfo[3], cuInfo[4]);
		pixIdxOff[0] := predCuSize + 7 - fullPuSize[0];
		pixIdxOff[1] := predCuSize/2 + 3;
		numPartDecoded := numPartDecoded + 1;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	/* We launch the InterPrediction code only if we have an
	 * inter prediction :)
	 */
	getCuMode.isNotInter: action ==>
	guard
		not(cuMode = INTER || cuMode = SKIP)
	end

	getCuMode.isInter: action IsBiPredOrLx:[isBiPredOrPredLX] ==>
	guard
		cuMode = INTER || cuMode = SKIP
	do
		isBiPredOrLx := isBiPredOrPredLX;
	end

	/* Getting the prediction components for mono or bi-prediction */
	getRefIdx.monoPred: action RefIdx:[refIndexLx], Mv:[mv] repeat 2 ==>
	guard
		isBiPredOrLx != BI_PRED
	var
		uint idxL0,
		uint idxL1
	do
		if(isBiPredOrLx = PRED_L0) then
			mvLx[0] := [mv[i]:for int i in 0 .. 1];
			mvLx[1] := [0,0];
			refIdxLx := [refIndexLx, -1];
			listIdx := 0;
		else
			mvLx[1] := [mv[i]:for int i in 0 .. 1];
			mvLx[0] := [0,0];
			refIdxLx := [-1, refIndexLx];
			listIdx := 1;
		end
		idxL0 := refIdxLx[0]+1;
		idxL1 := refIdxLx[1]+1;
		
		logWD_y := logWDTab[idxL0][idxL1][0];
		logWD_u := logWDTab[idxL0][idxL1][1];
		logWD_v := logWDTab[idxL0][idxL1][2];
		
		foreach int list in 0 .. 1
		do
			weightCu_y[list] := weightCuTab[idxL0][idxL1][0][list];
			offsetCu_y[list] := offsetCuTab[idxL0][idxL1][0][list];
			weightCu_u[list] := weightCuTab[idxL0][idxL1][1][list];
			offsetCu_u[list] := offsetCuTab[idxL0][idxL1][1][list];
			weightCu_v[list] := weightCuTab[idxL0][idxL1][2][list];
			offsetCu_v[list] := offsetCuTab[idxL0][idxL1][2][list];
		end
	
		numList := 1;
	end

	getRefIdx.biPred: action RefIdx:[refIndexLx] repeat 2, Mv:[mv] repeat 4 ==>
	guard
		isBiPredOrLx = BI_PRED
	var
		uint idxL0,
		uint idxL1
	do
		mvLx := [[mv[2*i+j]:for uint j in 0 ..1]: for int i in 0 .. 1];
		refIdxLx := [refIndexLx[i]: for uint i in 0 .. 1];
		idxL0 := refIdxLx[0]+1;
		idxL1 := refIdxLx[1]+1;
		
		logWD_y := logWDTab[idxL0][idxL1][0];
		logWD_u := logWDTab[idxL0][idxL1][1];
		logWD_v := logWDTab[idxL0][idxL1][2];
		foreach int list in 0 .. 1
		do
			weightCu_y[list] := weightCuTab[idxL0][idxL1][0][list];
			offsetCu_y[list] := offsetCuTab[idxL0][idxL1][0][list];
			weightCu_u[list] := weightCuTab[idxL0][idxL1][1][list];
			offsetCu_u[list] := offsetCuTab[idxL0][idxL1][1][list];
			weightCu_v[list] := weightCuTab[idxL0][idxL1][2][list];
			offsetCu_v[list] := offsetCuTab[idxL0][idxL1][2][list];
		end
			
		listIdx := 0;
		numList :=
			/* If we have the same picture with the same movement vectors we 
			 * can don't need to do the same interpolation twice :)
			 */
			if(refListX[0][refIdxLx[0]] = refListX[1][refIdxLx[1]] &&
				mvLx[0][0] = mvLx[1][0] && mvLx[0][1] = mvLx[1][1] &&
				refIdxLx[0] = refIdxLx[1]) then
				1
			else
				2
			end;
	end

	/* Getting the samples from the DPB and realizing the interpolation. */
	getAllSamples.launch: action ==>
	guard
		not (numList = 1  && listIdx = 1 && isBiPredOrLx = BI_PRED),
		listIdx=0 || listIdx=1 && (isBiPredOrLx = BI_PRED ||
			isBiPredOrLx = PRED_L1)
	do
		pixIdx := 0;
		iLoop := 0;
		jLoop := 0;
	end

	lumaWidth.is71: action ==>
	guard
		fullPuSize[0] = 71
	end

	lumaWidth.is39: action ==>
	guard
		fullPuSize[0] = 39
	end

	lumaWidth.is23: action ==>
	guard
		fullPuSize[0] = 23
	end

	lumaWidth.is15: action ==>
	guard
		fullPuSize[0] = 15
	end

	lumaWidth.is11: action ==>
	guard
		fullPuSize[0] = 11
	end

	chromaWidth.is35: action ==>
	guard
		fullPuSizeChr[0] = 35
	end

	chromaWidth.is19: action ==>
	guard
		fullPuSizeChr[0] = 19
	end

	chromaWidth.is11: action ==>
	guard
		fullPuSizeChr[0] = 11
	end

	chromaWidth.is7: action ==>
	guard
		fullPuSizeChr[0] = 7
	end

	chromaWidth.is5: action ==>
	guard
		fullPuSizeChr[0] = 5
	end

	valWidth.isOther: action ==>
	end

	getSamples.luma.launch.is71: action Sample:[sample] repeat 71 ==>
	guard
		jLoop  < fullPuSize[1]
	do
		foreach int i in 0 .. 70
		do
			refSamples_y[pixIdx+i] := sample[i];
		end

		iLoop := 0;
		pixIdx := pixIdx + predCuSize + 7;
		jLoop := jLoop + 1;
	end

	getSamples.luma.launch.is39: action Sample:[sample] repeat 39 ==>
	guard
		jLoop  < fullPuSize[1]
	do
		foreach int i in 0 .. 38
		do
			refSamples_y[pixIdx+i] := sample[i];
		end

		iLoop := 0;
		pixIdx := pixIdx + predCuSize + 7;
		jLoop := jLoop + 1;
	end

	getSamples.luma.launch.is23: action Sample:[sample] repeat 23 ==>
	guard
		jLoop  < fullPuSize[1]
	do
		foreach int i in 0 .. 22
		do
			refSamples_y[pixIdx+i] := sample[i];
		end

		iLoop := 0;
		pixIdx := pixIdx + predCuSize + 7;
		jLoop := jLoop + 1;
	end

	getSamples.luma.launch.is15: action Sample:[sample] repeat 15 ==>
	guard
		jLoop  < fullPuSize[1]
	do
		foreach int i in 0 .. 14
		do
			refSamples_y[pixIdx+i] := sample[i];
		end

		iLoop := 0;
		pixIdx := pixIdx + predCuSize + 7;
		jLoop := jLoop + 1;
	end

	getSamples.luma.launch.is11: action Sample:[sample] repeat 11 ==>
	guard
		jLoop  < fullPuSize[1]
	do
		foreach int i in 0 .. 10
		do
			refSamples_y[pixIdx+i] := sample[i];
		end

		iLoop := 0;
		pixIdx := pixIdx + predCuSize + 7;
		jLoop := jLoop + 1;
	end

	getSamples.luma.launch.is1: action Sample:[sample] ==>
	guard
		jLoop  < fullPuSize[1]
	do
		refSamples_y[pixIdx] := sample;

		pixIdx := pixIdx + 1;
		iLoop := iLoop + 1;
		if(iLoop = fullPuSize[0]) then
			iLoop := 0;
			pixIdx := pixIdx + pixIdxOff[0];
			jLoop := jLoop + 1;
		end
	end

	getSamples.luma.done: action ==>
	guard
		jLoop = fullPuSize[1]
	do
		pixIdx := 0;
		compIdx := 1;
		jLoop := 0;
	end

	getSamples.chroma.launch.is35: action Sample:[sample] repeat 35 ==>
	guard
		compIdx < 3
	do
		if(compIdx = 1) then
			foreach int i in 0 .. 34
			do
				refSamples_u[pixIdx + i] := sample[i];
			end
		else
			foreach int i in 0 .. 34
			do
				refSamples_v[pixIdx + i] := sample[i];
			end
		end

		jLoop := jLoop + 1;
		pixIdx := pixIdx + predCuSize/2 + 3;
		if(jLoop = fullPuSizeChr[1]) then
			pixIdx := 0;
			jLoop := 0;
			compIdx := compIdx + 1;
		end
	end

	getSamples.chroma.launch.is19: action Sample:[sample] repeat 19 ==>
	guard
		compIdx < 3
	do
		if(compIdx = 1) then
			foreach int i in 0 .. 18
			do
				refSamples_u[pixIdx + i] := sample[i];
			end
		else
			foreach int i in 0 .. 18
			do
				refSamples_v[pixIdx + i] := sample[i];
			end
		end

		jLoop := jLoop + 1;
		pixIdx := pixIdx + predCuSize/2 + 3;
		if(jLoop = fullPuSizeChr[1]) then
			pixIdx := 0;
			jLoop := 0;
			compIdx := compIdx + 1;
		end
	end

	getSamples.chroma.launch.is11: action Sample:[sample] repeat 11 ==>
	guard
		compIdx < 3
	do
		if(compIdx = 1) then
			foreach int i in 0 .. 10
			do
				refSamples_u[pixIdx + i] := sample[i];
			end
		else
			foreach int i in 0 .. 10
			do
				refSamples_v[pixIdx + i] := sample[i];
			end
		end

		jLoop := jLoop + 1;
		pixIdx := pixIdx + predCuSize/2 + 3;
		if(jLoop = fullPuSizeChr[1]) then
			pixIdx := 0;
			jLoop := 0;
			compIdx := compIdx + 1;
		end
	end

	getSamples.chroma.launch.is7: action Sample:[sample] repeat 7 ==>
	guard
		compIdx < 3
	do
		if(compIdx = 1) then
			foreach int i in 0 .. 6
			do
				refSamples_u[pixIdx + i] := sample[i];
			end
		else
			foreach int i in 0 .. 6
			do
				refSamples_v[pixIdx + i] := sample[i];
			end
		end

		jLoop := jLoop + 1;
		pixIdx := pixIdx + predCuSize/2 + 3;
		if(jLoop = fullPuSizeChr[1]) then
			pixIdx := 0;
			jLoop := 0;
			compIdx := compIdx + 1;
		end
	end

	getSamples.chroma.launch.is5: action Sample:[sample] repeat 5 ==>
	guard
		compIdx < 3
	do
		if(compIdx = 1) then
			foreach int i in 0 .. 4
			do
				refSamples_u[pixIdx + i] := sample[i];
			end
		else
			foreach int i in 0 .. 4
			do
				refSamples_v[pixIdx + i] := sample[i];
			end
		end

		jLoop := jLoop + 1;
		pixIdx := pixIdx + predCuSize/2 + 3;
		if(jLoop = fullPuSizeChr[1]) then
			pixIdx := 0;
			jLoop := 0;
			compIdx := compIdx + 1;
		end
	end
	

	getSamples.chroma.launch.is1: action Sample:[sample] ==>
	guard
		compIdx < 3
	do
		if(compIdx = 1) then
			refSamples_u[pixIdx] := sample;
		else
			refSamples_v[pixIdx] := sample;
		end

		pixIdx := pixIdx + 1;

		iLoop := iLoop + 1;
		if(iLoop = fullPuSizeChr[0]) then
			iLoop := 0;
			jLoop := jLoop + 1;
			pixIdx := pixIdx + pixIdxOff[1] - fullPuSizeChr[0];
			if(jLoop = fullPuSizeChr[1]) then
				pixIdx := 0;
				iLoop := 0;
				jLoop := 0;
				compIdx := compIdx + 1;
			end
		end
	end

	getSamples.chroma.done: action ==>
	guard
		compIdx = 3
	end

	interpolateSamples: action ==>
	var
		uint maskMv[3] = [3, 7, 7],
		int mvQuartPix[2],
		uint(size=7) compPuIdxMax[2]
	do
		compPuIdxMax := [puSize[i]-1:for int i in 0 .. 1];
		foreach int component in 0 .. 2 /* Y, Cb, Cr */
		do
			/* We just need to do the fractionnal part of the movement
			 * interpolation.
			 */
			mvQuartPix := [mvLx[listIdx][i] & maskMv[component]:
				for int i in 0 .. 1];

			/* if quartPix (or eighthPix for chroma) is not equal to 0 for both
			 * x and y, we realize the interpolation in 2 steps.
			 */
			/* We do the horizontal interpolation for all the samples which
			 * will be needed for the vertical interpolation.
			 */			
			if component=0 then
				put_hevc_qpel_cal(predSamples_y, listIdx, refSamples_y, predCuSize + 7, compPuIdxMax[0], compPuIdxMax[1], mvQuartPix[0], mvQuartPix[1]);
			elsif component=1 then
				put_hevc_epel_cal(predSamples_u, listIdx, refSamples_u, (predCuSize>>1) + 3, compPuIdxMax[0], compPuIdxMax[1], mvQuartPix[0], mvQuartPix[1]);
			else
				put_hevc_epel_cal(predSamples_v, listIdx, refSamples_v, (predCuSize>>1) + 3, compPuIdxMax[0], compPuIdxMax[1], mvQuartPix[0], mvQuartPix[1]);
			end
			compPuIdxMax := [(puSize[i]>>1)-1:for int i in 0 .. 1];
		end
		listIdx := listIdx + 1;
	end

	getAllSamples.done: action ==>
	guard
		listIdx=2 || listIdx=1 && isBiPredOrLx = PRED_L0 ||  numList = 1  && listIdx = 1 && isBiPredOrLx = BI_PRED
	var
		uint(size=7) compPuIdxMax[2],
		uint(size=1) rdList = if(isBiPredOrLx = PRED_L1) then 1 else 0 end
	do
		compPuIdxMax := [puSize[i]-1:for int i in 0 .. 1];
		
		if(numList = 1) then
			if(wpIdc = 0) then
				put_unweighted_pred(predSamples_y, compPuIdxMax[0], compPuIdxMax[1], rdList, weightSamples_y);
				put_unweighted_pred(predSamples_u, compPuIdxMax[0], compPuIdxMax[1], rdList, weightSamples_u);
				put_unweighted_pred(predSamples_v, compPuIdxMax[0], compPuIdxMax[1], rdList, weightSamples_v);
			else
				if(isBiPredOrLx != BI_PRED) then
					weighted_pred(logWD_y , weightCu_y, offsetCu_y, predSamples_y, compPuIdxMax[0], compPuIdxMax[1], rdList, weightSamples_y);
					weighted_pred(logWD_u , weightCu_u, offsetCu_u, predSamples_u, compPuIdxMax[0], compPuIdxMax[1], rdList, weightSamples_u);
					weighted_pred(logWD_v , weightCu_v, offsetCu_v, predSamples_v, compPuIdxMax[0], compPuIdxMax[1], rdList, weightSamples_v);
				else
					weighted_pred_mono(logWD_y , weightCu_y, offsetCu_y, predSamples_y, compPuIdxMax[0], compPuIdxMax[1], weightSamples_y);
					weighted_pred_mono(logWD_u , weightCu_u, offsetCu_u, predSamples_u, compPuIdxMax[0], compPuIdxMax[1], weightSamples_u);
					weighted_pred_mono(logWD_v , weightCu_v, offsetCu_v, predSamples_v, compPuIdxMax[0], compPuIdxMax[1], weightSamples_v);
				end
			end
		else
			if(wpIdc = 0) then
				put_weighted_pred_avg(predSamples_y, compPuIdxMax[0], compPuIdxMax[1], weightSamples_y);
				put_weighted_pred_avg(predSamples_u, compPuIdxMax[0], compPuIdxMax[1], weightSamples_u);
				put_weighted_pred_avg(predSamples_v, compPuIdxMax[0], compPuIdxMax[1], weightSamples_v);
			else
				weighted_pred_avg(logWD_y, weightCu_y, offsetCu_y, predSamples_y, compPuIdxMax[0], compPuIdxMax[1], weightSamples_y);
				weighted_pred_avg(logWD_u, weightCu_u, offsetCu_u, predSamples_u, compPuIdxMax[0], compPuIdxMax[1], weightSamples_u);
				weighted_pred_avg(logWD_v, weightCu_v, offsetCu_v, predSamples_v, compPuIdxMax[0], compPuIdxMax[1], weightSamples_v);
			end
		end
		
		iLoop := 0;
		jLoop := 0;
	end

	sendCu.launch: action ==> PredSample:[pix] repeat 16+2*4
	guard
		jLoop < puSize[1]
	var
		uint(size=8) pix[16+2*4]
	do
		foreach uint y in 0 .. 3
		do
			foreach uint x in 0 .. 3
			do
				pix[y*4+x] := weightSamples_y[iLoop+x + (jLoop+y) * puSize[0]];
			end
		end
		
		foreach uint y in 0 .. 1
		do
			foreach uint x in 0 .. 1
			do
				pix[16 + y*2+x] := weightSamples_u[iLoop/2+x + (jLoop/2+y) * puSize[0]/2];
				pix[20 + y*2+x] := weightSamples_v[iLoop/2+x + (jLoop/2+y) * puSize[0]/2];
			end
		end
		iLoop := iLoop + 4;
		if(iLoop = puSize[0]) then
			iLoop := 0;
			jLoop := jLoop + 4;
		end
	end

	sendCu.done: action ==>
	guard
		jLoop = puSize[1]
	do
		iLoop := 0;
		jLoop := 0;
	end

	schedule fsm GetPartMode:
		GetPartMode (isNewSlice.dep    )--> GetPartMode;
		GetPartMode (isNewSlice.notDep )--> GetSizeRefList;
		GetPartMode (getPartMode )--> GetCuInfo;

		GetSizeRefList (getSizeRefList.launch )--> GetRefList;
		GetSizeRefList (getSizeRefList.done   )--> GetWeightDenom;

		GetRefList (getRefList.launch )--> GetRefList;
		GetRefList (getRefList.done   )--> GetSizeRefList;

		GetWeightDenom (getWeightDenom.launch )--> GetWeightLX;
		GetWeightDenom (getWeightDenom.skip   )--> GetPartMode;

		GetWeightLX (getWeightLX.launch )--> GetLumaWeightLX;
		GetWeightLX (getWeightLX.skip   )--> GetWeightLX;
		GetWeightLX (getWeightLX.done   )--> GetPartMode;

		GetLumaWeightLX (getLumaWeightLX.launch )--> GetLumaWeightLX;
		GetLumaWeightLX (getLumaWeightLX.done   )--> GetChromaWeightLX;

		GetChromaWeightLX (getChromaWeightLX.launch )--> GetChromaWeightLX;
		GetChromaWeightLX (getChromaWeightLX.done   )--> GetDeltaLumWtLX;

		GetDeltaLumWtLX (getDeltaLumaWeight.launch )--> GetDeltaChrWtLX;
		GetDeltaLumWtLX (getDeltaLumaWeight.skip   )--> GetDeltaChrWtLX;
		GetDeltaLumWtLX (getDeltaLumaWeight.done   )--> GetWeightLX;

		GetDeltaChrWtLX (getDeltaChromaWeight   )--> GetDeltaLumWtLX;

		GetCuInfo (getCuInfo.launch )--> GetCuMode;
		GetCuInfo (getCuInfo.done   )--> GetPartMode;

		GetCuMode (getCuMode.isNotInter )--> GetCuInfo;
		GetCuMode (getCuMode.isInter )--> GetRefIdx;

		GetRefIdx (getRefIdx )--> GetSamples;

		GetSamples (getAllSamples.launch )--> CheckLumaWidth;
		GetSamples (getAllSamples.done   )--> SendCu;

		CheckLumaWidth (lumaWidth.is71    )--> GetLumaSamples71;
		CheckLumaWidth (lumaWidth.is39    )--> GetLumaSamples39;
		CheckLumaWidth (lumaWidth.is23    )--> GetLumaSamples23;
		CheckLumaWidth (lumaWidth.is15    )--> GetLumaSamples15;
		CheckLumaWidth (lumaWidth.is11    )--> GetLumaSamples11;
		CheckLumaWidth (valWidth.isOther  )--> GetLumaSamples;

		GetLumaSamples71 (getSamples.luma.launch.is71 )--> GetLumaSamples71;
		GetLumaSamples71 (getSamples.luma.done        )--> CheckChromaWidth;

		GetLumaSamples39 (getSamples.luma.launch.is39 )--> GetLumaSamples39;
		GetLumaSamples39 (getSamples.luma.done        )--> CheckChromaWidth;

		GetLumaSamples23 (getSamples.luma.launch.is23 )--> GetLumaSamples23;
		GetLumaSamples23 (getSamples.luma.done        )--> CheckChromaWidth;

		GetLumaSamples15 (getSamples.luma.launch.is15 )--> GetLumaSamples15;
		GetLumaSamples15 (getSamples.luma.done        )--> CheckChromaWidth;

		GetLumaSamples11 (getSamples.luma.launch.is11 )--> GetLumaSamples11;
		GetLumaSamples11 (getSamples.luma.done        )--> CheckChromaWidth;

		GetLumaSamples (getSamples.luma.launch.is1 )--> GetLumaSamples;
		GetLumaSamples (getSamples.luma.done       )--> CheckChromaWidth;

		CheckChromaWidth (chromaWidth.is35 )--> GetChromaSamples35;
		CheckChromaWidth (chromaWidth.is19 )--> GetChromaSamples19;
		CheckChromaWidth (chromaWidth.is11 )--> GetChromaSamples11;
		CheckChromaWidth (chromaWidth.is7  )--> GetChromaSamples7;
		CheckChromaWidth (chromaWidth.is5  )--> GetChromaSamples5;
		CheckChromaWidth (valWidth.isOther )--> GetChromaSamples;

		GetChromaSamples35 (getSamples.chroma.launch.is35 )--> GetChromaSamples35;
		GetChromaSamples35 (getSamples.chroma.done       )--> InterpolateSamples;

		GetChromaSamples19 (getSamples.chroma.launch.is19 )--> GetChromaSamples19;
		GetChromaSamples19 (getSamples.chroma.done       )--> InterpolateSamples;

		GetChromaSamples11 (getSamples.chroma.launch.is11 )--> GetChromaSamples11;
		GetChromaSamples11 (getSamples.chroma.done       )--> InterpolateSamples;

		GetChromaSamples7 (getSamples.chroma.launch.is7 )--> GetChromaSamples7;
		GetChromaSamples7 (getSamples.chroma.done       )--> InterpolateSamples;

		GetChromaSamples5 (getSamples.chroma.launch.is5 )--> GetChromaSamples5;
		GetChromaSamples5 (getSamples.chroma.done       )--> InterpolateSamples;

		GetChromaSamples (getSamples.chroma.launch.is1 )--> GetChromaSamples;
		GetChromaSamples (getSamples.chroma.done       )--> InterpolateSamples;

		InterpolateSamples (interpolateSamples )--> GetSamples;

		SendCu (sendCu.launch )--> SendCu;
		SendCu (sendCu.done   )--> GetCuInfo;
	end
	priority
		getPartMode > isNewSlice.dep > isNewSlice.notDep;
		getWeightLX.launch > getWeightLX.skip >getWeightLX.done;
		lumaWidth > valWidth;
		chromaWidth > valWidth;
	end
end