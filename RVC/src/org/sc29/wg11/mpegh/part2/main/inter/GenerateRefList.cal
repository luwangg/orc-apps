/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

/**
 * This actor generates the poc of the reference lists.
 *
 * 
 * @input RefPoc : List of poc from the reference picture sets.
 * 
 * @input NumRefIdxLXAct : Size of reference list 0 and reference list 1.
 * 
 * @input RefPicListModif : Indicates if we have to reorder each reference
 *         list, then it gives the reordered indexes.
 * 
 * 
 * @output RefList : Reference poc for reference lists L0 and L1.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */

package org.sc29.wg11.mpegh.part2.main.inter;

import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import std.util.Math.*;

actor GenerateRefList()
	int (size=16) RefPoc,
	uint(size=5)  NumRefIdxLXAct,
	uint(size=4)  RefPicListModif
		==>
	int(size=16) RefList
		:

	uint(size=3)  numListRemain;
	uint(size=4)  numRefIdxLxAct[2];
	uint(size=32) iLoop;
	uint(size=2)  listIdx;
	int refPicListX[2][16];

	int  numPic[7];
	int  pocTables[7][16];

	/* Initialization of the reference list. With listIdx we can know if we
	 * have to generate refList0 or refList1. NumRefIdxLXAct is the size of the
	 * list
	 */
	procedure refListXInit(uint(size=1) listIdx, uint(size=32) numRefIdxLXAct)
	var
		uint cIdx,
		uint numPocTotalCurr,
		uint numRpsCurrLX,
		uint firstList,
		uint secList,
		uint thirdList,
		uint fourthList,
		uint fivthList,
		uint cand_lists[5]
		
	begin
		/* The order of the elements is
		 * ST_CURR_BEF - ST_CURR_AFT - LT_CURR for the RefList0 and
		 * ST_CURR_AFT - ST_CURR_BEF - LT_CURR for the RefList1
		 */
		firstList :=
			if(listIdx=0) then
				ST_CURR_BEF
			else
				ST_CURR_AFT
			end;
		secList :=
			if(listIdx=0) then
				IL_REF0
			else
				IL_REF1
			end;
		thirdList :=
			if(listIdx=0) then
				ST_CURR_AFT
			else
				ST_CURR_BEF
			end;
		fourthList := LT_CURR;
		fivthList :=
			if(listIdx=0) then
				IL_REF1
			else
				IL_REF0
			end;
		//cand_lists := [firstList, secList, thirdList, fourthList, fivthList];
		/* even if numRefIdxLXAct is inferior to numPocTotalCurr we fill in
		 * all the element from the Rps because we might reorder the list. If
		 * we reorder the list might need a reference picture located after
		 * numRefIdxLXAct.
		 */
		numPocTotalCurr := numPic[ST_CURR_BEF] + numPic[ST_CURR_AFT]
			+ numPic[LT_CURR] + numPic[IL_REF0] + numPic[IL_REF1];
		numRpsCurrLX := max(numPocTotalCurr,numRefIdxLXAct);
		cIdx := 0;
		while(cIdx < numRpsCurrLX)
		do
			foreach int i in 0 .. numPic[firstList]-1
			do
				refPicListX[listIdx][cIdx] := pocTables[firstList][i];
				cIdx := cIdx + 1;
			end
			foreach int i in 0 .. numPic[secList]-1
			do
				refPicListX[listIdx][cIdx] := pocTables[secList][i];
				cIdx := cIdx + 1;
			end
			foreach int i in 0 .. numPic[thirdList]-1
			do
				refPicListX[listIdx][cIdx] := pocTables[thirdList][i];
				cIdx := cIdx + 1;
			end
			foreach int i in 0 .. numPic[fourthList]-1
			do
				refPicListX[listIdx][cIdx] := pocTables[fourthList][i];
				cIdx := cIdx + 1;
			end
			foreach int i in 0 .. numPic[fivthList]-1
			do
				refPicListX[listIdx][cIdx] := pocTables[fivthList][i];
				cIdx := cIdx + 1;
			end
		end
	end

	/* Getting the lists' size */
	getNumRefIdxLX: action NumRefIdxLXAct:[numRefIdxAct] repeat 2 ==>
	do
		//We will get the 7 lists of the reference picture set :
		// ST_CURR_BEF; ST_CURR_AFT; ST_FOLL; LT_CURR; LT_FOLL
		numListRemain := 7;

		numRefIdxLxAct[0] := numRefIdxAct[0];
		numRefIdxLxAct[1] := numRefIdxAct[1];
	end

	/* Getting the size of one of the Rps list */
	getSizeList.launch: action RefPoc:[szList] ==>
	guard
		numListRemain > 0
	do
		numPic[7-numListRemain] := szList;
		iLoop := 0;
	end

	/* We got the 7 Rps' list */
	getSizeList.done: action ==>
	guard
		numListRemain = 0
	do
		if(numRefIdxLxAct[0] > 0) then
			refListXInit(0, numRefIdxLxAct[0]);
		end
		if(numRefIdxLxAct[1] > 0) then
			refListXInit(1, numRefIdxLxAct[1]);
		end
		listIdx := 0;
	end

	/*** Getting the content of each Rps' list ***/
	getRefPocContent.launch: action RefPoc:[pocVal] ==>
	guard
		iLoop < numPic[7-numListRemain]
	do
		pocTables[7-numListRemain][iLoop] := pocVal;
		iLoop := iLoop + 1;
	end

	getRefPocContent.done: action ==>
	guard
		iLoop = numPic[7-numListRemain]
	do
		numListRemain := numListRemain - 1;
	end

	getListModif.isFalse: action RefPicListModif:[listModif] ==>
		RefList:[numRefIdxLxAct[listIdx]]
	guard
		listIdx < 2 and listModif = 0
	do
		iLoop := 0;
	end

	/*** RefListX is not modified and we send all the elements ***/
	sendingUnmodifiedList.launch: action ==>
		RefList:[refPicListX[listIdx][iLoop-1]]
	guard
		iLoop < numRefIdxLxAct[listIdx]
	do
		iLoop := iLoop + 1;
	end

	sendingUnmodifiedList.done: action ==>
	guard
		iLoop = numRefIdxLxAct[listIdx]
	do
		listIdx := listIdx + 1;
	end

	/*** RefListX is modified and we send the elements with the index listEntry ***/
	getListModif.isTrue: action RefPicListModif:[listModif]==>
		RefList:[numRefIdxLxAct[listIdx]]
	guard
		listIdx < 2 and listModif = 1
	do
		iLoop := 0;
	end

	sendingModifiedList.launch: action RefPicListModif:[listEntry] ==>
		RefList:[refPicListX[listIdx][listEntry]]
	guard
		iLoop < numRefIdxLxAct[listIdx]
	do
		iLoop := iLoop + 1;
	end

	sendingModifiedList.done: action ==>
	guard
		iLoop = numRefIdxLxAct[listIdx]
	do
		listIdx := listIdx + 1;
	end

	/* The lists have been sent */
	getListModif.done: action ==>
	guard
		listIdx = 2
	do
		iLoop := 0;
	end

	schedule fsm GetNumRefIdxLX:
		GetNumRefIdxLX (getNumRefIdxLX    )--> GetSizeList;
		
		GetSizeList (getSizeList.launch )--> GetRefPocContent;
		GetSizeList (getSizeList.done   )--> GetListModif;

		GetRefPocContent (getRefPocContent.launch )--> GetRefPocContent;
		GetRefPocContent (getRefPocContent.done   )--> GetSizeList;

		GetListModif (getListModif.isFalse )--> SendingUnmodifiedList;
		GetListModif (getListModif.isTrue  )--> SendingModifiedList;
		GetListModif (getListModif.done    )--> GetNumRefIdxLX;

		SendingUnmodifiedList (sendingUnmodifiedList.launch )--> SendingUnmodifiedList;
		SendingUnmodifiedList (sendingUnmodifiedList.done   )--> GetListModif;

		SendingModifiedList (sendingModifiedList.launch )--> SendingModifiedList;
		SendingModifiedList (sendingModifiedList.done   )--> GetListModif;
	end
end