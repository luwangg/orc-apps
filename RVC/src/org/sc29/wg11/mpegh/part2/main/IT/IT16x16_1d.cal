/********************************************************************************

This software module was originally developed by 
Eduardo Juarez, Wei Jianguo and Ren Rong, 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

UPM grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that UPM
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, UPM
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

UPM retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/
// Modified by: Junaid Jameel Ahmad (EPFL)

package org.sc29.wg11.mpegh.part2.main.IT;

import org.sc29.wg11.mpegh.part2.main.IT.CommonConstant.*;
import std.util.Math.*;

actor IT16x16_1d (uint(size=8) SHIFT) int(size=16) Src, uint(size=8) BitDepth
                    ==> 
                    int(size=16) Dst
                    :

  action Src:[ src ] repeat 256, BitDepth:[ bitDepth ]
         ==> 
         Dst:[ dst ] repeat 256
  var
   List(type:int(size=32), size=2  ) evenEvenEven,
   List(type:int(size=32), size=2  ) evenEvenOdd,
   List(type:int(size=32), size=4  ) evenEven,
   List(type:int(size=32), size=4  ) evenOdd,
   List(type:int(size=32), size=8  ) even,
   List(type:int(size=32), size=8  ) odd,
   List(type:int(size=16), size=256) dst,
   uint(size=8) shift = SHIFT - (if(SHIFT = 12) then bitDepth - 8 else 0 end),
   int rnd_factor = 1 << (shift - 1)
  do
  	foreach int i in 0 .. 15 do
	    evenEvenEven := [( src[i*16] * g_aiT16[0][0] ) + ( src[i*16+8] * g_aiT16[8][0] ),
	                     ( src[i*16] * g_aiT16[0][1] ) + ( src[i*16+8] * g_aiT16[8][1] )
	                    ];
	                      
	    evenEvenOdd  := [( src[i*16+4] * g_aiT16[4][0] ) + ( src[i*16+12] * g_aiT16[12][0] ),
	                     ( src[i*16+4] * g_aiT16[4][1] ) + ( src[i*16+12] * g_aiT16[12][1] )
	                    ]; 
	                    
	    evenEven := [ evenEvenEven[0] + evenEvenOdd[0],
	                  evenEvenEven[1] + evenEvenOdd[1],
	                  evenEvenEven[1] - evenEvenOdd[1],
	                  evenEvenEven[0] - evenEvenOdd[0]
	                ];                                        
	                 
	    evenOdd  := [( src[i*16+2] * g_aiT16[2][0] ) + ( src[i*16+6] * g_aiT16[6][0] ) + ( src[i*16+10] * g_aiT16[10][0] ) + ( src[i*16+14] * g_aiT16[14][0] ),
	                 ( src[i*16+2] * g_aiT16[2][1] ) + ( src[i*16+6] * g_aiT16[6][1] ) + ( src[i*16+10] * g_aiT16[10][1] ) + ( src[i*16+14] * g_aiT16[14][1] ),
	                 ( src[i*16+2] * g_aiT16[2][2] ) + ( src[i*16+6] * g_aiT16[6][2] ) + ( src[i*16+10] * g_aiT16[10][2] ) + ( src[i*16+14] * g_aiT16[14][2] ),
	                 ( src[i*16+2] * g_aiT16[2][3] ) + ( src[i*16+6] * g_aiT16[6][3] ) + ( src[i*16+10] * g_aiT16[10][3] ) + ( src[i*16+14] * g_aiT16[14][3] )
	                ]; 
	                
	    even := [ evenEven[0] + evenOdd[0],
	    	      evenEven[1] + evenOdd[1],
	    	      evenEven[2] + evenOdd[2],
	    	      evenEven[3] + evenOdd[3],
	    	      evenEven[3] - evenOdd[3],
	    	      evenEven[2] - evenOdd[2],
	    	      evenEven[1] - evenOdd[1],
	    	      evenEven[0] - evenOdd[0]
	            ];                       
	         
	    odd  := [( src[i*16+1] * g_aiT16[1][0] ) + ( src[i*16+3]  * g_aiT16[3] [0] ) + ( src[i*16+5]  * g_aiT16[5] [0] ) + ( src[i*16+7]  * g_aiT16[7] [0] ) +
	    	     ( src[i*16+9] * g_aiT16[9][0] ) + ( src[i*16+11] * g_aiT16[11][0] ) + ( src[i*16+13] * g_aiT16[13][0] ) + ( src[i*16+15] * g_aiT16[15][0] ),
	    	      
	             ( src[i*16+1] * g_aiT16[1][1] ) + ( src[i*16+3]  * g_aiT16[3] [1] ) + ( src[i*16+5]  * g_aiT16[5] [1] ) + ( src[i*16+7]  * g_aiT16[7] [1] ) +
	             ( src[i*16+9] * g_aiT16[9][1] ) + ( src[i*16+11] * g_aiT16[11][1] ) + ( src[i*16+13] * g_aiT16[13][1] ) + ( src[i*16+15] * g_aiT16[15][1] ),
	                          
	             ( src[i*16+1] * g_aiT16[1][2] ) + ( src[i*16+3]  * g_aiT16[3] [2] ) + ( src[i*16+5]  * g_aiT16[5] [2] ) + ( src[i*16+7]  * g_aiT16[7] [2] ) +
	             ( src[i*16+9] * g_aiT16[9][2] ) + ( src[i*16+11] * g_aiT16[11][2] ) + ( src[i*16+13] * g_aiT16[13][2] ) + ( src[i*16+15] * g_aiT16[15][2] ),
	             
	             ( src[i*16+1] * g_aiT16[1][3] ) + ( src[i*16+3]  * g_aiT16[3] [3] ) + ( src[i*16+5]  * g_aiT16[5] [3] ) + ( src[i*16+7]  * g_aiT16[7] [3] ) +
	             ( src[i*16+9] * g_aiT16[9][3] ) + ( src[i*16+11] * g_aiT16[11][3] ) + ( src[i*16+13] * g_aiT16[13][3] ) + ( src[i*16+15] * g_aiT16[15][3] ),
	             
	             ( src[i*16+1] * g_aiT16[1][4] ) + ( src[i*16+3]  * g_aiT16[3] [4] ) + ( src[i*16+5]  * g_aiT16[5] [4] ) + ( src[i*16+7]  * g_aiT16[7] [4] ) +
	             ( src[i*16+9] * g_aiT16[9][4] ) + ( src[i*16+11] * g_aiT16[11][4] ) + ( src[i*16+13] * g_aiT16[13][4] ) + ( src[i*16+15] * g_aiT16[15][4] ),
	             
	             ( src[i*16+1] * g_aiT16[1][5] ) + ( src[i*16+3]  * g_aiT16[3] [5] ) + ( src[i*16+5]  * g_aiT16[5] [5] ) + ( src[i*16+7]  * g_aiT16[7] [5] ) +
	             ( src[i*16+9] * g_aiT16[9][5] ) + ( src[i*16+11] * g_aiT16[11][5] ) + ( src[i*16+13] * g_aiT16[13][5] ) + ( src[i*16+15] * g_aiT16[15][5] ),
	             
	             ( src[i*16+1] * g_aiT16[1][6] ) + ( src[i*16+3]  * g_aiT16[3] [6] ) + ( src[i*16+5]  * g_aiT16[5] [6] ) + ( src[i*16+7]  * g_aiT16[7] [6] ) +
	             ( src[i*16+9] * g_aiT16[9][6] ) + ( src[i*16+11] * g_aiT16[11][6] ) + ( src[i*16+13] * g_aiT16[13][6] ) + ( src[i*16+15] * g_aiT16[15][6] ),
	             
	             ( src[i*16+1] * g_aiT16[1][7] ) + ( src[i*16+3]  * g_aiT16[3] [7] ) + ( src[i*16+5]  * g_aiT16[5] [7] ) + ( src[i*16+7]  * g_aiT16[7] [7] ) +
	             ( src[i*16+9] * g_aiT16[9][7] ) + ( src[i*16+11] * g_aiT16[11][7] ) + ( src[i*16+13] * g_aiT16[13][7] ) + ( src[i*16+15] * g_aiT16[15][7] )             
	            ];
	
	    dst[i*16+0 ] := clip_i32((even[0] + odd[0] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+1 ] := clip_i32((even[1] + odd[1] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+2 ] := clip_i32((even[2] + odd[2] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+3 ] := clip_i32((even[3] + odd[3] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+4 ] := clip_i32((even[4] + odd[4] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+5 ] := clip_i32((even[5] + odd[5] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+6 ] := clip_i32((even[6] + odd[6] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+7 ] := clip_i32((even[7] + odd[7] + rnd_factor ) >> shift, -32768, 32767 );	    
	    dst[i*16+8 ] := clip_i32((even[7] - odd[7] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+9 ] := clip_i32((even[6] - odd[6] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+10] := clip_i32((even[5] - odd[5] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+11] := clip_i32((even[4] - odd[4] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+12] := clip_i32((even[3] - odd[3] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+13] := clip_i32((even[2] - odd[2] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+14] := clip_i32((even[1] - odd[1] + rnd_factor ) >> shift, -32768, 32767 );
	    dst[i*16+15] := clip_i32((even[0] - odd[0] + rnd_factor ) >> shift, -32768, 32767 );
	 end
  end

end
