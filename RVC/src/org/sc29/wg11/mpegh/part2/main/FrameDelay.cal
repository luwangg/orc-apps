/*
 * Copyright (c) 2012, EPFL
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the EPFL nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package org.sc29.wg11.mpegh.part2.main;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

//Pipelined version broken
actor FrameDelay()
	
	uint(size=16) PicSize,
	uint(size=8)  SampleIn,
	uint(size=16) TilesCoord
		==>
	uint(size=8)  FiltSample
		:
	uint(size=16) numTiles;
	uint(size=16) tileIdx;
	uint(size=16) numPartition;
	uint(size=16) tilesBegSamp[MAX_NUM_TILES][2];
	uint(size=16) tilesEndSamp[MAX_NUM_TILES][2];
	uint(size=8)  lcuSizeMax;
	uint(size=16) picSize[2];
	uint(size=16) xIdx;
	uint(size=16) yIdx;
/*	uint(size=6)  lastXIdx;
	uint(size=6)  lastYIdx;*/
	uint(size=2)  compIdx;
	uint(size=16) xAddrVert;
	uint(size=16) yAddrVert;
	uint(size=16) numTokenPerLcu[2];
	uint(size=16) tokenSent;
	uint(size=16) pixAddr[2];
	uint(size=9)  blkIdx := 0;
	int(size=16) iLoop;
	
	uint(size=8)  pictureBuffer[3][PICT_WIDTH][PICT_HEIGHT];

	procedure computeNextLcuAddr()
	begin
		xIdx := xIdx + lcuSizeMax;
		if(xIdx >= tilesEndSamp[tileIdx][0]) then
			xIdx := tilesBegSamp[tileIdx][0];
			yIdx := yIdx + lcuSizeMax;
			if(yIdx >= tilesEndSamp[tileIdx][1]) then
				tileIdx := tileIdx + 1;
				xIdx := tilesBegSamp[tileIdx][0];
				yIdx := tilesBegSamp[tileIdx][1];
			end
		end
	end

	procedure saveRasterScanCu(uint(size=8) sample[4*4 + 2*2*2])
	var
		uint(size=16) pixAddr[2],
		uint tokenOffset
	begin
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
		foreach uint y in 0 .. 3
		do
			foreach uint x in 0 .. 3
			do
				pictureBuffer[0][pixAddr[0]+x][pixAddr[1]+y] :=
					sample[4*y+x];
			end
		end
		tokenOffset := 16;
		pixAddr[0]  := pixAddr[0]>>1;
		pixAddr[1]  := pixAddr[1]>>1;
		foreach uint comp in 1 .. 2
		do
			foreach uint y in 0 .. 1
			do
				foreach uint x in 0 .. 1
				do
					pictureBuffer[comp][pixAddr[0]+x][pixAddr[1]+y] :=
						sample[tokenOffset + 2*y+x];
				end
			end
			tokenOffset := tokenOffset + 4;
		end
	end

	isNewPict: action  PicSize:[picWidthInPix,picHeightInPix] ==>
	do
		//println("isnewPict");
		lcuSizeMax := 64;
		numPartition := 256;
		numTokenPerLcu[0] := lcuSizeMax * lcuSizeMax;
		numTokenPerLcu[1] := numTokenPerLcu[0] >> 2;
		picSize[0] := picWidthInPix;
		picSize[1] := picHeightInPix;

		xIdx := 0;
		yIdx := 0;
		tileIdx := 0;
	end

	getCuPix.launch.pict: action  ==>
	guard
		tileIdx < numTiles && yIdx < picSize[1]-lcuSizeMax && xIdx < picSize[0]-lcuSizeMax //&& isLcu = NEW_LCU
	do
		//println("getculunchpict");
		xAddrVert := xIdx;
		yAddrVert := yIdx;
		blkIdx := 0;
	end
	
	getNumTiles: action TilesCoord:[valNumTiles] ==>
	do
		numTiles := valNumTiles;
		iLoop := 0;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBegSamp[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEndSamp[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	getCuPix.launch.getPart: action SampleIn:[samp] repeat 4*4 + 2* 2*2 ==>
	guard
		blkIdx < numPartition
	var
		uint(size=16) coord[2] 	
	do
		//println("getCuPix.launch.getPart");
		saveRasterScanCu(samp);
//		

		zScanToAbsCoord(blkIdx, coord);
		coord[0] := xIdx + coord[0];
		coord[1] := yIdx + coord[1];

		blkIdx := blkIdx + 1;
	end

	getCuPix.launch.getPartDone: action ==>
	guard
		blkIdx = numPartition
	do
		//println("getcupixlaunchgetpartDone");
		/*lastXIdx := xIdx;
		lastYIdx := yIdx;*/
		computeNextLcuAddr();
	end

	getCuPix.launch.lastColOrRow.vert: action  ==>
	guard
		(xIdx >= picSize[0]-lcuSizeMax || yIdx >= picSize[1]-lcuSizeMax)// && FILT_VERT_EDGES //&& isLcu = NEW_LCU
	do
		//println("getCuPix.launch.lastColOrRow.vert");
		xAddrVert := xIdx;
		yAddrVert := yIdx;

		blkIdx := 0;
		zScanToAbsCoord(0, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end
	
	
	/*getCuPix.launch.lastColOrRow.hor: action IsPicSlcLcu:[isLcu], SampleIn:[samp] repeat 64*64 + 32*32*2 ==>
	guard
		(xIdx >= picSize[0]-1 || yIdx >= picSize[1]-1) && not FILT_VERT_EDGES && isLcu = NEW_LCU
	do
		xAddrVert := xIdx;
		yAddrVert := yIdx;
		saveZScanCu(samp);
		blkIdx := 0;
	end*/
	
	getBlk.skip.vertEdge: action ==>
	guard
		blkIdx < numPartition,//  && FILT_VERT_EDGES,
		pixAddr[0] >= picSize[0] || pixAddr[1] >= picSize[1]
	do
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end
	
	getBlk.launch: action  SampleIn:[samp] repeat 4*4 + 2*2*2 ==>
	guard
		blkIdx < numPartition && pixAddr[0] < picSize[0] && pixAddr[1] < picSize[1]
	do
		//println("getBlk.launch");
		foreach uint y in 0 .. 3
		do
			foreach uint x in 0 .. 3
			do
				pictureBuffer[0][pixAddr[0]+x][pixAddr[1]+y] :=
					samp[4*y+x];
			end
		end

		pixAddr[0]  := pixAddr[0]>>1;
		pixAddr[1]  := pixAddr[1]>>1;
		foreach uint comp in 1 .. 2
		do
			foreach uint y in 0 .. 1
			do
				foreach uint x in 0 .. 1
				do
					pictureBuffer[comp][pixAddr[0]+x][pixAddr[1]+y] :=
						samp[2*y+x + 16+4*(comp-1)];
				end
			end
		end

		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
		//println("blkIdx = " + blkIdx);
		//println("numPartition = " + numPartition);
		//println("pixAddr[0] = " + pixAddr[0]);
		//println("picSize[0] = " + picSize[0]);
		//println("pixAddr[1] = " + pixAddr[1]);
		//println("picSize[1] = " + picSize[1]);
		
	end


	getBlk.skip.horEdge: action SampleIn:[samp] repeat 4*4 + 2*2*2 ==>
	guard
		blkIdx < numPartition ,// && not FILT_VERT_EDGES,
		pixAddr[0] >= picSize[0] || pixAddr[1] >= picSize[1]
	do
		//println("getBlk.skip.horEdge");
		blkIdx := blkIdx + 1;
		zScanToAbsCoord(blkIdx, pixAddr);
		pixAddr[0] := pixAddr[0] + xAddrVert;
		pixAddr[1] := pixAddr[1] + yAddrVert;
	end

	getBlk.done: action ==>
	guard
		blkIdx = numPartition
	do
		//println("getBlk.done");
		/*lastXIdx := xIdx;
		lastYIdx := yIdx;*/
		computeNextLcuAddr();
	end

	getCuPix.done: action ==>
	guard
		tileIdx = numTiles
	do
		//println("getCuPix.done");
		/*lastXIdx := 0;
		lastYIdx := 0;*/
		tokenSent := 0;
		xIdx := 0;
		yIdx := 0;
		tileIdx := 0;
	end

	sendSamples.launch.luma: action ==> FiltSample:[filtSamp] repeat 16
	guard
		tileIdx < numTiles && tokenSent < numTokenPerLcu[0]//,
//		FILT_HOR_EDGES || xIdx != lastXIdx || yIdx != lastYIdx
	var
		uint(size=8) filtSamp[16],
		uint(size=16) xOff, uint(size=16) yOff
	do
		//println("sendSamples.launch.luma");
		xOff := tokenSent & (lcuSizeMax - 1);
		yOff := tokenSent / lcuSizeMax;
		foreach uint x in 0 .. 15
		do
			
				filtSamp[x] := pictureBuffer[0][xIdx + xOff + x][yIdx + yOff];
			
		end

		tokenSent := tokenSent + 16;
	end

	sendSamples.launch.lumaDone: action ==>
	guard
		tokenSent = numTokenPerLcu[0]
	do
		//println("sendSamples.launch.lumaDone");
		tokenSent := 0;
		compIdx := 1;
	end

	sendSamples.launch.chroma: action ==> FiltSample:[filtSamp] repeat 8
	guard
		compIdx < 3
	var
		uint(size=8) filtSamp[8],
		uint(size=16) xOff, uint(size=16) yOff
	do
		//println("sendSamples.launch.chroma");
		xOff := tokenSent & ((lcuSizeMax - 1) >> 1);
		yOff := tokenSent / (lcuSizeMax >> 1);
		foreach uint x in 0 .. 7
		do
			
				filtSamp[x] := pictureBuffer[compIdx][xIdx/2 + xOff + x][yIdx/2 + yOff];
			
		end

		tokenSent := tokenSent + 8;
		if(tokenSent = numTokenPerLcu[1]) then
			tokenSent := 0;
			compIdx := compIdx + 1;
		end
	end

	sendSamples.launch.chromaDone: action ==>
	guard
		compIdx = 3
	do
		//println("sendSamples.launch.chromaDone");
		tokenSent := 0;
		computeNextLcuAddr();
	end

	/*sendSamples.skip: action ==> 
	guard
		 xIdx = lastXIdx
	end*/

	sendSamples.done: action ==>
	guard
		tileIdx = numTiles
	do
		//println("sendSamples.done");
	end

	schedule fsm IsNewPict:
		IsNewPict (isNewPict )--> GetNumTiles;//lecture image

		GetCuPix  (getCuPix.launch.pict              )--> GetPartition;
		GetCuPix  (getCuPix.launch.lastColOrRow.vert )--> GetBlk;
//		GetCuPix  (getCuPix.launch.lastColOrRow.hor  )--> GetBs4Blk;
		GetCuPix  (getCuPix.done                     )--> SendSamples; //fin lecture image
		
		GetNumTiles   (getNumTiles          )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetCuPix;

		GetPartition (getCuPix.launch.getPart     )--> GetPartition;
		GetPartition (getCuPix.launch.getPartDone )--> GetCuPix;

		GetBlk (getBlk.launch )--> GetBlk;
		GetBlk (getBlk.skip   )--> GetBlk;
		GetBlk (getBlk.done   )--> GetCuPix;

		/*SendSamplesVert (sendSamples.launch )--> GetCuPix;
		SendSamplesVert (sendSamples.skip   )--> GetCuPix;*/

		SendSamples (sendSamples.launch.luma )--> SendSamplesLuma;//debut envoi frame
		SendSamples (sendSamples.done        )--> IsNewPict;//fin envoi frame

		SendSamplesLuma (sendSamples.launch.luma     )--> SendSamplesLuma;
		SendSamplesLuma (sendSamples.launch.lumaDone )--> SendSamplesChr;

		SendSamplesChr (sendSamples.launch.chroma     )--> SendSamplesChr;
		SendSamplesChr (sendSamples.launch.chromaDone )--> SendSamples;
	end
end