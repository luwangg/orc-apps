/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/
package org.sc29.wg11.mpegh.part2.main.inter;
import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;

unit DecodingPictureBufferFunctions :

	uint(size = 8) DPB_SIZE = 7; 
	
	uint(size = 16) BORDER_SIZE_LUM = 128;
	uint(size = 16) BORDER_SIZE_CHR = 64;
	
	uint DPB_LUM_HEIGHT = PICT_HEIGHT + 2 * BORDER_SIZE_LUM;
	uint DPB_LUM_WIDTH  = PICT_WIDTH  + 2 * BORDER_SIZE_LUM;
	uint DPB_CHR_HEIGHT = PICT_HEIGHT  / 2 + 2 * BORDER_SIZE_LUM;
	uint DPB_CHR_WIDTH  = PICT_WIDTH  / 2 + 2 * BORDER_SIZE_LUM;
	
	procedure computeMvOffsetLuma(
		int(size=32) mvOffset[2],
		int(size=32) mv[2],
		uint(size=16) picSize[2],
		uint(size=8) sideMax)
	begin
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 3 for each coordinate component, because for the luma
		 * prediction we need the 3 previous pixels
		 */
		mvOffset[0] := (mv[0] >> 2);
		mvOffset[0] := min(mvOffset[0], picSize[0]+3);
		mvOffset[0] := max(mvOffset[0], -(8 +3 -1) -(sideMax-1));
		mvOffset[0] := mvOffset[0] +BORDER_SIZE_LUM-3;
		mvOffset[1] := (mv[1] >> 2);
		mvOffset[1] := min(mvOffset[1], picSize[1]+3);
		mvOffset[1] := max(mvOffset[1], -(8 +3 -1) -(sideMax-1));
		mvOffset[1] := mvOffset[1] +BORDER_SIZE_LUM-3;
	end
	
	function computeMvHeightLuma(
		int(size=32) mv,
		uint(size=16) picSize,
		uint(size=8) sideMax)
		--> int(size=32) :
		max(min((mv >> 2), picSize+3), -(8 +3 -1) -(sideMax-1)) + BORDER_SIZE_LUM-3 + sideMax
	end
	
	procedure computeMvOffsetChroma(
		int(size=32) mvOffChr[2],
		int(size=32) mv[2],
		uint(size=16) picSize[2],
		uint(size=8) sideMaxChr)
	begin
		/* The mv components correspond to the absolute movement vector, that's
		 * why we don't need to add the address of the current Cu
		 */

		/* We remove 1 for each coordinate component, because for the chroma
		 * prediction we need the previous pixel
		 */
		mvOffChr[0] := (mv[0] >> 3);
		mvOffChr[0] := min(mvOffChr[0], picSize[0]/2+1);
		mvOffChr[0] := max(mvOffChr[0], -(4 +1 -1) -(sideMaxChr-1));
		mvOffChr[0] := mvOffChr[0] +BORDER_SIZE_CHR-1;
		mvOffChr[1] := (mv[1] >> 3);
		mvOffChr[1] := min(mvOffChr[1], picSize[1]/2+1);
		mvOffChr[1] := max(mvOffChr[1], -(4 +1 -1) -(sideMaxChr-1));
		mvOffChr[1] := mvOffChr[1] +BORDER_SIZE_CHR-1;
	end
	
	function computeMvHeightChroma(
		int(size=32) mv,
		uint(size=16) picSize,
		uint(size=8) sideMax)
		--> int(size=32) :
		max(min((mv >> 3), picSize/2+1), -(4 +1 -1) -(sideMax/2-1)) + BORDER_SIZE_CHR-1 + sideMax/2
	end

	//@optimize_c(condition="defined(SSE_ENABLE)", name="copy_cu_dpb_x64_orcc")
	procedure copy_cu_dpb_luma_x64_cal(
		uint(size= 8) samp[4096],
		uint(size= 8) pictureBuffer[DPB_SIZE][DPB_LUM_HEIGHT][DPB_LUM_WIDTH],
		int (size=32) xPixIdx,
		int (size=32) yPixIdx,
		int (size= 4) lastIdx,
		uint(size=16) width,
		uint(size=16) height)
	begin
		foreach int y in 0 .. 63
		do
			foreach int x in 0 .. 63
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*64];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="copy_cu_dpb_x32_orcc")
	procedure copy_cu_dpb_luma_x32_cal(
		uint(size= 8) samp[1024],
		uint(size= 8) pictureBuffer[DPB_SIZE][DPB_LUM_HEIGHT][DPB_LUM_WIDTH],
		int (size=32) xPixIdx,
		int (size=32) yPixIdx,
		int (size= 4) lastIdx,
		uint(size=16) width,
		uint(size=16) height)
	begin
		foreach int y in 0 .. 31
		do
			foreach int x in 0 .. 31
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*32];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="copy_cu_dpb_x16_orcc")
	procedure copy_cu_dpb_luma_x16_cal(
		uint(size= 8) samp[256],
		uint(size= 8) pictureBuffer[DPB_SIZE][DPB_LUM_HEIGHT][DPB_LUM_WIDTH],
		int (size=32) xPixIdx,
		int (size=32) yPixIdx,
		int (size= 4) lastIdx,
		uint(size=16) width,
		uint(size=16) height)
	begin
		foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*16];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="copy_cu_dpb_x32_orcc")
	procedure copy_cu_dpb_chroma_x64_cal(
		uint(size= 8) samp[1024],
		uint(size= 8) pictureBuffer[DPB_SIZE][DPB_CHR_HEIGHT][DPB_CHR_WIDTH],
		int (size=32) xPixIdx,
		int (size=32) yPixIdx,
		int (size= 4) lastIdx,
		uint(size=16) width,
		uint(size=16) height)
	begin
		foreach int y in 0 .. 31
		do
			foreach int x in 0 .. 31
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*32];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="copy_cu_dpb_x16_orcc")
	procedure copy_cu_dpb_chroma_x32_cal(
		uint(size= 8) samp[256],
		uint(size= 8) pictureBuffer[DPB_SIZE][DPB_CHR_HEIGHT][DPB_CHR_WIDTH],
		int (size=32) xPixIdx,
		int (size=32) yPixIdx,
		int (size= 4) lastIdx,
		uint(size=16) width,
		uint(size=16) height)
	begin
		foreach int y in 0 .. 15
		do
			foreach int x in 0 .. 15
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*16];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="copy_cu_dpb_x8_orcc")
	procedure copy_cu_dpb_chroma_x16_cal(
		uint(size= 8) samp[64],
		uint(size= 8) pictureBuffer[DPB_SIZE][DPB_CHR_HEIGHT][DPB_CHR_WIDTH],
		int (size=32) xPixIdx,
		int (size=32) yPixIdx,
		int (size= 4) lastIdx,
		uint(size=16) width,
		uint(size=16) height)
	begin
		foreach int y in 0 .. 7
		do
			foreach int x in 0 .. 7
			do
				pictureBuffer[lastIdx][yPixIdx+y][xPixIdx+x] := samp[x+y*8];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="fillBorder_luma_orcc")
	procedure fillBorder_luma_cal(
		uint(size=8) pictureBuffer[DPB_SIZE][DPB_LUM_HEIGHT][DPB_LUM_WIDTH],
		int(size=4) frameIdx,
		int xSize,
		int ySize,
		uint(size=16) borderSize)
	begin
		foreach int y in 0 .. borderSize - 1
		do
			foreach int x in borderSize .. xSize + borderSize - 1
			do
				pictureBuffer[frameIdx][y][x] :=
					pictureBuffer[frameIdx][borderSize][x];
				pictureBuffer[frameIdx][y+ySize+borderSize][x] :=
					pictureBuffer[frameIdx][ySize+borderSize-1][x];
			end
		end
		foreach int y in 0 .. ySize + 2*borderSize - 1
		do
			foreach int x in 0 .. borderSize - 1
			do
				pictureBuffer[frameIdx][y][x] :=
					pictureBuffer[frameIdx][y][borderSize];
				pictureBuffer[frameIdx][y][x+xSize+borderSize] :=
					pictureBuffer[frameIdx][y][xSize+borderSize-1];
			end
		end
	end
	
	@optimize_c(condition="defined(SSE_ENABLE)", name="fillBorder_chroma_orcc")
	procedure fillBorder_chroma_cal(
		uint(size=8) pictureBuffer[DPB_SIZE][DPB_CHR_HEIGHT][DPB_CHR_WIDTH],
		int frameIdx,
		int xSize,
		int ySize,
		int borderSize)
	begin
		foreach int x in borderSize .. xSize-1 + borderSize
		do
			foreach uint y in 0 .. borderSize - 1
			do
				pictureBuffer[frameIdx][y][x] :=
					pictureBuffer[frameIdx][borderSize][x];
				pictureBuffer[frameIdx][y+ySize+borderSize][x] :=
					pictureBuffer[frameIdx][ySize+borderSize-1][x];
			end
		end
		foreach int y in 0 .. ySize + 2 * borderSize - 1
		do
			foreach int x in 0 .. borderSize - 1
			do
				pictureBuffer[frameIdx][y][x] :=
					pictureBuffer[frameIdx][y][borderSize];
				pictureBuffer[frameIdx][y][x+xSize+borderSize] :=
					pictureBuffer[frameIdx][y][xSize+borderSize-1];
			end
		end
	end
	
end