/********************************************************************************

This software module was originally developed by 
Damien de Saint Jorre (EPFL), 
in the course of development of the ISO/IEC 23002-5 (Video Tool Library) 
for reference purposes and its performance may not have been optimized. 
This software module is an implementation of one or more tools as 
specified by the ISO/IEC 23002-5.

ISO/IEC gives You a royalty-free, worldwide, non-exclusive, copyright 
license to copy, distribute, and make derivative works of this software 
module or modifications thereof for use in implementations of the 
ISO/IEC 23002-5 in products that satisfy conformance criteria (if any). 

Those intending to use this software module in products are advised that 
its use may infringe existing patents. ISO/IEC have no liability for use 
of this software module or modifications thereof.

Copyright is not released for products that do not conform to audiovisual 
and image-coding related ITU Recommendations and/or ISO/IEC International 
Standards.

Assurance that the originally developed software module can be used 
(1) in the ISO/IEC 23002-5 once the ISO/IEC 23002-5 has been adopted; and 
(2) to develop the ISO/IEC 23002-5: 

EPFL grants ISO/IEC all rights necessary to 
include the originally developed software module or modifications thereof 
in the ISO/IEC 23002-5 and to permit ISO/IEC to offer You a royalty-free, 
worldwide, non-exclusive, copyright license to copy, distribute, and make 
derivative works for use in implementations of the ISO/IEC 23002-5 in 
products that satisfy conformance criteria (if any), and to the extent 
that such originally developed software module or portions of it are 
included in the ISO/IEC 23002-5.  To the extent that EPFL
owns patent rights that would be required to make, use, or 
sell the originally developed software module or portions thereof 
included in the ISO/IEC 23002-5 in a conforming product, EPFL
will assure the ISO/IEC that it is willing to 
negotiate licenses under reasonable and non-discriminatory terms and 
conditions with applicants throughout the world.

ISO/IEC gives You a free license to this software module or modifications 
thereof for the sole  purpose of developing theISO/IEC 23002-5

EPFL retains full right to modify and use the 
code for its own purpose, assign or donate the code to a third party and 
to inhibit third parties from using the code for products that do not 
conform to MPEG-related ITU Recommendations and/or ISO/IEC International 
Standards. 

This copyright notice must be included in all copies or derivative works. 
Copyright (c) ISO/IEC 2011-2014.
*****************************************************************************/

/**
 * Decoding process for intra blocks.
 * 
 * 
 * @input CUInfo : Informations related to the current CU
 *        (size, address and mode : INTRA,INTER,...).
 * 
 * @input IntraPredMode : Luma and chroma intra prediction mode for the
 *        current CU.
 * 
 * @input PartMode : Giving the partitioning mode of the current CU.
 * 
 * @input PicSize : Size of the current picture.
 * 
 * @input Sample : Value of the YUV components of every pixel from the pictures.
 *        The tokens correspond to the pixels of the non filtered picture.
 * 
 * @input SplitTransf : split_transform_flag syntax element.
 * 
 * 
 * @output PredSample : Pixel's values predicted from the intra prediction
 *         process.
 * 
 * 
 * @author Damien de Saint Jorre (EPFL) <damien.desaintjorre@epfl.ch>
 */
 
package org.sc29.wg11.mpegh.part2.main.intra;

import std.util.Math.*;
import org.sc29.wg11.mpegh.part2.common.CommonConstantHEVC.*;
import org.sc29.wg11.mpegh.part2.main.intra.IntraFunctions.*;

actor IntraPrediction(bool EnabSkipInPix)
	uint(size=16) CUInfo,
	uint(size=6)  IntraPredMode,
	uint(size=8)  LcuSizeMax,
	uint(size=4)  PartMode,
	uint(size=16) PictSize,
	uint(size=8)  Sample,
	uint(size=16) SliceAddr,
	bool          SplitTransform,
	bool 		  StrongIntraSmoothing,
	uint(size=16) TilesCoord
		==>
	uint(size=8) PredSample
		:

	uint(size=16) NEIGHB_TAB_SZ   = 2*PICT_WIDTH;
	uint(size=16) NEIGHB_TAB_MASK = 2*PICT_WIDTH-1;

	uint(size=6) INTRA_PLANAR = 0;
	uint(size=6) INTRA_DC = 1;

	uint(size=8) leftBlkAvail[256] =
	[0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,

	 8, 1, 7, 1, 2, 1, 1, 1, 6, 1, 5, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,

	 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 0, 1, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,

	 8, 1, 7, 1, 2, 1, 1, 1, 6, 1, 5, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1,
	 4, 1, 3, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1];

	uint(size=8) aboveBlkAvail[256] =
	[0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,

	 0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 0, 0, 2, 1, 0, 0, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,

	 16, 15, 2, 1, 14, 13, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 12, 11, 2, 1, 10,  9, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	  8,  7, 2, 1,  6,  5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	  4,  3, 2, 1,  2,  1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,

	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 8, 7, 2, 1, 6, 5, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1,
	 4, 3, 2, 1, 2, 1, 2, 1, 4, 3, 2, 1, 2, 1, 2, 1];

	int(size=16) iLoop;

	uint(size=16) numTiles;
	uint(size=16) tilesBeg[MAX_NUM_TILES][2];
	uint(size=16) tilesEnd[MAX_NUM_TILES][2];

	int(size=16) puTilesBeg[3][2];
	int(size=16) puTilesEnd[3][2];

	uint(size=7)  nS;
	uint(size=3)  log2NS;
	uint(size=16) cuAddr[2];
	uint(size=5)  cuMode;
	uint(size=16) treeAddr[2];
	uint(size=16) pictSize[3][2];
	uint(size=16) sliceAddr[3][2];
	uint(size=3)  numPart;
	uint(size=3)  numPartDecoded;

	bool strongIntraSmoothing;
	bool constrIntraPred;
	bool isIndepSlc;
	uint(size=8) maxLcuSizeLuma;
	uint(size=8) maxLcuSizeChr;

	uint(size=6) predMode;
	uint(size=6) predModeTab[3];
	int (size=4) trafoTreeDepth;
	uint(size=3) trafoTreeIdx[6];

	uint(size=8)  pNeighb_left[129];
	uint(size=8)  pNeighb_above[129];
	uint(size=8)  puNeighb[3][NEIGHB_TAB_SZ];
	bool          puIsIntra[3][NEIGHB_TAB_SZ];
	uint(size=7)  neighbBlkSz;

	uint(size=8) lumaComp[64*64];
	uint(size=8) chrComp_u[64*64];
	uint(size=8) chrComp_v[64*64];
	uint(size=9) numBlkToSend;
	uint(size=9) idxBlk;

	bool getInSamp;

	function absCoordToRasterScan(uint(size=16) coord[2]) --> int
	var
		uint(size=4) xCoordInBlk = coord[0]/4,
		uint(size=4) yCoordInBlk = coord[1]/4
	:
		if((xCoordInBlk & 1)!=0) then 1   else 0 end +
		if((xCoordInBlk & 2)!=0) then 4   else 0 end +
		if((xCoordInBlk & 4)!=0) then 16  else 0 end +
		if((xCoordInBlk & 8)!=0) then 64  else 0 end +
		if((yCoordInBlk & 1)!=0) then 2   else 0 end +
		if((yCoordInBlk & 2)!=0) then 8   else 0 end +
		if((yCoordInBlk & 4)!=0) then 32  else 0 end +
		if((yCoordInBlk & 8)!=0) then 128 else 0 end
	end

	procedure getNeighbSamples(uint(size=16) cuAddr[2], uint(size=2) cIdx, uint(size=7) nS, uint(size=3) log2NS)
	var
		int minVal[2], int maxVal[2],
		int xMin, int yMin, int xMax, int yMax,
		int xIdx, int yIdx,
		int origPixIdx,
		uint(size=8) pixVal
	begin
		neighbExist(cuAddr, minVal, maxVal, cIdx, nS);
		xMin := minVal[0];
		yMin := minVal[1];
		xMax := maxVal[0];
		yMax := maxVal[1];
		
		origPixIdx := pictSize[cIdx][1] - cuAddr[1] + cuAddr[0];
		foreach int y in yMin .. yMax - 1 do
			pNeighb_left[y + 1] := puNeighb[cIdx][(origPixIdx - 1 - y) &
			NEIGHB_TAB_MASK];
		end
		foreach int x in xMin .. xMax - 1 do
			pNeighb_above[x] := puNeighb[cIdx][(origPixIdx + 1 + x - 1) &
			NEIGHB_TAB_MASK];
		end
		pNeighb_left[0] := pNeighb_above[0];
		if (constrIntraPred) then
			if (yMax = 0 || not puIsIntra[cIdx][(origPixIdx - 1 - (yMax - 1)) &
			NEIGHB_TAB_MASK]) then
				pixVal := 128;
				xIdx := xMax - 1;
				while (xIdx >= xMin) do
					if (puIsIntra[cIdx][(origPixIdx + 1 + xIdx - 1) & NEIGHB_TAB_MASK]) then
						pixVal := pNeighb_above[xIdx];
					end
					xIdx := xIdx - 1;
				end
				if (puIsIntra[cIdx][origPixIdx & NEIGHB_TAB_MASK]) then
					pixVal := pNeighb_left[0];
				end
				foreach int y in yMin .. yMax - 2 do
					if (puIsIntra[cIdx][(origPixIdx - 1 - y) & NEIGHB_TAB_MASK]) then
						pNeighb_left[y + 1] := pNeighb_left[y + 2];
					end
				end
				pNeighb_left[yMax - 1 + 1] := pixVal;
			end
			yIdx := yMax - 2;
			while (yIdx >= yMin) do
				if (not puIsIntra[cIdx][(origPixIdx - 1 - yIdx) & NEIGHB_TAB_MASK]) then
					pNeighb_left[yIdx + 1] := pNeighb_left[yIdx + 2];
				end
				yIdx := yIdx - 1;
			end
			if (not puIsIntra[cIdx][origPixIdx & NEIGHB_TAB_MASK]) then
				pNeighb_left[0] := pNeighb_left[1];
				pNeighb_above[0] := pNeighb_left[1];
			end
			foreach int x in xMin .. xMax - 1 do
				if (not puIsIntra[cIdx][(origPixIdx + 1 + x) & NEIGHB_TAB_MASK]) then
					pNeighb_above[x + 1] := pNeighb_above[x];
				end
			end
		end
		
		if (yMax != yMin) then
			foreach int y in 0 .. yMin - 1 do
				pNeighb_left[y + 1] := pNeighb_left[yMin + 1];
			end
			foreach int y in yMax .. 2 * nS - 1 do
				pNeighb_left[y + 1] := pNeighb_left[yMax - 1 + 1];
			end
		end

		if (xMax != xMin) then
			foreach int x in 0 .. xMin - 1 do
				pNeighb_above[x] := pNeighb_left[0 + 1];
			end
			foreach int x in xMax .. 2 * nS do
				pNeighb_above[x] := pNeighb_above[xMax - 1];
			end
		end

/* When the neighbours are not available, the nearest valid value is
* propagated to the other neighbours
*/
		if (xMax = xMin && yMax = yMin) then
			foreach int idx in 0 .. 2 * nS do
				pNeighb_above[idx] := 128;
				pNeighb_left[idx] := 128;
			end
		else
			if (xMax = xMin && yMax != yMin) then
				foreach int x in 0 .. 2 * nS do
					pNeighb_above[x] := pNeighb_left[0 + 1];
				end
			else
				if (xMax != xMin && yMax = yMin) then
					foreach int y in 0 .. 2 * nS - 1 do
						pNeighb_left[y + 1] := pNeighb_above[0 + 1];
					end
					pNeighb_above[0] := pNeighb_above[0 + 1];
				else
					if (xMin != 0 || yMin != 0) then
						pNeighb_above[0] := pNeighb_left[0 + 1];
					else
						if (not constrIntraPred) then
							pNeighb_above[0] := puNeighb[cIdx][origPixIdx & NEIGHB_TAB_MASK];
						end
					end
				end
			end
		end
		if (cIdx = 0) then
			filterNeighbSamp(nS, log2NS);
		end
	end



	/* Check if the neighbours are available. maxVal contained either 2*nS or
	 * the index of the first pixel unavailable.
	 */
	procedure neighbExist(uint(size=16) cuAddr[2], int minVal[2], int maxVal[2], int cIdx,
		uint(size=7) nS)
	var
		uint(size=7) maxCuSize = if(cIdx=0) then maxLcuSizeLuma else maxLcuSizeChr end,
		int xMin := 0, int yMin := 0, int xMax := 0, int yMax := 0,
		int numPixRemain
	begin
		if(cuAddr[0]!=0) then
			numPixRemain :=
				if((cuAddr[0]&~(maxCuSize-1)) =
					((cuAddr[0]-1)&~(maxCuSize-1))) then
					leftBlkAvail[absCoordToRasterScan(cuAddr)]<<2
				else
					maxCuSize-(cuAddr[1]&(maxCuSize-1))
				end;
			yMax := min(min(2*nS, numPixRemain), pictSize[cIdx][1]-cuAddr[1]);
			if(isIndepSlc) then
				if(cuAddr[0] <= sliceAddr[cIdx][0]) then
					if(sliceAddr[cIdx][1]+maxCuSize>cuAddr[1]+2*nS)then
						yMin := yMax;
					else if(sliceAddr[cIdx][1]+maxCuSize>cuAddr[1]) then
						yMin := sliceAddr[cIdx][1] + maxCuSize - cuAddr[1];
					end end
				else
					if(sliceAddr[cIdx][1]>cuAddr[1]+2*nS) then
						yMin := yMax;
					else if(sliceAddr[cIdx][1]>cuAddr[1]) then
						yMin := sliceAddr[cIdx][1] - cuAddr[1];
					end end
				end
			end
			if(puTilesBeg[cIdx][0] > cuAddr[0]-1) then
				yMin := yMax;
			else
				if(puTilesBeg[cIdx][1] - cuAddr[1] > yMin) then
					yMin := max(puTilesBeg[cIdx][1] - cuAddr[1] + 1, yMin);
				end
				if(puTilesEnd[cIdx][1] - cuAddr[1] < yMax) then
					yMax := min(puTilesEnd[cIdx][1] - cuAddr[1] + 1, yMax);
				end
			end
		end

		if(cuAddr[1]!=0) then
			numPixRemain :=
				if((cuAddr[1]&~(maxCuSize-1)) =
					((cuAddr[1]-1)&~(maxCuSize-1))) then
					min( aboveBlkAvail[absCoordToRasterScan(cuAddr)]<<2,
						pictSize[cIdx][0]-cuAddr[0])
				else
					pictSize[cIdx][0]-cuAddr[0]
				end;
			xMax := min(2*nS, numPixRemain)+1;
			if(isIndepSlc) then
				if(cuAddr[1] = sliceAddr[cIdx][1]) then
					xMin := xMax;
				else if((cuAddr[1] = sliceAddr[cIdx][1]+maxCuSize) && (cuAddr[0]-1<sliceAddr[cIdx][0])) then
					if(sliceAddr[cIdx][0]>cuAddr[0]+2*nS) then
						xMin := xMax;
					else if(sliceAddr[cIdx][0]>cuAddr[0]-1) then
						xMin := sliceAddr[cIdx][0]-cuAddr[0]+1;
					end end
				end end
			end
			if(puTilesBeg[cIdx][1] > cuAddr[1]-1) then
				xMin := xMax;
			else
				if(puTilesBeg[cIdx][0] - cuAddr[0] > xMin) then
					xMin := max(puTilesBeg[cIdx][0] - cuAddr[0] + 1, xMin);
				end
				if(puTilesEnd[cIdx][0] - cuAddr[0] < xMax) then
					xMax := min(puTilesEnd[cIdx][0] - cuAddr[0] + 1, xMax);
				end
			end
		end

		maxVal[0] := xMax;
		maxVal[1] := yMax;
		minVal[0] := xMin;
		minVal[1] := yMin;
	end

	/* Filtering process of neighbouring sample. */
	procedure filterNeighbSamp(uint(size=7) nS, uint(size=3) log2NS)
	var
		uint bitDepthY = 8,
		uint threshold = 1 << (bitDepthY - 5),
		uint(size=8) bottomLeft = pNeighb_left[2 * nS],
		uint(size=8) topLeft = pNeighb_above[0],
		uint(size=8) topRight = pNeighb_above[2 * nS],
		uint(size=8) edgePix [ 2 ] = [ topRight, bottomLeft ],
		bool bilinearLeft,
		bool bilinearAbove,
		uint(size=5) minDistVertHor,
		uint(size=8) pFNeighb [ 2 ] [ 64 ]
	begin
		if (predMode != INTRA_DC) then
			minDistVertHor := min(abs(predMode - 26), abs(predMode - 10));
			if (nS = 4 && minDistVertHor > 10 || nS = 8 && minDistVertHor > 7 || nS =
			16 && minDistVertHor > 1 || nS = 32 && minDistVertHor > 0 || nS = 64 &&
			minDistVertHor > 10) then
				if (strongIntraSmoothing) then
					bilinearLeft := abs(bottomLeft + topLeft - 2 * pNeighb_left[nS]) <
					threshold;
					bilinearAbove := abs(topLeft + topRight - 2 * pNeighb_above[nS]) <
					threshold;
					if (nS >= 32 && bilinearLeft && bilinearAbove) then
						foreach uint neighb in 0 .. 1 do
							foreach uint i in 1 .. nS * 2 - 1 do
								pFNeighb[neighb][i] := ((2 * nS - i) * topLeft + i * edgePix[neighb] +
								nS) >> log2NS + 1;
							end
						end
						foreach uint i in 1 .. nS * 2 - 1 do
							pNeighb_above[i] := pFNeighb[0][i];
							pNeighb_left[i] := pFNeighb[1][i];
						end
					else
						pFNeighb[0][0] := (pNeighb_above[0] + 2 * pNeighb_above[0 + 1] +
						pNeighb_above[1 + 1] + 2) >> 2;
						pFNeighb[1][0] := (pNeighb_above[0] + 2 * pNeighb_left[0 + 1] +
						pNeighb_left[1 + 1] + 2) >> 2;
						foreach uint i in 1 .. nS * 2 - 2 do
							pFNeighb[0][i] := (pNeighb_above[i - 1 + 1] + 2 * pNeighb_above[i + 1]
							+ pNeighb_above[i + 1 + 1] + 2) >> 2;
							pFNeighb[1][i] := (pNeighb_left[i - 1 + 1] + 2 * pNeighb_left[i + 1] +
							pNeighb_left[i + 1 + 1] + 2) >> 2;
						end
						pNeighb_above[0] := (pNeighb_left[0 + 1] + 2 * pNeighb_above[0] +
						pNeighb_above[0 + 1] + 2) >> 2;
						foreach uint i in 0 .. nS * 2 - 2 do
							pNeighb_above[i + 1] := pFNeighb[0][i];
							pNeighb_left[i + 1] := pFNeighb[1][i];
						end
					end
				else
					pFNeighb[0][0] := (pNeighb_above[0] + 2 * pNeighb_above[0 + 1] +
					pNeighb_above[1 + 1] + 2) >> 2;
					pFNeighb[1][0] := (pNeighb_above[0] + 2 * pNeighb_left[0 + 1] +
					pNeighb_left[1 + 1] + 2) >> 2;
					foreach uint i in 1 .. nS * 2 - 2 do
						pFNeighb[0][i] := (pNeighb_above[i - 1 + 1] + 2 * pNeighb_above[i + 1] +
						pNeighb_above[i + 1 + 1] + 2) >> 2;
						pFNeighb[1][i] := (pNeighb_left[i - 1 + 1] + 2 * pNeighb_left[i + 1] +
						pNeighb_left[i + 1 + 1] + 2) >> 2;
					end
					pNeighb_above[0] := (pNeighb_left[0 + 1] + 2 * pNeighb_above[0] +
					pNeighb_above[0 + 1] + 2) >> 2;
					foreach uint i in 0 .. nS * 2 - 2 do
						pNeighb_above[i + 1] := pFNeighb[0][i];
						pNeighb_left[i + 1] := pFNeighb[1][i];
					end
				end
			end
		end
	end

	/* Implementation of Intra_DC prediction mode. */
	procedure intraDcPred(uint(size=2) cIdx, uint(size=7) nS, uint(size=3) log2NS)
	var
		uint(size=1) minVal,
		uint(size=13) dcVal
	begin
		dcVal := nS;
		foreach uint x in 0 .. nS - 1 do
			dcVal := dcVal + pNeighb_above[x + 1];
		end
		foreach uint y in 0 .. nS - 1 do
			dcVal := dcVal + pNeighb_left[y + 1];
		end
		dcVal := dcVal >> (log2NS + 1);
		if (cIdx = 0) then // Luma component
			minVal := if (nS > 16) then
				0
			else
				1
			end;
			if (nS <= 16) then
				lumaComp[0] := (pNeighb_left[0 + 1] + 2 * dcVal + pNeighb_above[0 + 1] +
				2) >> 2;
				foreach uint x in 1 .. nS - 1 do
					lumaComp[x] := (pNeighb_above[x + 1] + 3 * dcVal + 2) >> 2;
				end
				foreach uint y in 1 .. nS - 1 do
					lumaComp[y * 64] := (pNeighb_left[y + 1] + 3 * dcVal + 2) >> 2;
				end
			end
			foreach uint y in minVal .. nS - 1 do
				foreach uint x in minVal .. nS - 1 do
					lumaComp[x + 64 * y] := dcVal;
				end
			end
		else // Chroma component
			foreach uint y in 0 .. nS - 1 do
				foreach uint x in 0 .. nS - 1 do
					if cIdx = 1 then
						chrComp_u[x + 32 * y] := dcVal;
					else
						chrComp_v[x + 32 * y] := dcVal;
					end
				end
			end
		end
	end

	/* Updating the picture size. */
	isNewSliceOrPict.notDep: action PartMode:[partMode], LcuSizeMax:[log2_lcuSz],
		PictSize:[pictSizeVal] repeat 2, SliceAddr:[slcAddr] repeat 2,
		StrongIntraSmoothing:[smoothing, constrIntra],
		TilesCoord:[valNumTiles] ==>
	guard
		partMode = PART_MODE_SLICE_INDEP ||
		partMode = PART_MODE_PICT
	do
		sliceAddr[0] := [slcAddr[i]:for int i in 0 .. 1];
		sliceAddr[1] := [slcAddr[i]>>1:for int i in 0 .. 1];
		sliceAddr[2] := [slcAddr[i]>>1:for int i in 0 .. 1];
		pictSize[0] := [pictSizeVal[i]:for int i in 0 .. 1];
		pictSize[1] := [pictSizeVal[i]>>1:for int i in 0 .. 1];
		pictSize[2] := [pictSizeVal[i]>>1:for int i in 0 .. 1];
		strongIntraSmoothing := smoothing;
		constrIntraPred := constrIntra;
		isIndepSlc := partMode = PART_MODE_SLICE_INDEP;
		numTiles := valNumTiles;
		iLoop := 0;
		maxLcuSizeLuma := 1 << log2_lcuSz;
		maxLcuSizeChr := maxLcuSizeLuma >> 1;
	end

	/* Updating the picture size. */
	isNewSliceOrPict.dep: action PartMode:[partMode], SliceAddr:[slcAddr] repeat 2,
		StrongIntraSmoothing:[smoothing, constrIntra]==>
	guard
		partMode = PART_MODE_SLICE_DEP
	do
		sliceAddr[0] := [slcAddr[i]:for int i in 0 .. 1];
		sliceAddr[1] := [slcAddr[i]>>1:for int i in 0 .. 1];
		sliceAddr[2] := [slcAddr[i]>>1:for int i in 0 .. 1];
		strongIntraSmoothing := smoothing;
		constrIntraPred := constrIntra;
		isIndepSlc := partMode = PART_MODE_SLICE_INDEP;
	end

	getTilesCoord.launch: action TilesCoord:[tilesCoord] repeat 4 ==>
	guard
		iLoop < numTiles
	do
		tilesBeg[iLoop] := [tilesCoord[0], tilesCoord[1]];
		tilesEnd[iLoop] := [tilesCoord[2], tilesCoord[3]];
		iLoop := iLoop + 1;
	end

	getTilesCoord.done: action ==>
	guard
		iLoop = numTiles
	end

	/* Check when there are two parts in the CU.  */
	getPartMode.isNonQuadTree: action PartMode:[partMode] ==>
	guard
		partMode != PART_MODE_SLICE_DEP && partMode != PART_MODE_SLICE_INDEP &&
		partMode != PART_MODE_PICT,
		partMode != PART_2Nx2N && partMode != PART_NxN
	end

	/* Check if all parts of the CU are a square. */
	getPartMode.isQuadTree: action PartMode:[partMode] ==>
	guard
		partMode = PART_2Nx2N || partMode = PART_NxN
	do
		numPart := partModeToNumPart[partMode];
		numPartDecoded := 0;
	end

	/* Get the information concerning the CU to be able to save the values in
	 * currPict.
	 */
	getCuInfo.launch: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart,
		not EnabSkipInPix || cuInfo[0] != IN_SAMP
	do
		cuMode := cuInfo[0];
		getInSamp := true;
		if(EnabSkipInPix && (cuMode & NO_IN_SAMP) != 0) then
			getInSamp := false;
			cuMode := cuMode - NO_IN_SAMP;
		end
		nS := cuInfo[3];
		cuAddr := [cuInfo[1], cuInfo[2]];
		numPartDecoded := numPartDecoded + 1;
	end

	/* Get the information concerning the CU to be able to save the values in
	 * currPict.
	 */
	getCuInfo.getInSamp: action CUInfo:[cuInfo] repeat 5 ==>
	guard
		numPartDecoded < numPart,
		EnabSkipInPix && cuInfo[0] = IN_SAMP
	var
		uint(size=7) nS = cuInfo[3]
	do
		getInSamp := true;
		treeAddr := [cuInfo[1], cuInfo[2]];
		idxBlk := 0;
		numBlkToSend := (nS*nS)/16;
		neighbBlkSz  := nS;
		numPartDecoded := numPartDecoded + 1;
	end

	/* When there are two parts, we get both part in once in order to perform a
	 * raster scan on the square (the SelectCU actor reorder the different
	 * blocks)
	 */
	getCuInfo.nonQT.isInter: action CUInfo:[cuInfo] repeat 10 ==>
	do
		cuMode := cuInfo[0];
		getInSamp := true;
		if(EnabSkipInPix && (cuMode & NO_IN_SAMP) != 0) then
			getInSamp := false;
			cuMode := cuMode - NO_IN_SAMP;
		end
		nS := max(cuInfo[3], cuInfo[4]);
		idxBlk := 0;
		numBlkToSend := nS*nS/16;
		neighbBlkSz  := nS;
		treeAddr := [cuInfo[1], cuInfo[2]];
		numPart := 2;
		numPartDecoded := 2;
		trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
	end

	getCuInfo.done: action ==>
	guard
		numPartDecoded = numPart
	end

	/* When it's an intra CU, getting the intra prediction mode for chroma and luma component. */
	getCuMode.isIntra: action IntraPredMode:[predMode] repeat 2 ==>
	guard
		cuMode = INTRA
	do
		foreach int tileIdx in 0 .. numTiles - 1
		do
			if(cuAddr[0] >= tilesBeg[tileIdx][0] && cuAddr[0] < tilesEnd[tileIdx][0] &&
			   cuAddr[1] >= tilesBeg[tileIdx][1] && cuAddr[1] < tilesEnd[tileIdx][1]) then
			   	puTilesBeg[0] := [tilesBeg[tileIdx][0], tilesBeg[tileIdx][1]];
				puTilesBeg[1] := [puTilesBeg[0][0]/2, puTilesBeg[0][1]/2];
				puTilesBeg[2] := [puTilesBeg[1][0], puTilesBeg[1][1]];

			   	puTilesEnd[0] := [tilesEnd[tileIdx][0], tilesEnd[tileIdx][1]];
			   	puTilesEnd[1] := [puTilesEnd[0][0] / 2, puTilesEnd[0][1] / 2];
			   	puTilesEnd[2] := [puTilesEnd[1][0], puTilesEnd[1][1]];
			 end
		end

		predModeTab[0] := predMode[0];
		predModeTab[1] := predMode[1];
		predModeTab[2] := predMode[1];

		log2NS := 2;
		while((1<<log2NS) < nS)
		do
			log2NS := log2NS+1;
		end
		trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
	end

	/* Check if it's an inter prediction, then the pixels sent will be saved in
	 * currPict.
	 */
	getCuMode.isInter: action ==>
	guard
		cuMode = INTER || cuMode = SKIP
	do
		idxBlk := 0;
		numBlkToSend := nS*nS/16;
		neighbBlkSz  := nS;
		treeAddr := [cuAddr[i]: for int i in 0 .. 1];
		trafoTreeDepth  := 0;
		trafoTreeIdx[0] := 3;
	end

	/* When it's neither an intra nor inter prediction CU, do neither
	 * prediction nor saving pixels' value
	 */
	getCuMode.isOther: action ==>
	guard
		cuMode = OTHER
	end

	/* Check if the intra prediction CU has to be split in 4 "subCU" */
	getSplitTrafo.isTrue: action SplitTransform:[splitTrafo] ==>
	guard
		splitTrafo && trafoTreeDepth>-1
	do
		trafoTreeDepth := trafoTreeDepth + 1;
		trafoTreeIdx[trafoTreeDepth] := 0;
	end

	/* Check if the intra prediction will not be split again, then realize the
	 * prediction for this part of CU
	 */
	getSplitTrafo.isFalse: action SplitTransform:[splitTrafo] ==>
	guard
		not splitTrafo && trafoTreeDepth>-1
	var
		uint(size=2)  cIdxMax,
		uint(size=7)  treeNS,
		uint(size=3)  treeLog2NS,
		uint(size=16) locAddr[2],
		uint(size=3)  off[2],
		int stride := 64
	do
		/* Computing the size and the address of the current block. */
		treeLog2NS := log2NS - trafoTreeDepth;
		treeNS := nS;
		treeAddr := [cuAddr[i]: for int i in 0 .. 1];
		foreach uint idx in 1 .. trafoTreeDepth
		do
			treeNS := treeNS >> 1;
			if((trafoTreeIdx[idx]&1) != 0) then
				treeAddr[0] := treeAddr[0] + treeNS;
			end
			if((trafoTreeIdx[idx]&2) != 0) then
				treeAddr[1] := treeAddr[1] + treeNS;
			end
		end

		numBlkToSend := treeNS*treeNS/16;
		neighbBlkSz  := treeNS;
		idxBlk := 0;

		/* Chroma component are not split if we get a 2x2 block (this problem
		 * appear with YUV420)
		 */
		if(treeLog2NS != 2) then
			cIdxMax := 3;
		else
			/* In this case, we interpolate chroma component only once*/
			if((treeAddr[0]&7) = 0 && (treeAddr[1]&7) = 0) then
				cIdxMax := 3;
			else
				cIdxMax := 1; // Computation will be only for luma component.
			end
		end
		locAddr := [treeAddr[i]:for int i in 0 .. 1];
		foreach uint cIdx in 0 .. cIdxMax-1
		do
			predMode := predModeTab[cIdx];
			if(cIdx = 1) then // chroma component.
				if(treeLog2NS != 2) then
					/* 2x2 blocks are forbidden */
					treeNS := treeNS >> 1;
					treeLog2NS := treeLog2NS - 1;
				end
				locAddr[0] := locAddr[0] >> 1;
				locAddr[1] := locAddr[1] >> 1;
				stride := 32;
			end

			getNeighbSamples(locAddr, cIdx, treeNS, treeLog2NS);
			pNeighb_left[0] := pNeighb_above[0];
			if (cIdx = 0) then
				if(predMode = INTRA_PLANAR) then
					intraPlanarPred(lumaComp, pNeighb_above, pNeighb_left, stride, treeLog2NS);
				elsif(predMode = INTRA_DC) then
					intraDcPred(cIdx, treeNS, treeLog2NS);
				else
					intraAngularPred(lumaComp, pNeighb_above, pNeighb_left, stride, cIdx, predMode, treeLog2NS);
				end
			elsif(cIdx = 1) then
				if(predMode = INTRA_PLANAR) then
					intraPlanarPred(chrComp_u, pNeighb_above, pNeighb_left, stride, treeLog2NS);
				elsif(predMode = INTRA_DC) then
					intraDcPred(cIdx, treeNS, treeLog2NS);
				else
					intraAngularPred(chrComp_u, pNeighb_above, pNeighb_left, stride, cIdx, predMode, treeLog2NS);
				end
			else
				if(predMode = INTRA_PLANAR) then
					intraPlanarPred(chrComp_v, pNeighb_above, pNeighb_left, stride, treeLog2NS);
				elsif(predMode = INTRA_DC) then
					intraDcPred(cIdx, treeNS, treeLog2NS);
				else
					intraAngularPred(chrComp_v, pNeighb_above, pNeighb_left, stride, cIdx, predMode, treeLog2NS);
				end
			end
		end

		
		if(cIdxMax=1) then
			/* When we have 4x4 luma blocks, the chroma block corresponding to
			 * the luma one is copied at the begining of result in order to be
			 * sent (this block might have been computed beforehand).
			 */
			off := [(treeAddr[i]>>1)&2: for int i in 0 .. 1];
			if(off[0]!=0 || off[1]!=0) then
				foreach uint comp in 0 .. 1
				do
					foreach int y in 0 .. 1
					do
						foreach int x in 0 .. 1
						do
							chrComp_u[x + y * 32] := chrComp_u[(x+off[0]) + 32 * (y+off[1])];
							chrComp_v[x + y * 32] := chrComp_v[(x+off[0]) + 32 * (y+off[1])];
						end
					end
				end
			end
		end

		/* going to the next "branch of the tree" */
		trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
		/* Replace by (trafoTreeDepth > -1 && trafoTreeIdx[trafoTreeDepth] = 4) when orcc's simulator
		 * support short-circuit evaluation.
		 */
		while(if trafoTreeDepth>= 0 then (trafoTreeIdx[trafoTreeDepth] = 4) else false end)
		do
			trafoTreeDepth := trafoTreeDepth - 1;
			if(trafoTreeDepth>-1) then
				trafoTreeIdx[trafoTreeDepth] :=
					trafoTreeIdx[trafoTreeDepth] + 1;
			end
		end
	end

	getSplitTrafo.isInter: action SplitTransform:[splitTrafo] ==>
	guard
		trafoTreeDepth>-1
	do
		if(splitTrafo) then
			trafoTreeDepth := trafoTreeDepth + 1;
			trafoTreeIdx[trafoTreeDepth] := 0;
		else
			trafoTreeIdx[trafoTreeDepth] := trafoTreeIdx[trafoTreeDepth] + 1;
			while(trafoTreeDepth > -1 && if trafoTreeDepth>= 0 then (trafoTreeIdx[trafoTreeDepth] = 4) else false end)
			do
				trafoTreeDepth := trafoTreeDepth - 1;
				if(trafoTreeDepth>-1) then
					trafoTreeIdx[trafoTreeDepth] :=
						trafoTreeIdx[trafoTreeDepth] + 1;
				end
			end
		end
	end

	getSplitTrafo.done: action ==>
	guard
		trafoTreeDepth = -1
	end

	/* Sending One 4x4 luma blocks and the corresponding chroma values. */
	sendSamples.launch: action ==> PredSample:[sampleVal] repeat 16 + 2*4
	guard
		idxBlk < numBlkToSend
	var
		uint(size=8) sampleVal[16 + 2*4],
		uint(size=7) idxSample := 0,
		uint(size=16) blkAddr[2]
	do
		zScanToAbsCoord(idxBlk, blkAddr);

		foreach uint y in blkAddr[1] .. blkAddr[1]+3
		do
			foreach uint x in blkAddr[0] .. blkAddr[0]+3
			do
				sampleVal[idxSample] := lumaComp[x + y * 64];
				idxSample := idxSample + 1;
			end
		end
		blkAddr[0] := blkAddr[0]>>1;
		blkAddr[1] := blkAddr[1]>>1;
		
		foreach uint y in blkAddr[1] .. blkAddr[1] + 1 do
			foreach uint x in blkAddr[0] .. blkAddr[0] + 1 do
				sampleVal[idxSample] := chrComp_u[x + 32 * y];
				idxSample := idxSample + 1;
			end
		end
		foreach uint y in blkAddr[1] .. blkAddr[1] + 1 do
			foreach uint x in blkAddr[0] .. blkAddr[0] + 1 do
				sampleVal[idxSample] := chrComp_v[x + 32 * y];
				idxSample := idxSample + 1;
			end
		end
		idxBlk := idxBlk + 1;
	end

	sendSamples.done: action ==>
	guard
		idxBlk = numBlkToSend
	do
		idxBlk := 0;
	end

	/* Getting One 4x4 luma blocks and the corresponding chroma values. */
	getSamples.launch: action Sample:[sample] repeat 16 + 2*4 ==>
	guard
		idxBlk < numBlkToSend && (not EnabSkipInPix || getInSamp)
	var
		uint(size=16) blkAddr[2],
		bool bottomBlk := false,
		bool leftBlk := false,
		uint(size=5) sampOff := 16,
		uint(size=16) tabIdx
	do
		zScanToAbsCoord(idxBlk, blkAddr);

		if(blkAddr[0]+4>=neighbBlkSz) then
			leftBlk := true;
		end
		if(blkAddr[1]+4>=neighbBlkSz) then
			bottomBlk := true;
		end
		blkAddr[0] := blkAddr[0] + treeAddr[0];
		blkAddr[1] := blkAddr[1] + treeAddr[1];

		if(bottomBlk) then
			foreach uint x in 0 .. 3
			do
				tabIdx := pictSize[0][1] - (blkAddr[1] + 3) + blkAddr[0] + x;
				puNeighb[0][tabIdx] := sample[4*3+x];
				puIsIntra[0][tabIdx]   := cuMode = INTRA;
			end
		end

		if(leftBlk) then
			foreach uint y in 0 .. 3
			do
				tabIdx := pictSize[0][1] - (blkAddr[1] + y) + blkAddr[0] + 3;
				puNeighb[0][tabIdx] := sample[4*y+3];
				puIsIntra[0][tabIdx]   := cuMode = INTRA;
			end
		end
		
		blkAddr[0] := blkAddr[0]>>1;
		blkAddr[1] := blkAddr[1]>>1;

		foreach uint comp in 1 .. 2
		do
			if(bottomBlk) then
				foreach uint x in 0 .. 1
				do
					tabIdx := pictSize[1][1] - (blkAddr[1] + 1) + blkAddr[0] + x;
					puNeighb[comp][tabIdx]  := sample[2*1+x+sampOff];
					puIsIntra[comp][tabIdx] := cuMode = INTRA;
				end
			end
	
			if(leftBlk) then
				foreach uint y in 0 .. 1
				do
					tabIdx := pictSize[1][1] - (blkAddr[1] + y) + blkAddr[0] + 1;
					puNeighb[comp][tabIdx]  := sample[2*y+1+sampOff];
					puIsIntra[comp][tabIdx] := cuMode = INTRA;
				end
			end
			sampOff := sampOff + 4;
		end

		idxBlk := idxBlk + 1;
	end

	getSamples.done: action ==>
	guard
		idxBlk = numBlkToSend || (EnabSkipInPix && not getInSamp)
	end

	schedule fsm GetPartMode:
		GetPartMode(isNewSliceOrPict.notDep   )--> GetTilesCoord;
		GetPartMode(isNewSliceOrPict.dep      )--> GetPartMode;
		GetPartMode(getPartMode.isQuadTree    )--> GetCuInfo;
		GetPartMode(getPartMode.isNonQuadTree )--> GetCuInfoNonQT;

		GetTilesCoord (getTilesCoord.launch )--> GetTilesCoord;
		GetTilesCoord (getTilesCoord.done   )--> GetPartMode;

		GetCuInfoNonQT (getCuInfo.nonQT )--> GetSplitTrafoInter;

		GetCuInfo (getCuInfo.launch    )--> GetCuMode;
		GetCuInfo (getCuInfo.getInSamp )--> GetInSamples;
		GetCuInfo (getCuInfo.done      )--> GetPartMode;

		GetCuMode (getCuMode.isIntra )--> GetSplitTrafoIntra;
		GetCuMode (getCuMode.isInter )--> GetSplitTrafoInter;
		GetCuMode (getCuMode.isOther )--> GetCuInfo;

		GetInterSamples (getSamples.launch )--> GetInterSamples;
		GetInterSamples (getSamples.done   )--> GetCuInfo;

		GetSplitTrafoIntra (getSplitTrafo.isTrue  )--> GetSplitTrafoIntra;
		GetSplitTrafoIntra (getSplitTrafo.isFalse )--> SendSamples;
		GetSplitTrafoIntra (getSplitTrafo.done    )--> GetCuInfo;

		GetSplitTrafoInter (getSplitTrafo.isInter  )--> GetSplitTrafoInter;
		GetSplitTrafoInter (getSplitTrafo.done    )--> GetInterSamples;

		SendSamples (sendSamples.launch )--> SendSamples;
		SendSamples (sendSamples.done   )--> GetIntraSamples;

		GetIntraSamples (getSamples.launch )--> GetIntraSamples;
		GetIntraSamples (getSamples.done   )--> GetSplitTrafoIntra;

		GetInSamples (getSamples.launch )--> GetInSamples;
		GetInSamples (getSamples.done   )--> GetCuInfo;
	end
end